cc.Animation3D
cc.Animation3D:initWithFile(const_std_string_filename,const_std_string_animationName)
cc.Animation3D:init(const_Animation3DData_data)
cc.Animation3D:getDuration()
cc.Animation3D:create(const_std_string_filename,const_std_string_animationName)
cc.Animate3D
cc.Animate3D:setKeyFrameUserInfo(int_keyFrame,const_ValueMap_userInfo)
cc.Animate3D:getSpeed()
cc.Animate3D:setQuality(Animate3DQuality_quality)
cc.Animate3D:setWeight(float_weight)
cc.Animate3D:removeFromMap()
cc.Animate3D:initWithFrames(Animation3D_animation,int_startFrame,int_endFrame,float_frameRate)
cc.Animate3D:getOriginInterval()
cc.Animate3D:setSpeed(float_speed)
cc.Animate3D:init(Animation3D_animation)
cc.Animate3D:setOriginInterval(float_interval)
cc.Animate3D:getWeight()
cc.Animate3D:getQuality()
cc.Animate3D:create(Animation3D_animation)
cc.Animate3D:create(Animation3D_animation,float_fromTime,float_duration)
cc.Animate3D:getTransitionTime()
cc.Animate3D:createWithFrames(Animation3D_animation,int_startFrame,int_endFrame,float_frameRate)
cc.Animate3D:setTransitionTime(float_transTime)
cc.TextureCube
cc.TextureCube:reloadTexture()
cc.TextureCube:setTexParameters(const_TexParams)
cc.AttachNode
cc.AttachNode:create(Bone3D_attachBone)
cc.BillBoard
cc.BillBoard:getMode()
cc.BillBoard:setMode(Mode_mode)
cc.BillBoard:create(Mode_mode)
cc.BillBoard:create(const_std_string_filename,Mode_mode)
cc.BillBoard:create(const_std_string_filename,const_Rect_rect,Mode_mode)
cc.BillBoard:createWithTexture(Texture2D_texture,Mode_mode)
cc.Mesh
cc.Mesh:getMaterial()
cc.Mesh:getVertexSizeInBytes()
cc.Mesh:setMaterial(Material_material)
cc.Mesh:getName()
cc.Mesh:getMeshVertexAttribute(int_idx)
cc.Mesh:calculateAABB()
cc.Mesh:draw(Renderer_renderer,float_globalZ,const_Mat4_transform,uint32_t_flags,unsigned_int_lightMask,const_Vec4_color,bool_forceDepthWrite)
cc.Mesh:setName(const_std_string_name)
cc.Mesh:setMeshIndexData(MeshIndexData_indexdata)
cc.Mesh:getMeshVertexAttribCount()
cc.Mesh:setBlendFunc(const_BlendFunc_blendFunc)
cc.Mesh:setForce2DQueue(bool_force2D)
cc.Mesh:setSkin(MeshSkin_skin)
cc.Mesh:isVisible()
cc.Mesh:setGLProgramState(GLProgramState_glProgramState)
cc.Mesh:setVisible(bool_visible)
cc.Skeleton3D
cc.Skeleton3D:removeAllBones()
cc.Skeleton3D:addBone(Bone3D_bone)
cc.Skeleton3D:getBoneByName(const_std_string_id)
cc.Skeleton3D:getRootBone(int_index)
cc.Skeleton3D:updateBoneMatrix()
cc.Skeleton3D:getBoneByIndex(unsigned_int_index)
cc.Skeleton3D:getRootCount()
cc.Skeleton3D:getBoneIndex(Bone3D_bone)
cc.Skeleton3D:getBoneCount()
cc.Skybox
cc.Skybox:reload()
cc.Skybox:init()
cc.Skybox:setTexture(TextureCube)
cc.Sprite3D
cc.Sprite3D:setCullFaceEnabled(bool_enable)
cc.Sprite3D:setTexture(const_std_string_texFile)
cc.Sprite3D:getLightMask()
cc.Sprite3D:getMaterial(int_meshIndex)
cc.Sprite3D:setCullFace(GLenum_cullFace)
cc.Sprite3D:getMeshes()
cc.Sprite3D:removeAllAttachNode()
cc.Sprite3D:setMaterial(Material_material)
cc.Sprite3D:setMaterial(Material_material,int_meshIndex)
cc.Sprite3D:getMesh()
cc.Sprite3D:getMeshCount()
cc.Sprite3D:getMeshByIndex(int_index)
cc.Sprite3D:isForceDepthWrite()
cc.Sprite3D:setLightMask(unsigned_int_mask)
cc.Sprite3D:getAttachNode(const_std_string_boneName)
cc.Sprite3D:setBlendFunc(const_BlendFunc_blendFunc)
cc.Sprite3D:setForce2DQueue(bool_force2D)
cc.Sprite3D:genMaterial(bool_useLight)
cc.Sprite3D:removeAttachNode(const_std_string_boneName)
cc.Sprite3D:getSkeleton()
cc.Sprite3D:setForceDepthWrite(bool_value)
cc.Sprite3D:getMeshByName(const_std_string_name)
cc.Sprite3D:create()
cc.Sprite3D:create(const_std_string_modelPath)
cc.Sprite3D:create(const_std_string_modelPath,const_std_string_texturePath)
cc.Sprite3DCache
cc.Sprite3DCache:removeSprite3DData(const_std_string_key)
cc.Sprite3DCache:removeAllSprite3DData()
cc.Sprite3DCache:destroyInstance()
cc.Sprite3DCache:getInstance()
cc.Sprite3DMaterial
cc.Sprite3DMaterial:getMaterialType()
cc.Sprite3DMaterial:createWithFilename(const_std_string_path)
cc.Sprite3DMaterial:releaseCachedMaterial()
cc.Sprite3DMaterial:createBuiltInMaterial(MaterialType_type,bool_skinned)
cc.Sprite3DMaterial:createBuiltInMaterial()
cc.Sprite3DMaterial:createWithGLStateProgram(GLProgramState_programState)
cc.Sprite3DMaterial:releaseBuiltInMaterial()
cc.Terrain
cc.Terrain:initHeightMap(const_std_string_heightMap)
cc.Terrain:setMaxDetailMapAmount(int_maxValue)
cc.Terrain:setDrawWire(bool_boolValue)
cc.Terrain:getHeightData()
cc.Terrain:setDetailMap(unsigned_int_index,DetailMap_detailMap)
cc.Terrain:resetHeightMap(const_std_string_heightMap)
cc.Terrain:setLightDir(const_Vec3_lightDir)
cc.Terrain:setAlphaMap(cocos2d_Texture2D__newAlphaMapTexture)
cc.Terrain:setSkirtHeightRatio(float_ratio)
cc.Terrain:convertToTerrainSpace(const_Vec2_worldSpace)
cc.Terrain:initTextures()
cc.Terrain:initProperties()
cc.Terrain:initWithTerrainData(TerrainData_parameter,CrackFixedType_fixedType)
cc.Terrain:setLODDistance(float_lod1,float_lod2,float_lod3)
cc.Terrain:getTerrainSize()
cc.Terrain:getNormal(int_pixelX,int_pixelY)
cc.Terrain:reload()
cc.Terrain:getImageHeight(int_pixelX,int_pixelY)
cc.Terrain:setLightMap(const_std_string_fileName)
cc.Terrain:setIsEnableFrustumCull(bool_boolValue)
cc.Terrain:getMinHeight()
cc.Terrain:getMaxHeight()
cc.Bundle3D
cc.Bundle3D:load(const_std_string_path)
cc.Bundle3D:loadSkinData(const_std_string_id,SkinData_skindata)
cc.Bundle3D:clear()
cc.Bundle3D:loadMaterials(MaterialDatas_materialdatas)
cc.Bundle3D:loadNodes(NodeDatas_nodedatas)
cc.Bundle3D:loadAnimationData(const_std_string_id,Animation3DData_animationdata)
cc.Bundle3D:createBundle()
cc.Bundle3D:destroyBundle(Bundle3D_bundle)
ccexp.AudioProfile
ccexp.AudioProfile:new()
ccexp.AudioEngine
ccexp.AudioEngine:lazyInit()
ccexp.AudioEngine:setCurrentTime(int_audioID,float_sec)
ccexp.AudioEngine:getVolume(int_audioID)
ccexp.AudioEngine:uncache(const_std_string_filePath)
ccexp.AudioEngine:resumeAll()
ccexp.AudioEngine:stopAll()
ccexp.AudioEngine:pause(int_audioID)
ccexp.AudioEngine:getMaxAudioInstance()
ccexp.AudioEngine:isEnabled()
ccexp.AudioEngine:getCurrentTime(int_audioID)
ccexp.AudioEngine:setMaxAudioInstance(int_maxInstances)
ccexp.AudioEngine:isLoop(int_audioID)
ccexp.AudioEngine:pauseAll()
ccexp.AudioEngine:uncacheAll()
ccexp.AudioEngine:setVolume(int_audioID,float_volume)
ccexp.AudioEngine:preload(const_std_string_filePath)
ccexp.AudioEngine:setEnabled(bool_isEnabled)
ccexp.AudioEngine:play2d(const_std_string_filePath,bool_loop,float_volume,const_AudioProfile_profile)
ccexp.AudioEngine:getState(int_audioID)
ccexp.AudioEngine:resume(int_audioID)
ccexp.AudioEngine:stop(int_audioID)
ccexp.AudioEngine:getDuration(int_audioID)
ccexp.AudioEngine:setLoop(int_audioID,bool_loop)
ccexp.AudioEngine:getDefaultProfile()
ccexp.AudioEngine:getProfile(int_audioID)
ccexp.AudioEngine:getProfile(const_std_string_profileName)
ccexp.AudioEngine:getPlayingAudioCount()
cc.Ref
cc.Ref:release()
cc.Ref:retain()
cc.Ref:getReferenceCount()
cc.Console
cc.Console:addSubCommand(const_Command_subCmd)
cc.Console:getSubCommand(const_std_string_subCmdName)
cc.Console:delSubCommand(const_std_string_subCmdName)
cc.Texture2D
cc.Texture2D:getMaxT()
cc.Texture2D:setAlphaTexture(Texture2D_alphaTexture)
cc.Texture2D:getStringForFormat()
cc.Texture2D:initWithImage(Image__image)
cc.Texture2D:initWithImage(Image__image,PixelFormat_format)
cc.Texture2D:getMaxS()
cc.Texture2D:releaseGLTexture()
cc.Texture2D:hasPremultipliedAlpha()
cc.Texture2D:getPixelsHigh()
cc.Texture2D:getAlphaTextureName()
cc.Texture2D:getBitsPerPixelForFormat()
cc.Texture2D:getBitsPerPixelForFormat(Texture2D_PixelFormat_format)
cc.Texture2D:getName()
cc.Texture2D:initWithString(const_char_text,const_std_string_fontName,float_fontSize,const_Size_dimensions,TextHAlignment_hAlignment,TextVAlignment_vAlignment,bool_enableWrap,int_overflow)
cc.Texture2D:initWithString(const_char_text,const_FontDefinition_textDefinition)
cc.Texture2D:setMaxT(GLfloat_maxT)
cc.Texture2D:getPath()
cc.Texture2D:drawInRect(const_Rect_rect)
cc.Texture2D:getContentSize()
cc.Texture2D:setAliasTexParameters()
cc.Texture2D:setAntiAliasTexParameters()
cc.Texture2D:generateMipmap()
cc.Texture2D:getAlphaTexture()
cc.Texture2D:getDescription()
cc.Texture2D:getPixelFormat()
cc.Texture2D:setGLProgram(GLProgram_program)
cc.Texture2D:getContentSizeInPixels()
cc.Texture2D:getPixelsWide()
cc.Texture2D:drawAtPoint(const_Vec2_point)
cc.Texture2D:getGLProgram()
cc.Texture2D:hasMipmaps()
cc.Texture2D:setMaxS(GLfloat_maxS)
cc.Texture2D:setDefaultAlphaPixelFormat(Texture2D_PixelFormat_format)
cc.Texture2D:getDefaultAlphaPixelFormat()
cc.Touch
cc.Touch:getPreviousLocationInView()
cc.Touch:getLocation()
cc.Touch:getDelta()
cc.Touch:getStartLocationInView()
cc.Touch:getCurrentForce()
cc.Touch:getStartLocation()
cc.Touch:setTouchInfo(int_id,float_x,float_y)
cc.Touch:setTouchInfo(int_id,float_x,float_y,float_force,float_maxForce)
cc.Touch:getMaxForce()
cc.Touch:getLocationInView()
cc.Touch:getPreviousLocation()
cc.Event
cc.Event:isStopped()
cc.Event:getType()
cc.Event:getCurrentTarget()
cc.Event:stopPropagation()
cc.EventTouch
cc.EventTouch:getEventCode()
cc.EventTouch:setEventCode(EventCode_eventCode)
cc.EventKeyboard
cc.EventKeyboard:new()
cc.Component
cc.Component:setEnabled(bool_enabled)
cc.Component:onRemove()
cc.Component:setName(const_std_string_name)
cc.Component:isEnabled()
cc.Component:update(float_delta)
cc.Component:getOwner()
cc.Component:init()
cc.Component:setOwner(Node_owner)
cc.Component:getName()
cc.Component:onAdd()
cc.Component:create()
cc.Node
cc.Node:addChild(Node__child)
cc.Node:addChild(Node__child,int_localZOrder)
cc.Node:addChild(Node_child,int_localZOrder,int_tag)
cc.Node:addChild(Node_child,int_localZOrder,const_std_string_name)
cc.Node:getDescription()
cc.Node:setRotationSkewY(float_rotationY)
cc.Node:getChildren()
cc.Node:isIgnoreAnchorPointForPosition()
cc.Node:getChildByName(const_std_string_name)
cc.Node:setRotation(float_rotation)
cc.Node:setScaleZ(float_scaleZ)
cc.Node:setScaleY(float_scaleY)
cc.Node:setScaleX(float_scaleX)
cc.Node:setRotationSkewX(float_rotationX)
cc.Node:_setLocalZOrder(int_z)
cc.Node:getTag()
cc.Node:getGLProgram()
cc.Node:getPosition3D()
cc.Node:removeChild(Node_child,bool_cleanup)
cc.Node:setSkewX(float_skewX)
cc.Node:setGLProgramState(GLProgramState_glProgramState)
cc.Node:setNormalizedPosition(const_Vec2_position)
cc.Node:removeAllChildren()
cc.Node:setParent(Node_parent)
cc.Node:getName()
cc.Node:getRotation3D()
cc.Node:setPositionNormalized(const_Vec2_position)
cc.Node:setPosition(const_Vec2_position)
cc.Node:setPosition(float_x,float_y)
cc.Node:reorderChild(Node__child,int_localZOrder)
cc.Node:setSkewY(float_skewY)
cc.Node:setPositionZ(float_positionZ)
cc.Node:setRotation3D(const_Vec3_rotation)
cc.Node:setPositionX(float_x)
cc.Node:getAnchorPoint()
cc.Node:setGLProgram(GLProgram_glprogram)
cc.Node:isVisible()
cc.Node:getChildrenCount()
cc.Node:getRotation()
cc.Node:getAnchorPointInPoints()
cc.Node:removeChildByName(const_std_string_name,bool_cleanup)
cc.Node:getGLProgramState()
cc.Node:getSkewX()
cc.Node:getSkewY()
cc.Node:setName(const_std_string_name)
cc.Node:getLocalZOrder()
cc.Node:getPositionNormalized()
cc.Node:isRunning()
cc.Node:getParent()
cc.Node:getPositionZ()
cc.Node:getPositionY()
cc.Node:getPositionX()
cc.Node:removeChildByTag(int_tag,bool_cleanup)
cc.Node:setPositionY(float_y)
cc.Node:setVisible(bool_visible)
cc.Node:setGlobalZOrder(float_globalZOrder)
cc.Node:setScale(float_scale)
cc.Node:setScale(float_scaleX,float_scaleY)
cc.Node:getChildByTag(int_tag)
cc.Node:getScaleZ()
cc.Node:getScaleY()
cc.Node:getScaleX()
cc.Node:setLocalZOrder(int_localZOrder)
cc.Node:getContentSize()
cc.Node:setIgnoreAnchorPointForPosition(bool_ignore)
cc.Node:getGlobalZOrder()
cc.Node:setUserObject(Ref_userObject)
cc.Node:removeFromParent()
cc.Node:setPosition3D(const_Vec3_position)
cc.Node:sortAllChildren()
cc.Node:getScale()
cc.Node:updateOrderOfArrival()
cc.Node:getNormalizedPosition()
cc.Node:getRotationSkewX()
cc.Node:getRotationSkewY()
cc.Node:setTag(int_tag)
cc.Node:create()
cc.Node:getAttachedNodeCount()
cc.Scene
cc.Scene:initWithPhysics()
cc.Scene:setCameraOrderDirty()
cc.Scene:render(Renderer_renderer,const_Mat4_eyeTransform,const_Mat4_eyeProjection)
cc.Scene:render(Renderer_renderer,const_Mat4_eyeTransforms,const_Mat4_eyeProjections,unsigned_int_multiViewCount)
cc.Scene:stepPhysicsAndNavigation(float_deltaTime)
cc.Scene:onProjectionChanged(EventCustom_event)
cc.Scene:getPhysicsWorld()
cc.Scene:initWithSize(const_Size_size)
cc.Scene:getDefaultCamera()
cc.Scene:createWithSize(const_Size_size)
cc.Scene:create()
cc.Scene:createWithPhysics()
cc.GLView
cc.GLView:setFrameSize(float_width,float_height)
cc.GLView:getViewPortRect()
cc.GLView:setContentScaleFactor(float_scaleFactor)
cc.GLView:getContentScaleFactor()
cc.GLView:setIMEKeyboardState(bool_open)
cc.GLView:getVR()
cc.GLView:setScissorInPoints(float_x,float_y,float_w,float_h)
cc.GLView:getViewName()
cc.GLView:isOpenGLReady()
cc.GLView:setCursorVisible(bool_isVisible)
cc.GLView:getFrameSize()
cc.GLView:getScaleY()
cc.GLView:getScaleX()
cc.GLView:getVisibleOrigin()
cc.GLView:setFrameZoomFactor(float_zoomFactor)
cc.GLView:getFrameZoomFactor()
cc.GLView:getDesignResolutionSize()
cc.GLView:windowShouldClose()
cc.GLView:swapBuffers()
cc.GLView:setDesignResolutionSize(float_width,float_height,ResolutionPolicy_resolutionPolicy)
cc.GLView:getResolutionPolicy()
cc.GLView:isRetinaDisplay()
cc.GLView:renderScene(Scene_scene,Renderer_renderer)
cc.GLView:setVR(VRIRenderer_vrrenderer)
cc.GLView:setViewPortInPoints(float_x,float_y,float_w,float_h)
cc.GLView:getScissorRect()
cc.GLView:getRetinaFactor()
cc.GLView:setViewName(const_std_string_viewname)
cc.GLView:getVisibleRect()
cc.GLView:getVisibleSize()
cc.GLView:isScissorEnabled()
cc.GLView:pollEvents()
cc.GLView:setGLContextAttrs(GLContextAttrs_glContextAttrs)
cc.GLView:getGLContextAttrs()
cc.Director
cc.Director:pause()
cc.Director:pushProjectionMatrix(size_t_index)
cc.Director:popProjectionMatrix(size_t_index)
cc.Director:setEventDispatcher(EventDispatcher_dispatcher)
cc.Director:loadProjectionIdentityMatrix(size_t_index)
cc.Director:setContentScaleFactor(float_scaleFactor)
cc.Director:getContentScaleFactor()
cc.Director:getWinSizeInPixels()
cc.Director:getDeltaTime()
cc.Director:setGLDefaultValues()
cc.Director:setActionManager(ActionManager_actionManager)
cc.Director:setAlphaBlending(bool_on)
cc.Director:popToRootScene()
cc.Director:loadMatrix(MATRIX_STACK_TYPE_type,const_Mat4_mat)
cc.Director:getNotificationNode()
cc.Director:getWinSize()
cc.Director:getTextureCache()
cc.Director:isSendCleanupToScene()
cc.Director:getVisibleOrigin()
cc.Director:mainLoop()
cc.Director:mainLoop(float_dt)
cc.Director:setDepthTest(bool_on)
cc.Director:getFrameRate()
cc.Director:getSecondsPerFrame()
cc.Director:resetMatrixStack()
cc.Director:convertToUI(const_Vec2_point)
cc.Director:pushMatrix(MATRIX_STACK_TYPE_type)
cc.Director:setDefaultValues()
cc.Director:init()
cc.Director:setScheduler(Scheduler_scheduler)
cc.Director:multiplyProjectionMatrix(const_Mat4_mat,size_t_index)
cc.Director:getMatrix(MATRIX_STACK_TYPE_type)
cc.Director:isValid()
cc.Director:startAnimation()
cc.Director:startAnimation(SetIntervalReason_reason)
cc.Director:getOpenGLView()
cc.Director:getRunningScene()
cc.Director:setViewport()
cc.Director:stopAnimation()
cc.Director:popToSceneStackLevel(int_level)
cc.Director:resume()
cc.Director:isNextDeltaTimeZero()
cc.Director:setClearColor(const_Color4F_clearColor)
cc.Director:setOpenGLView(GLView_openGLView)
cc.Director:convertToGL(const_Vec2_point)
cc.Director:purgeCachedData()
cc.Director:getTotalFrames()
cc.Director:runWithScene(Scene_scene)
cc.Director:setNotificationNode(Node_node)
cc.Director:drawScene()
cc.Director:restart()
cc.Director:popScene()
cc.Director:loadIdentityMatrix(MATRIX_STACK_TYPE_type)
cc.Director:isDisplayStats()
cc.Director:setProjection(Projection_projection)
cc.Director:getConsole()
cc.Director:multiplyMatrix(MATRIX_STACK_TYPE_type,const_Mat4_mat)
cc.Director:getZEye()
cc.Director:setNextDeltaTimeZero(bool_nextDeltaTimeZero)
cc.Director:popMatrix(MATRIX_STACK_TYPE_type)
cc.Director:getVisibleSize()
cc.Director:loadProjectionMatrix(const_Mat4_mat,size_t_index)
cc.Director:initProjectionMatrixStack(size_t_stackCount)
cc.Director:getScheduler()
cc.Director:pushScene(Scene_scene)
cc.Director:getAnimationInterval()
cc.Director:isPaused()
cc.Director:setDisplayStats(bool_displayStats)
cc.Director:getEventDispatcher()
cc.Director:replaceScene(Scene_scene)
cc.Director:setAnimationInterval(float_interval)
cc.Director:setAnimationInterval(float_interval,SetIntervalReason_reason)
cc.Director:getActionManager()
cc.Director:getInstance()
cc.Timer
cc.Timer:setupTimerWithInterval(float_seconds,unsigned_int_repeat,float_delay)
cc.Timer:update(float_dt)
cc.Timer:isAborted()
cc.Timer:isExhausted()
cc.Timer:trigger(float_dt)
cc.Timer:cancel()
cc.Timer:setAborted()
cc.Scheduler
cc.Scheduler:setTimeScale(float_timeScale)
cc.Scheduler:removeAllFunctionsToBePerformedInCocosThread()
cc.Scheduler:getTimeScale()
cc.AsyncTaskPool
cc.AsyncTaskPool:enqueue(TaskType_type,TaskCallBack_callback,void_callbackParam)
cc.AsyncTaskPool:enqueue(AsyncTaskPool_TaskType_type)
cc.AsyncTaskPool:enqueue(TaskCallBack_callback,void_callbackParam)
cc.AsyncTaskPool:stopTasks(TaskType_type)
cc.AsyncTaskPool:destroyInstance()
cc.AsyncTaskPool:getInstance()
cc.Action
cc.Action:startWithTarget(Node_target)
cc.Action:setOriginalTarget(Node_originalTarget)
cc.Action:clone()
cc.Action:getOriginalTarget()
cc.Action:stop()
cc.Action:update(float_time)
cc.Action:getTarget()
cc.Action:getFlags()
cc.Action:step(float_dt)
cc.Action:setTag(int_tag)
cc.Action:setFlags(unsigned_int_flags)
cc.Action:getTag()
cc.Action:setTarget(Node_target)
cc.Action:isDone()
cc.Action:reverse()
cc.FiniteTimeAction
cc.FiniteTimeAction:setDuration(float_duration)
cc.FiniteTimeAction:getDuration()
cc.Speed
cc.Speed:setInnerAction(ActionInterval_action)
cc.Speed:getSpeed()
cc.Speed:setSpeed(float_speed)
cc.Speed:initWithAction(ActionInterval_action,float_speed)
cc.Speed:getInnerAction()
cc.Speed:create(ActionInterval_action,float_speed)
cc.Follow
cc.Follow:setBoundarySet(bool_value)
cc.Follow:initWithTarget(Node_followedNode,const_Rect_rect)
cc.Follow:initWithTargetAndOffset(Node_followedNode,float_xOffset,float_yOffset,const_Rect_rect)
cc.Follow:isBoundarySet()
cc.Follow:create(Node_followedNode,const_Rect_rect)
cc.Follow:createWithOffset(Node_followedNode,float_xOffset,float_yOffset,const_Rect_rect)
cc.Image
cc.Image:hasPremultipliedAlpha()
cc.Image:saveToFile(const_std_string_filename,bool_isToRGB)
cc.Image:hasAlpha()
cc.Image:isCompressed()
cc.Image:getHeight()
cc.Image:initWithImageFile(const_std_string_path)
cc.Image:getWidth()
cc.Image:getBitPerPixel()
cc.Image:getFileType()
cc.Image:getFilePath()
cc.Image:getNumberOfMipmaps()
cc.Image:getRenderFormat()
cc.Image:setPVRImagesHavePremultipliedAlpha(bool_haveAlphaPremultiplied)
cc.Image:setPNGPremultipliedAlphaEnabled(bool_enabled)
cc.GLProgramState
cc.GLProgramState:getVertexAttribsFlags()
cc.GLProgramState:setUniformVec4(const_std_string_uniformName,const_Vec4_value)
cc.GLProgramState:setUniformVec4(GLint_uniformLocation,const_Vec4_value)
cc.GLProgramState:applyAutoBinding(const_std_string_uniformName,const_std_string_autoBinding)
cc.GLProgramState:setUniformVec2(const_std_string_uniformName,const_Vec2_value)
cc.GLProgramState:setUniformVec2(GLint_uniformLocation,const_Vec2_value)
cc.GLProgramState:setUniformVec3(const_std_string_uniformName,const_Vec3_value)
cc.GLProgramState:setUniformVec3(GLint_uniformLocation,const_Vec3_value)
cc.GLProgramState:apply(const_Mat4_modelView)
cc.GLProgramState:getNodeBinding()
cc.GLProgramState:setUniformVec4v(const_std_string_uniformName,ssize_t_size,const_Vec4_pointer)
cc.GLProgramState:setUniformVec4v(GLint_uniformLocation,ssize_t_size,const_Vec4_pointer)
cc.GLProgramState:applyGLProgram(const_Mat4_modelView)
cc.GLProgramState:setNodeBinding(Node_node)
cc.GLProgramState:setUniformInt(const_std_string_uniformName,int_value)
cc.GLProgramState:setUniformInt(GLint_uniformLocation,int_value)
cc.GLProgramState:setParameterAutoBinding(const_std_string_uniformName,const_std_string_autoBinding)
cc.GLProgramState:setUniformVec2v(const_std_string_uniformName,ssize_t_size,const_Vec2_pointer)
cc.GLProgramState:setUniformVec2v(GLint_uniformLocation,ssize_t_size,const_Vec2_pointer)
cc.GLProgramState:getUniformCount()
cc.GLProgramState:applyAttributes(bool_applyAttribFlags)
cc.GLProgramState:clone()
cc.GLProgramState:setGLProgram(GLProgram_glprogram)
cc.GLProgramState:setUniformFloatv(const_std_string_uniformName,ssize_t_size,const_float_pointer)
cc.GLProgramState:setUniformFloatv(GLint_uniformLocation,ssize_t_size,const_float_pointer)
cc.GLProgramState:getGLProgram()
cc.GLProgramState:setUniformTexture(const_std_string_uniformName,Texture2D_texture)
cc.GLProgramState:setUniformTexture(const_std_string_uniformName,GLuint_textureId)
cc.GLProgramState:setUniformTexture(GLint_uniformLocation,Texture2D_texture)
cc.GLProgramState:setUniformTexture(GLint_uniformLocation,GLuint_textureId)
cc.GLProgramState:applyUniforms()
cc.GLProgramState:setUniformFloat(const_std_string_uniformName,float_value)
cc.GLProgramState:setUniformFloat(GLint_uniformLocation,float_value)
cc.GLProgramState:setUniformMat4(const_std_string_uniformName,const_Mat4_value)
cc.GLProgramState:setUniformMat4(GLint_uniformLocation,const_Mat4_value)
cc.GLProgramState:setUniformVec3v(const_std_string_uniformName,ssize_t_size,const_Vec3_pointer)
cc.GLProgramState:setUniformVec3v(GLint_uniformLocation,ssize_t_size,const_Vec3_pointer)
cc.GLProgramState:getVertexAttribCount()
cc.GLProgramState:create(GLProgram_glprogram)
cc.GLProgramState:getOrCreateWithGLProgramName(const_std_string_glProgramName)
cc.GLProgramState:getOrCreateWithGLProgramName(const_std_string_glProgramName,Texture2D_texture)
cc.GLProgramState:getOrCreateWithGLProgram(GLProgram_glprogram)
cc.GLProgramState:getOrCreateWithShaders(const_std_string_vertexShader,const_std_string_fragShader,const_std_string_compileTimeDefines)
cc.PolygonInfo
cc.PolygonInfo:getFilename()
cc.PolygonInfo:getArea()
cc.PolygonInfo:getRect()
cc.PolygonInfo:setFilename(const_std_string_filename)
cc.PolygonInfo:setQuads(V3F_C4B_T2F_Quad_quads,int_numberOfQuads)
cc.PolygonInfo:getVertCount()
cc.PolygonInfo:getTrianglesCount()
cc.PolygonInfo:setQuad(V3F_C4B_T2F_Quad_quad)
cc.PolygonInfo:setTriangles(const_TrianglesCommand_Triangles_triangles)
cc.PolygonInfo:setRect(const_Rect_rect)
cc.AutoPolygon
cc.AutoPolygon:new()
cc.SpriteFrame
cc.SpriteFrame:setAnchorPoint(const_Vec2_anchorPoint)
cc.SpriteFrame:setTexture(Texture2D_pobTexture)
cc.SpriteFrame:getTexture()
cc.SpriteFrame:setOffsetInPixels(const_Vec2_offsetInPixels)
cc.SpriteFrame:getOriginalSizeInPixels()
cc.SpriteFrame:setOriginalSize(const_Size_sizeInPixels)
cc.SpriteFrame:getCenterRect()
cc.SpriteFrame:setRectInPixels(const_Rect_rectInPixels)
cc.SpriteFrame:getRect()
cc.SpriteFrame:setCenterRectInPixels(const_Rect_centerRect)
cc.SpriteFrame:setOffset(const_Vec2_offsets)
cc.SpriteFrame:initWithTextureFilename(const_std_string_filename,const_Rect_rect)
cc.SpriteFrame:initWithTextureFilename(const_std_string_filename,const_Rect_rect,bool_rotated,const_Vec2_offset,const_Size_originalSize)
cc.SpriteFrame:setRect(const_Rect_rect)
cc.SpriteFrame:initWithTexture(Texture2D_pobTexture,const_Rect_rect)
cc.SpriteFrame:initWithTexture(Texture2D_pobTexture,const_Rect_rect,bool_rotated,const_Vec2_offset,const_Size_originalSize)
cc.SpriteFrame:getOriginalSize()
cc.SpriteFrame:clone()
cc.SpriteFrame:getRectInPixels()
cc.SpriteFrame:isRotated()
cc.SpriteFrame:hasCenterRect()
cc.SpriteFrame:setRotated(bool_rotated)
cc.SpriteFrame:getOffset()
cc.SpriteFrame:setOriginalSizeInPixels(const_Size_sizeInPixels)
cc.SpriteFrame:getAnchorPoint()
cc.SpriteFrame:hasAnchorPoint()
cc.SpriteFrame:getOffsetInPixels()
cc.SpriteFrame:create(const_std_string_filename,const_Rect_rect)
cc.SpriteFrame:create(const_std_string_filename,const_Rect_rect,bool_rotated,const_Vec2_offset,const_Size_originalSize)
cc.SpriteFrame:createWithTexture(Texture2D_pobTexture,const_Rect_rect)
cc.SpriteFrame:createWithTexture(Texture2D_pobTexture,const_Rect_rect,bool_rotated,const_Vec2_offset,const_Size_originalSize)
cc.AnimationFrame
cc.AnimationFrame:setSpriteFrame(SpriteFrame_frame)
cc.AnimationFrame:getUserInfo()
cc.AnimationFrame:setDelayUnits(float_delayUnits)
cc.AnimationFrame:clone()
cc.AnimationFrame:getSpriteFrame()
cc.AnimationFrame:getDelayUnits()
cc.AnimationFrame:setUserInfo(const_ValueMap_userInfo)
cc.AnimationFrame:initWithSpriteFrame(SpriteFrame_spriteFrame,float_delayUnits,const_ValueMap_userInfo)
cc.AnimationFrame:create(SpriteFrame_spriteFrame,float_delayUnits,const_ValueMap_userInfo)
cc.Animation
cc.Animation:getLoops()
cc.Animation:addSpriteFrame(SpriteFrame_frame)
cc.Animation:setRestoreOriginalFrame(bool_restoreOriginalFrame)
cc.Animation:clone()
cc.Animation:getDuration()
cc.Animation:initWithAnimationFrames(float_delayPerUnit,unsigned_int_loops)
cc.Animation:init()
cc.Animation:setFrames()
cc.Animation:getFrames()
cc.Animation:setLoops(unsigned_int_loops)
cc.Animation:setDelayPerUnit(float_delayPerUnit)
cc.Animation:addSpriteFrameWithFile(const_std_string_filename)
cc.Animation:getTotalDelayUnits()
cc.Animation:getDelayPerUnit()
cc.Animation:initWithSpriteFrames(float_delay,unsigned_int_loops)
cc.Animation:getRestoreOriginalFrame()
cc.Animation:addSpriteFrameWithTexture(Texture2D_pobTexture,const_Rect_rect)
cc.Animation:create()
cc.Animation:create(float_delayPerUnit,unsigned_int_loops)
cc.Animation:createWithSpriteFrames(float_delay,unsigned_int_loops)
cc.ActionInterval
cc.ActionInterval:getAmplitudeRate()
cc.ActionInterval:initWithDuration(float_d)
cc.ActionInterval:setAmplitudeRate(float_amp)
cc.ActionInterval:getElapsed()
cc.Sequence
cc.Sequence:init()
cc.Sequence:initWithTwoActions(FiniteTimeAction_pActionOne,FiniteTimeAction_pActionTwo)
cc.Repeat
cc.Repeat:setInnerAction(FiniteTimeAction_action)
cc.Repeat:initWithAction(FiniteTimeAction_pAction,unsigned_int_times)
cc.Repeat:getInnerAction()
cc.Repeat:create(FiniteTimeAction_action,unsigned_int_times)
cc.RepeatForever
cc.RepeatForever:setInnerAction(ActionInterval_action)
cc.RepeatForever:initWithAction(ActionInterval_action)
cc.RepeatForever:getInnerAction()
cc.RepeatForever:create(ActionInterval_action)
cc.Spawn
cc.Spawn:init()
cc.Spawn:initWithTwoActions(FiniteTimeAction_action1,FiniteTimeAction_action2)
cc.RotateTo
cc.RotateTo:initWithDuration(float_duration,float_dstAngleX,float_dstAngleY)
cc.RotateTo:initWithDuration(float_duration,const_Vec3_dstAngle3D)
cc.RotateTo:create(float_duration,float_dstAngleX,float_dstAngleY)
cc.RotateTo:create(float_duration,float_dstAngle)
cc.RotateTo:create(float_duration,const_Vec3_dstAngle3D)
cc.RotateBy
cc.RotateBy:initWithDuration(float_duration,float_deltaAngle)
cc.RotateBy:initWithDuration(float_duration,float_deltaAngleZ_X,float_deltaAngleZ_Y)
cc.RotateBy:create(float_duration,float_deltaAngle)
cc.RotateBy:create(float_duration,float_deltaAngleZ_X,float_deltaAngleZ_Y)
cc.RotateBy:create(float_duration,const_Vec3_deltaAngle3D)
cc.MoveBy
cc.MoveBy:initWithDuration(float_duration,const_Vec2_deltaPosition)
cc.MoveBy:create(float_duration,const_Vec2_deltaPosition)
cc.MoveBy:create(float_duration,const_Vec3_deltaPosition)
cc.MoveTo
cc.MoveTo:initWithDuration(float_duration,const_Vec2_position)
cc.MoveTo:initWithDuration(float_duration,const_Vec3_position)
cc.MoveTo:create(float_duration,const_Vec2_position)
cc.MoveTo:create(float_duration,const_Vec3_position)
cc.SkewTo
cc.SkewTo:initWithDuration(float_t,float_sx,float_sy)
cc.SkewTo:create(float_t,float_sx,float_sy)
cc.SkewBy
cc.SkewBy:initWithDuration(float_t,float_sx,float_sy)
cc.SkewBy:create(float_t,float_deltaSkewX,float_deltaSkewY)
cc.JumpBy
cc.JumpBy:initWithDuration(float_duration,const_Vec2_position,float_height,int_jumps)
cc.JumpBy:create(float_duration,const_Vec2_position,float_height,int_jumps)
cc.JumpTo
cc.JumpTo:initWithDuration(float_duration,const_Vec2_position,float_height,int_jumps)
cc.JumpTo:create(float_duration,const_Vec2_position,float_height,int_jumps)
cc.BezierBy
cc.BezierBy:initWithDuration(float_t,const_ccBezierConfig_c)
cc.BezierTo
cc.BezierTo:initWithDuration(float_t,const_ccBezierConfig_c)
cc.ScaleTo
cc.ScaleTo:initWithDuration(float_duration,float_s)
cc.ScaleTo:initWithDuration(float_duration,float_sx,float_sy)
cc.ScaleTo:initWithDuration(float_duration,float_sx,float_sy,float_sz)
cc.ScaleTo:create(float_duration,float_s)
cc.ScaleTo:create(float_duration,float_sx,float_sy)
cc.ScaleTo:create(float_duration,float_sx,float_sy,float_sz)
cc.ScaleBy
cc.ScaleBy:create(float_duration,float_s)
cc.ScaleBy:create(float_duration,float_sx,float_sy)
cc.ScaleBy:create(float_duration,float_sx,float_sy,float_sz)
cc.Blink
cc.Blink:initWithDuration(float_duration,int_blinks)
cc.Blink:create(float_duration,int_blinks)
cc.FadeTo
cc.FadeTo:initWithDuration(float_duration,GLubyte_opacity)
cc.FadeTo:create(float_duration,GLubyte_opacity)
cc.FadeIn
cc.FadeIn:setReverseAction(FadeTo_ac)
cc.FadeIn:create(float_d)
cc.FadeOut
cc.FadeOut:setReverseAction(FadeTo_ac)
cc.FadeOut:create(float_d)
cc.TintTo
cc.TintTo:initWithDuration(float_duration,GLubyte_red,GLubyte_green,GLubyte_blue)
cc.TintTo:create(float_duration,GLubyte_red,GLubyte_green,GLubyte_blue)
cc.TintTo:create(float_duration,const_Color3B_color)
cc.TintBy
cc.TintBy:initWithDuration(float_duration,GLshort_deltaRed,GLshort_deltaGreen,GLshort_deltaBlue)
cc.TintBy:create(float_duration,GLshort_deltaRed,GLshort_deltaGreen,GLshort_deltaBlue)
cc.DelayTime
cc.DelayTime:create(float_d)
cc.Animate
cc.Animate:initWithAnimation(Animation_animation)
cc.Animate:getAnimation()
cc.Animate:getCurrentFrameIndex()
cc.Animate:setAnimation(Animation_animation)
cc.Animate:create(Animation_animation)
cc.TargetedAction
cc.TargetedAction:getForcedTarget()
cc.TargetedAction:initWithTarget(Node_target,FiniteTimeAction_action)
cc.TargetedAction:setForcedTarget(Node_forcedTarget)
cc.TargetedAction:create(Node_target,FiniteTimeAction_action)
cc.ActionFloat
cc.ActionFloat:initWithDuration(float_duration,float_from,float_to,ActionFloatCallback_callback)
cc.ActionFloat:create(float_duration,float_from,float_to,ActionFloatCallback_callback)
cc.Properties
cc.Properties:getVariable(const_char_name,const_char_defaultValue)
cc.Properties:getString(const_char_name,const_char_defaultValue)
cc.Properties:getLong(const_char_name)
cc.Properties:getNamespace(const_char_id,bool_searchNames,bool_recurse)
cc.Properties:getNamespace()
cc.Properties:getPath(const_char_name,std_string_path)
cc.Properties:getMat4(const_char_name,Mat4_out)
cc.Properties:exists(const_char_name)
cc.Properties:setString(const_char_name,const_char_value)
cc.Properties:getId()
cc.Properties:rewind()
cc.Properties:setVariable(const_char_name,const_char_value)
cc.Properties:getBool(const_char_name,bool_defaultValue)
cc.Properties:getColor(const_char_name,Vec3_out)
cc.Properties:getColor(const_char_name,Vec4_out)
cc.Properties:getType(const_char_name)
cc.Properties:getNextNamespace()
cc.Properties:getInt(const_char_name)
cc.Properties:getVec3(const_char_name,Vec3_out)
cc.Properties:getVec2(const_char_name,Vec2_out)
cc.Properties:getVec4(const_char_name,Vec4_out)
cc.Properties:getNextProperty()
cc.Properties:getFloat(const_char_name)
cc.Properties:getQuaternionFromAxisAngle(const_char_name,Quaternion_out)
cc.Properties:parseColor(const_char_str,Vec3_out)
cc.Properties:parseColor(const_char_str,Vec4_out)
cc.Properties:parseVec3(const_char_str,Vec3_out)
cc.Properties:parseAxisAngle(const_char_str,Quaternion_out)
cc.Properties:parseVec2(const_char_str,Vec2_out)
cc.Properties:parseVec4(const_char_str,Vec4_out)
cc.UserDefault
cc.UserDefault:setIntegerForKey(const_char_key,int_value)
cc.UserDefault:deleteValueForKey(const_char_key)
cc.UserDefault:getFloatForKey(const_char_key)
cc.UserDefault:getFloatForKey(const_char_key,float_defaultValue)
cc.UserDefault:getBoolForKey(const_char_key)
cc.UserDefault:getBoolForKey(const_char_key,bool_defaultValue)
cc.UserDefault:setDoubleForKey(const_char_key,double_value)
cc.UserDefault:setFloatForKey(const_char_key,float_value)
cc.UserDefault:getStringForKey(const_char_key)
cc.UserDefault:getStringForKey(const_char_key,const_std_string__defaultValue)
cc.UserDefault:setStringForKey(const_char_key,const_std_string__value)
cc.UserDefault:flush()
cc.UserDefault:getIntegerForKey(const_char_key)
cc.UserDefault:getIntegerForKey(const_char_key,int_defaultValue)
cc.UserDefault:getDoubleForKey(const_char_key)
cc.UserDefault:getDoubleForKey(const_char_key,double_defaultValue)
cc.UserDefault:setBoolForKey(const_char_key,bool_value)
cc.UserDefault:destroyInstance()
cc.UserDefault:getXMLFilePath()
cc.UserDefault:isXMLFileExist()
cc.FileUtils
cc.FileUtils:fullPathForFilename(const_std_string_filename)
cc.FileUtils:getStringFromFile(const_std_string_filename)
cc.FileUtils:getStringFromFile(const_std_string_path)
cc.FileUtils:setFilenameLookupDictionary(const_ValueMap_filenameLookupDict)
cc.FileUtils:removeFile(const_std_string_filepath)
cc.FileUtils:listFilesRecursivelyAsync(const_std_string_dirPath)
cc.FileUtils:isAbsolutePath(const_std_string_path)
cc.FileUtils:renameFile(const_std_string_path,const_std_string_oldname,const_std_string_name)
cc.FileUtils:renameFile(const_std_string_oldfullpath,const_std_string_newfullpath)
cc.FileUtils:getDefaultResourceRootPath()
cc.FileUtils:isPopupNotify()
cc.FileUtils:getValueVectorFromFile(const_std_string_filename)
cc.FileUtils:getSearchPaths()
cc.FileUtils:writeToFile(const_ValueMap_dict,const_std_string_fullPath)
cc.FileUtils:getOriginalSearchPaths()
cc.FileUtils:getNewFilename(const_std_string_filename)
cc.FileUtils:listFiles(const_std_string_dirPath)
cc.FileUtils:getValueMapFromFile(const_std_string_filename)
cc.FileUtils:getFileSize(const_std_string_filepath)
cc.FileUtils:getValueMapFromData(const_char_filedata,int_filesize)
cc.FileUtils:removeDirectory(const_std_string_dirPath)
cc.FileUtils:setSearchPaths()
cc.FileUtils:writeStringToFile(const_std_string_dataStr,const_std_string_fullPath)
cc.FileUtils:writeStringToFile(std_string_dataStr,const_std_string_fullPath)
cc.FileUtils:setSearchResolutionsOrder()
cc.FileUtils:addSearchResolutionsOrder(const_std_string_order,const_bool_front)
cc.FileUtils:addSearchPath(const_std_string__path,const_bool_front)
cc.FileUtils:writeValueVectorToFile(const_ValueVector_vecData,const_std_string_fullPath)
cc.FileUtils:writeValueVectorToFile(ValueVector_vecData,const_std_string_fullPath)
cc.FileUtils:isFileExist(const_std_string_filename)
cc.FileUtils:purgeCachedEntries()
cc.FileUtils:fullPathFromRelativeFile(const_std_string_filename,const_std_string_relativeFile)
cc.FileUtils:getSuitableFOpen(const_std_string_filenameUtf8)
cc.FileUtils:writeValueMapToFile(const_ValueMap_dict,const_std_string_fullPath)
cc.FileUtils:writeValueMapToFile(ValueMap_dict,const_std_string_fullPath)
cc.FileUtils:getFileExtension(const_std_string_filePath)
cc.FileUtils:setWritablePath(const_std_string_writablePath)
cc.FileUtils:setPopupNotify(bool_notify)
cc.FileUtils:isDirectoryExist(const_std_string_dirPath)
cc.FileUtils:isDirectoryExist(const_std_string_fullPath)
cc.FileUtils:setDefaultResourceRootPath(const_std_string_path)
cc.FileUtils:getSearchResolutionsOrder()
cc.FileUtils:createDirectory(const_std_string_dirPath)
cc.FileUtils:listFilesAsync(const_std_string_dirPath)
cc.FileUtils:getWritablePath()
cc.FileUtils:listFilesRecursively(const_std_string_dirPath)
cc.FileUtils:destroyInstance()
cc.FileUtils:getInstance()
cc.EventAcceleration
cc.EventCustom
cc.EventCustom:getEventName()
cc.EventListener
cc.EventListener:setEnabled(bool_enabled)
cc.EventListener:isEnabled()
cc.EventListener:clone()
cc.EventListener:checkAvailable()
cc.EventDispatcher
cc.EventDispatcher:pauseEventListenersForTarget(Node_target,bool_recursive)
cc.EventDispatcher:addEventListenerWithSceneGraphPriority(EventListener_listener,Node_node)
cc.EventDispatcher:setEnabled(bool_isEnabled)
cc.EventDispatcher:addEventListenerWithFixedPriority(EventListener_listener,int_fixedPriority)
cc.EventDispatcher:removeEventListener(EventListener_listener)
cc.EventDispatcher:dispatchCustomEvent(const_std_string_eventName,void_optionalUserData)
cc.EventDispatcher:resumeEventListenersForTarget(Node_target,bool_recursive)
cc.EventDispatcher:removeEventListenersForTarget(Node_target,bool_recursive)
cc.EventDispatcher:setPriority(EventListener_listener,int_fixedPriority)
cc.EventDispatcher:addCustomEventListener(const_std_string_eventName)
cc.EventDispatcher:dispatchEvent(Event_event)
cc.EventDispatcher:hasEventListener(const_EventListener_ListenerID_listenerID)
cc.EventDispatcher:removeAllEventListeners()
cc.EventDispatcher:removeCustomEventListeners(const_std_string_customEventName)
cc.EventDispatcher:isEnabled()
cc.EventDispatcher:removeEventListenersForType(EventListener_Type_listenerType)
cc.EventFocus
cc.EventFocus:new()
cc.EventListenerAcceleration
cc.EventListenerAcceleration:init()
cc.EventListenerCustom
cc.EventListenerCustom:new()
cc.EventListenerFocus
cc.EventListenerFocus:init()
cc.EventListenerKeyboard
cc.EventListenerKeyboard:init()
cc.EventMouse
cc.EventMouse:getPreviousLocationInView()
cc.EventMouse:getLocation()
cc.EventMouse:getMouseButton()
cc.EventMouse:getPreviousLocation()
cc.EventMouse:getDelta()
cc.EventMouse:setScrollData(float_scrollX,float_scrollY)
cc.EventMouse:getStartLocationInView()
cc.EventMouse:getStartLocation()
cc.EventMouse:setMouseButton(MouseButton_button)
cc.EventMouse:getLocationInView()
cc.EventMouse:getScrollY()
cc.EventMouse:getScrollX()
cc.EventMouse:getCursorX()
cc.EventMouse:getCursorY()
cc.EventMouse:setCursorPosition(float_x,float_y)
cc.EventListenerMouse
cc.EventListenerMouse:init()
cc.EventListenerController
cc.EventListenerController:create()
cc.EventListenerTouchOneByOne
cc.EventListenerTouchOneByOne:isSwallowTouches()
cc.EventListenerTouchOneByOne:setSwallowTouches(bool_needSwallow)
cc.EventListenerTouchOneByOne:init()
cc.EventListenerTouchAllAtOnce
cc.EventListenerTouchAllAtOnce:init()
cc.EventController
cc.EventController:getControllerEventType()
cc.EventController:setConnectStatus(bool_isConnected)
cc.EventController:isConnected()
cc.EventController:setKeyCode(int_keyCode)
cc.EventController:getController()
cc.EventController:getKeyCode()
cc.ActionCamera
cc.ActionCamera:setEye(const_Vec3_eye)
cc.ActionCamera:getEye()
cc.ActionCamera:setUp(const_Vec3_up)
cc.ActionCamera:getCenter()
cc.ActionCamera:setCenter(const_Vec3_center)
cc.ActionCamera:getUp()
cc.OrbitCamera
cc.OrbitCamera:initWithDuration(float_t,float_radius,float_deltaRadius,float_angleZ,float_deltaAngleZ,float_angleX,float_deltaAngleX)
cc.OrbitCamera:create(float_t,float_radius,float_deltaRadius,float_angleZ,float_deltaAngleZ,float_angleX,float_deltaAngleX)
cc.CardinalSplineTo
cc.CardinalSplineTo:getPoints()
cc.CardinalSplineTo:updatePosition(const_Vec2_newPos)
cc.CardinalSplineTo:initWithDuration(float_duration,PointArray_points,float_tension)
cc.CardinalSplineBy
cc.CardinalSplineBy:new()
cc.CatmullRomTo
cc.CatmullRomTo:initWithDuration(float_dt,PointArray_points)
cc.CatmullRomBy
cc.CatmullRomBy:initWithDuration(float_dt,PointArray_points)
cc.ActionEase
cc.ActionEase:initWithAction(ActionInterval_action)
cc.ActionEase:getInnerAction()
cc.EaseRateAction
cc.EaseRateAction:setRate(float_rate)
cc.EaseRateAction:initWithAction(ActionInterval_pAction,float_fRate)
cc.EaseRateAction:getRate()
cc.EaseRateAction:create(ActionInterval_action,float_rate)
cc.EaseExponentialIn
cc.EaseExponentialIn:new()
cc.EaseExponentialIn:create()
cc.EaseExponentialOut
cc.EaseExponentialOut:new()
cc.EaseExponentialOut:create()
cc.EaseExponentialInOut
cc.EaseExponentialInOut:new()
cc.EaseExponentialInOut:create()
cc.EaseSineIn
cc.EaseSineIn:new()
cc.EaseSineIn:create()
cc.EaseSineOut
cc.EaseSineOut:new()
cc.EaseSineOut:create()
cc.EaseSineInOut
cc.EaseSineInOut:new()
cc.EaseSineInOut:create()
cc.EaseBounce
cc.EaseBounceIn
cc.EaseBounceIn:new()
cc.EaseBounceIn:create()
cc.EaseBounceOut
cc.EaseBounceOut:new()
cc.EaseBounceOut:create()
cc.EaseBounceInOut
cc.EaseBounceInOut:new()
cc.EaseBounceInOut:create()
cc.EaseBackIn
cc.EaseBackIn:new()
cc.EaseBackIn:create()
cc.EaseBackOut
cc.EaseBackOut:new()
cc.EaseBackOut:create()
cc.EaseBackInOut
cc.EaseBackInOut:new()
cc.EaseBackInOut:create()
cc.EaseQuadraticActionIn
cc.EaseQuadraticActionIn:new()
cc.EaseQuadraticActionIn:create()
cc.EaseQuadraticActionOut
cc.EaseQuadraticActionOut:new()
cc.EaseQuadraticActionOut:create()
cc.EaseQuadraticActionInOut
cc.EaseQuadraticActionInOut:new()
cc.EaseQuadraticActionInOut:create()
cc.EaseQuarticActionIn
cc.EaseQuarticActionIn:new()
cc.EaseQuarticActionIn:create()
cc.EaseQuarticActionOut
cc.EaseQuarticActionOut:new()
cc.EaseQuarticActionOut:create()
cc.EaseQuarticActionInOut
cc.EaseQuarticActionInOut:new()
cc.EaseQuarticActionInOut:create()
cc.EaseQuinticActionIn
cc.EaseQuinticActionIn:new()
cc.EaseQuinticActionIn:create()
cc.EaseQuinticActionOut
cc.EaseQuinticActionOut:new()
cc.EaseQuinticActionOut:create()
cc.EaseQuinticActionInOut
cc.EaseQuinticActionInOut:new()
cc.EaseQuinticActionInOut:create()
cc.EaseCircleActionIn
cc.EaseCircleActionIn:new()
cc.EaseCircleActionIn:create()
cc.EaseCircleActionOut
cc.EaseCircleActionOut:new()
cc.EaseCircleActionOut:create()
cc.EaseCircleActionInOut
cc.EaseCircleActionInOut:new()
cc.EaseCircleActionInOut:create()
cc.EaseCubicActionIn
cc.EaseCubicActionIn:new()
cc.EaseCubicActionIn:create()
cc.EaseCubicActionOut
cc.EaseCubicActionOut:new()
cc.EaseCubicActionOut:create()
cc.EaseCubicActionInOut
cc.EaseCubicActionInOut:new()
cc.EaseCubicActionInOut:create()
cc.EaseIn
cc.EaseIn:new()
cc.EaseIn:create()
cc.EaseOut
cc.EaseOut:new()
cc.EaseOut:create()
cc.EaseInOut
cc.EaseInOut:new()
cc.EaseInOut:create()
cc.EaseElastic
cc.EaseElastic:setPeriod(float_fPeriod)
cc.EaseElastic:initWithAction(ActionInterval_action,float_period)
cc.EaseElastic:getPeriod()
cc.EaseElasticIn
cc.EaseElasticIn:new()
cc.EaseElasticIn:create()
cc.EaseElasticOut
cc.EaseElasticOut:new()
cc.EaseElasticOut:create()
cc.EaseElasticInOut
cc.EaseElasticInOut:new()
cc.EaseElasticInOut:create()
cc.EaseBezierAction
cc.EaseBezierAction:setBezierParamer(float_p0,float_p1,float_p2,float_p3)
cc.EaseBezierAction:create(cocos2d_ActionInterval_action)
cc.ActionInstant
cc.Show
cc.Show:create()
cc.Hide
cc.Hide:create()
cc.ToggleVisibility
cc.ToggleVisibility:create()
cc.RemoveSelf
cc.RemoveSelf:init(bool_isNeedCleanUp)
cc.RemoveSelf:create(bool_isNeedCleanUp)
cc.FlipX
cc.FlipX:initWithFlipX(bool_x)
cc.FlipX:create(bool_x)
cc.FlipY
cc.FlipY:initWithFlipY(bool_y)
cc.FlipY:create(bool_y)
cc.Place
cc.Place:initWithPosition(const_Vec2_pos)
cc.Place:create(const_Vec2_pos)
cc.CallFunc
cc.CallFunc:execute()
cc.CallFunc:getTargetCallback()
cc.CallFunc:setTargetCallback(Ref_sel)
cc.GridAction
cc.GridAction:getGrid()
cc.GridAction:initWithDuration(float_duration,const_Size_gridSize)
cc.Grid3DAction
cc.Grid3DAction:getGridRect()
cc.TiledGrid3DAction
cc.StopGrid
cc.StopGrid:create()
cc.ReuseGrid
cc.ReuseGrid:initWithTimes(int_times)
cc.ReuseGrid:create(int_times)
cc.Waves3D
cc.Waves3D:setAmplitudeRate(float_amplitudeRate)
cc.Waves3D:initWithDuration(float_duration,const_Size_gridSize,unsigned_int_waves,float_amplitude)
cc.Waves3D:getAmplitude()
cc.Waves3D:getAmplitudeRate()
cc.Waves3D:setAmplitude(float_amplitude)
cc.Waves3D:create(float_duration,const_Size_gridSize,unsigned_int_waves,float_amplitude)
cc.FlipX3D
cc.FlipX3D:initWithSize(const_Size_gridSize,float_duration)
cc.FlipX3D:initWithDuration(float_duration)
cc.FlipX3D:create(float_duration)
cc.FlipY3D
cc.FlipY3D:create(float_duration)
cc.Lens3D
cc.Lens3D:setConcave(bool_concave)
cc.Lens3D:initWithDuration(float_duration,const_Size_gridSize,const_Vec2_position,float_radius)
cc.Lens3D:setLensEffect(float_lensEffect)
cc.Lens3D:getLensEffect()
cc.Lens3D:setPosition(const_Vec2_position)
cc.Lens3D:getPosition()
cc.Lens3D:create(float_duration,const_Size_gridSize,const_Vec2_position,float_radius)
cc.Ripple3D
cc.Ripple3D:setAmplitudeRate(float_fAmplitudeRate)
cc.Ripple3D:initWithDuration(float_duration,const_Size_gridSize,const_Vec2_position,float_radius,unsigned_int_waves,float_amplitude)
cc.Ripple3D:getAmplitudeRate()
cc.Ripple3D:setAmplitude(float_fAmplitude)
cc.Ripple3D:getAmplitude()
cc.Ripple3D:setPosition(const_Vec2_position)
cc.Ripple3D:getPosition()
cc.Ripple3D:create(float_duration,const_Size_gridSize,const_Vec2_position,float_radius,unsigned_int_waves,float_amplitude)
cc.Shaky3D
cc.Shaky3D:initWithDuration(float_duration,const_Size_gridSize,int_range,bool_shakeZ)
cc.Shaky3D:create(float_initWithDuration,const_Size_gridSize,int_range,bool_shakeZ)
cc.Liquid
cc.Liquid:setAmplitudeRate(float_amplitudeRate)
cc.Liquid:initWithDuration(float_duration,const_Size_gridSize,unsigned_int_waves,float_amplitude)
cc.Liquid:getAmplitude()
cc.Liquid:getAmplitudeRate()
cc.Liquid:setAmplitude(float_amplitude)
cc.Liquid:create(float_duration,const_Size_gridSize,unsigned_int_waves,float_amplitude)
cc.Waves
cc.Waves:setAmplitudeRate(float_amplitudeRate)
cc.Waves:initWithDuration(float_duration,const_Size_gridSize,unsigned_int_waves,float_amplitude,bool_horizontal,bool_vertical)
cc.Waves:getAmplitude()
cc.Waves:getAmplitudeRate()
cc.Waves:setAmplitude(float_amplitude)
cc.Waves:create(float_duration,const_Size_gridSize,unsigned_int_waves,float_amplitude,bool_horizontal,bool_vertical)
cc.Twirl
cc.Twirl:setAmplitudeRate(float_amplitudeRate)
cc.Twirl:initWithDuration(float_duration,const_Size_gridSize,const_Vec2_position,unsigned_int_twirls,float_amplitude)
cc.Twirl:getAmplitudeRate()
cc.Twirl:setAmplitude(float_amplitude)
cc.Twirl:getAmplitude()
cc.Twirl:setPosition(const_Vec2_position)
cc.Twirl:getPosition()
cc.Twirl:create(float_duration,const_Size_gridSize,const_Vec2_position,unsigned_int_twirls,float_amplitude)
cc.ActionManager
cc.ActionManager:getActionByTag(int_tag,const_Node_target)
cc.ActionManager:removeActionByTag(int_tag,Node_target)
cc.ActionManager:removeActionsByFlags(unsigned_int_flags,Node_target)
cc.ActionManager:removeAllActions()
cc.ActionManager:addAction(Action_action,Node_target,bool_paused)
cc.ActionManager:resumeTarget(Node_target)
cc.ActionManager:getNumberOfRunningActions()
cc.ActionManager:pauseTarget(Node_target)
cc.ActionManager:getNumberOfRunningActionsInTarget(const_Node_target)
cc.ActionManager:removeAllActionsFromTarget(Node_target)
cc.ActionManager:resumeTargets()
cc.ActionManager:removeAction(Action_action)
cc.ActionManager:pauseAllRunningActions()
cc.ActionManager:update(float_dt)
cc.ActionManager:removeAllActionsByTag(int_tag,Node_target)
cc.ActionManager:getNumberOfRunningActionsInTargetByTag(const_Node_target,int_tag)
cc.PageTurn3D
cc.PageTurn3D:create(float_duration,const_Size_gridSize)
cc.ProgressTo
cc.ProgressTo:initWithDuration(float_duration,float_percent)
cc.ProgressTo:create(float_duration,float_percent)
cc.ProgressFromTo
cc.ProgressFromTo:initWithDuration(float_duration,float_fromPercentage,float_toPercentage)
cc.ProgressFromTo:create(float_duration,float_fromPercentage,float_toPercentage)
cc.ShakyTiles3D
cc.ShakyTiles3D:initWithDuration(float_duration,const_Size_gridSize,int_range,bool_shakeZ)
cc.ShakyTiles3D:create(float_duration,const_Size_gridSize,int_range,bool_shakeZ)
cc.ShatteredTiles3D
cc.ShatteredTiles3D:initWithDuration(float_duration,const_Size_gridSize,int_range,bool_shatterZ)
cc.ShatteredTiles3D:create(float_duration,const_Size_gridSize,int_range,bool_shatterZ)
cc.ShuffleTiles
cc.ShuffleTiles:initWithDuration(float_duration,const_Size_gridSize,unsigned_int_seed)
cc.ShuffleTiles:getDelta(const_Size_pos)
cc.ShuffleTiles:create(float_duration,const_Size_gridSize,unsigned_int_seed)
cc.FadeOutTRTiles
cc.FadeOutTRTiles:turnOnTile(const_Vec2_pos)
cc.FadeOutTRTiles:turnOffTile(const_Vec2_pos)
cc.FadeOutTRTiles:transformTile(const_Vec2_pos,float_distance)
cc.FadeOutTRTiles:testFunc(const_Size_pos,float_time)
cc.FadeOutTRTiles:create(float_duration,const_Size_gridSize)
cc.FadeOutBLTiles
cc.FadeOutBLTiles:create(float_duration,const_Size_gridSize)
cc.FadeOutUpTiles
cc.FadeOutUpTiles:create(float_duration,const_Size_gridSize)
cc.FadeOutDownTiles
cc.FadeOutDownTiles:create(float_duration,const_Size_gridSize)
cc.TurnOffTiles
cc.TurnOffTiles:turnOnTile(const_Vec2_pos)
cc.TurnOffTiles:turnOffTile(const_Vec2_pos)
cc.TurnOffTiles:initWithDuration(float_duration,const_Size_gridSize,unsigned_int_seed)
cc.TurnOffTiles:create(float_duration,const_Size_gridSize)
cc.TurnOffTiles:create(float_duration,const_Size_gridSize,unsigned_int_seed)
cc.WavesTiles3D
cc.WavesTiles3D:setAmplitudeRate(float_amplitudeRate)
cc.WavesTiles3D:initWithDuration(float_duration,const_Size_gridSize,unsigned_int_waves,float_amplitude)
cc.WavesTiles3D:getAmplitude()
cc.WavesTiles3D:getAmplitudeRate()
cc.WavesTiles3D:setAmplitude(float_amplitude)
cc.WavesTiles3D:create(float_duration,const_Size_gridSize,unsigned_int_waves,float_amplitude)
cc.JumpTiles3D
cc.JumpTiles3D:setAmplitudeRate(float_amplitudeRate)
cc.JumpTiles3D:initWithDuration(float_duration,const_Size_gridSize,unsigned_int_numberOfJumps,float_amplitude)
cc.JumpTiles3D:getAmplitude()
cc.JumpTiles3D:getAmplitudeRate()
cc.JumpTiles3D:setAmplitude(float_amplitude)
cc.JumpTiles3D:create(float_duration,const_Size_gridSize,unsigned_int_numberOfJumps,float_amplitude)
cc.SplitRows
cc.SplitRows:initWithDuration(float_duration,unsigned_int_rows)
cc.SplitRows:create(float_duration,unsigned_int_rows)
cc.SplitCols
cc.SplitCols:initWithDuration(float_duration,unsigned_int_cols)
cc.SplitCols:create(float_duration,unsigned_int_cols)
cc.ActionTween
cc.ActionTween:initWithDuration(float_duration,const_std_string_key,float_from,float_to)
cc.ActionTween:create(float_duration,const_std_string_key,float_from,float_to)
cc.AtlasNode
cc.AtlasNode:updateAtlasValues()
cc.AtlasNode:initWithTileFile(const_std_string_tile,int_tileWidth,int_tileHeight,int_itemsToRender)
cc.AtlasNode:getTexture()
cc.AtlasNode:setTextureAtlas(TextureAtlas_textureAtlas)
cc.AtlasNode:setBlendFunc(const_BlendFunc_blendFunc)
cc.AtlasNode:getTextureAtlas()
cc.AtlasNode:getBlendFunc()
cc.AtlasNode:getQuadsToDraw()
cc.AtlasNode:setTexture(Texture2D_texture)
cc.AtlasNode:initWithTexture(Texture2D_texture,int_tileWidth,int_tileHeight,int_itemsToRender)
cc.AtlasNode:setQuadsToDraw(ssize_t_quadsToDraw)
cc.AtlasNode:create(const_std_string_filename,int_tileWidth,int_tileHeight,int_itemsToRender)
cc.ClippingNode
cc.ClippingNode:hasContent()
cc.ClippingNode:setInverted(bool_inverted)
cc.ClippingNode:setStencil(Node_stencil)
cc.ClippingNode:getAlphaThreshold()
cc.ClippingNode:init()
cc.ClippingNode:init(Node_stencil)
cc.ClippingNode:getStencil()
cc.ClippingNode:setAlphaThreshold(GLfloat_alphaThreshold)
cc.ClippingNode:isInverted()
cc.ClippingNode:create()
cc.ClippingNode:create(Node_stencil)
cc.ClippingRectangleNode
cc.ClippingRectangleNode:isClippingEnabled()
cc.ClippingRectangleNode:setClippingEnabled(bool_enabled)
cc.ClippingRectangleNode:getClippingRegion()
cc.ClippingRectangleNode:setClippingRegion(const_Rect_clippingRegion)
cc.ClippingRectangleNode:create(const_Rect_clippingRegion)
cc.ClippingRectangleNode:create()
cc.DrawNode
cc.DrawNode:drawLine(const_Vec2_origin,const_Vec2_destination,const_Color4F_color)
cc.DrawNode:drawRect(const_Vec2_origin,const_Vec2_destination,const_Color4F_color)
cc.DrawNode:drawRect(const_Vec2_p1,const_Vec2_p2,const_Vec2_p3,const_Vec2_p4,const_Color4F_color)
cc.DrawNode:drawSolidCircle(const_Vec2_center,float_radius,float_angle,unsigned_int_segments,float_scaleX,float_scaleY,const_Color4F_color)
cc.DrawNode:drawSolidCircle(const_Vec2_center,float_radius,float_angle,unsigned_int_segments,const_Color4F_color)
cc.DrawNode:setLineWidth(GLfloat_lineWidth)
cc.DrawNode:onDrawGLPoint(const_Mat4_transform,uint32_t_flags)
cc.DrawNode:drawDot(const_Vec2_pos,float_radius,const_Color4F_color)
cc.DrawNode:drawSegment(const_Vec2_from,const_Vec2_to,float_radius,const_Color4F_color)
cc.DrawNode:getBlendFunc()
cc.DrawNode:onDraw(const_Mat4_transform,uint32_t_flags)
cc.DrawNode:drawCircle(const_Vec2_center,float_radius,float_angle,unsigned_int_segments,bool_drawLineToCenter,float_scaleX,float_scaleY,const_Color4F_color)
cc.DrawNode:drawCircle(const_Vec2_center,float_radius,float_angle,unsigned_int_segments,bool_drawLineToCenter,const_Color4F_color)
cc.DrawNode:drawQuadBezier(const_Vec2_origin,const_Vec2_control,const_Vec2_destination,unsigned_int_segments,const_Color4F_color)
cc.DrawNode:onDrawGLLine(const_Mat4_transform,uint32_t_flags)
cc.DrawNode:drawTriangle(const_Vec2_p1,const_Vec2_p2,const_Vec2_p3,const_Color4F_color)
cc.DrawNode:setBlendFunc(const_BlendFunc_blendFunc)
cc.DrawNode:clear()
cc.DrawNode:drawSolidRect(const_Vec2_origin,const_Vec2_destination,const_Color4F_color)
cc.DrawNode:getLineWidth()
cc.DrawNode:drawPoint(const_Vec2_point,const_float_pointSize,const_Color4F_color)
cc.DrawNode:drawCubicBezier(const_Vec2_origin,const_Vec2_control1,const_Vec2_control2,const_Vec2_destination,unsigned_int_segments,const_Color4F_color)
cc.DrawNode:create(GLfloat_defaultLineWidth)
cc.Label
cc.Label:isClipMarginEnabled()
cc.Label:enableShadow(const_Color4B_shadowColor,const_Size_offset,int_blurRadius)
cc.Label:setDimensions(float_width,float_height)
cc.Label:getWidth()
cc.Label:getString()
cc.Label:getHeight()
cc.Label:disableEffect()
cc.Label:disableEffect(LabelEffect_effect)
cc.Label:setTTFConfig(const_TTFConfig_ttfConfig)
cc.Label:getTextColor()
cc.Label:getBlendFunc()
cc.Label:enableWrap(bool_enable)
cc.Label:setWidth(float_width)
cc.Label:getAdditionalKerning()
cc.Label:getBMFontSize()
cc.Label:getMaxLineWidth()
cc.Label:getHorizontalAlignment()
cc.Label:getShadowOffset()
cc.Label:getLineSpacing()
cc.Label:setClipMarginEnabled(bool_clipEnabled)
cc.Label:setString(const_std_string_text)
cc.Label:setSystemFontName(const_std_string_font)
cc.Label:isWrapEnabled()
cc.Label:getOutlineSize()
cc.Label:setBMFontFilePath(const_std_string_bmfontFilePath,const_Vec2_imageOffset,float_fontSize)
cc.Label:initWithTTF(const_TTFConfig_ttfConfig,const_std_string_text,TextHAlignment_hAlignment,int_maxLineWidth)
cc.Label:getFontAtlas()
cc.Label:setLineHeight(float_height)
cc.Label:setSystemFontSize(float_fontSize)
cc.Label:setOverflow(Overflow_overflow)
cc.Label:enableStrikethrough()
cc.Label:updateContent()
cc.Label:getStringLength()
cc.Label:setLineBreakWithoutSpace(bool_breakWithoutSpace)
cc.Label:getStringNumLines()
cc.Label:enableOutline(const_Color4B_outlineColor,int_outlineSize)
cc.Label:getShadowBlurRadius()
cc.Label:getEffectColor()
cc.Label:removeAllChildrenWithCleanup(bool_cleanup)
cc.Label:setCharMap(const_std_string_charMapFile,int_itemWidth,int_itemHeight,int_startCharMap)
cc.Label:setCharMap(Texture2D_texture,int_itemWidth,int_itemHeight,int_startCharMap)
cc.Label:setCharMap(const_std_string_plistFile)
cc.Label:getDimensions()
cc.Label:setMaxLineWidth(float_maxLineWidth)
cc.Label:getSystemFontName()
cc.Label:setVerticalAlignment(TextVAlignment_vAlignment)
cc.Label:setLineSpacing(float_height)
cc.Label:getLineHeight()
cc.Label:getShadowColor()
cc.Label:getTTFConfig()
cc.Label:enableItalics()
cc.Label:setTextColor(const_Color4B_color)
cc.Label:getLetter(int_lettetIndex)
cc.Label:setHeight(float_height)
cc.Label:isShadowEnabled()
cc.Label:enableGlow(const_Color4B_glowColor)
cc.Label:getOverflow()
cc.Label:getVerticalAlignment()
cc.Label:setAdditionalKerning(float_space)
cc.Label:getSystemFontSize()
cc.Label:setBlendFunc(const_BlendFunc_blendFunc)
cc.Label:getTextAlignment()
cc.Label:getBMFontFilePath()
cc.Label:setHorizontalAlignment(TextHAlignment_hAlignment)
cc.Label:enableBold()
cc.Label:enableUnderline()
cc.Label:getLabelEffectType()
cc.Label:setAlignment(TextHAlignment_hAlignment)
cc.Label:setAlignment(TextHAlignment_hAlignment,TextVAlignment_vAlignment)
cc.Label:requestSystemFontRefresh()
cc.Label:setBMFontSize(float_fontSize)
cc.Label:create()
cc.Label:createWithCharMap(const_std_string_charMapFile,int_itemWidth,int_itemHeight,int_startCharMap)
cc.Label:createWithCharMap(Texture2D_texture,int_itemWidth,int_itemHeight,int_startCharMap)
cc.Label:createWithCharMap(const_std_string_plistFile)
cc.LabelAtlas
cc.LabelAtlas:setString(const_std_string_label)
cc.LabelAtlas:initWithString(const_std_string_string,const_std_string_charMapFile,int_itemWidth,int_itemHeight,int_startCharMap)
cc.LabelAtlas:initWithString(const_std_string_string,const_std_string_fntFile)
cc.LabelAtlas:initWithString(const_std_string_string,Texture2D_texture,int_itemWidth,int_itemHeight,int_startCharMap)
cc.LabelAtlas:getString()
cc.Layer
cc.Layer:create()
cc.LayerColor
cc.LayerColor:changeWidthAndHeight(GLfloat_w,GLfloat_h)
cc.LayerColor:getBlendFunc()
cc.LayerColor:setBlendFunc(const_BlendFunc_blendFunc)
cc.LayerColor:changeWidth(GLfloat_w)
cc.LayerColor:initWithColor(const_Color4B_color,GLfloat_width,GLfloat_height)
cc.LayerColor:changeHeight(GLfloat_h)
cc.LayerColor:create()
cc.LayerColor:create(const_Color4B_color,GLfloat_width,GLfloat_height)
cc.LayerColor:create(const_Color4B_color)
cc.LayerGradient
cc.LayerGradient:getStartColor()
cc.LayerGradient:isCompressedInterpolation()
cc.LayerGradient:getStartOpacity()
cc.LayerGradient:setVector(const_Vec2_alongVector)
cc.LayerGradient:setStartOpacity(GLubyte_startOpacity)
cc.LayerGradient:setCompressedInterpolation(bool_compressedInterpolation)
cc.LayerGradient:setEndOpacity(GLubyte_endOpacity)
cc.LayerGradient:getVector()
cc.LayerGradient:setEndColor(const_Color3B_endColor)
cc.LayerGradient:initWithColor(const_Color4B_start,const_Color4B_end)
cc.LayerGradient:initWithColor(const_Color4B_start,const_Color4B_end,const_Vec2_v)
cc.LayerGradient:getEndColor()
cc.LayerGradient:getEndOpacity()
cc.LayerGradient:setStartColor(const_Color3B_startColor)
cc.LayerGradient:create()
cc.LayerGradient:create(const_Color4B_start,const_Color4B_end)
cc.LayerGradient:create(const_Color4B_start,const_Color4B_end,const_Vec2_v)
cc.LayerRadialGradient
cc.LayerRadialGradient:getStartColor()
cc.LayerRadialGradient:getBlendFunc()
cc.LayerRadialGradient:getStartColor3B()
cc.LayerRadialGradient:getStartOpacity()
cc.LayerRadialGradient:setCenter(const_Vec2_center)
cc.LayerRadialGradient:getEndColor()
cc.LayerRadialGradient:setStartOpacity(GLubyte_opacity)
cc.LayerRadialGradient:getCenter()
cc.LayerRadialGradient:setEndOpacity(GLubyte_opacity)
cc.LayerRadialGradient:setExpand(float_expand)
cc.LayerRadialGradient:getEndOpacity()
cc.LayerRadialGradient:initWithColor(const_Color4B_startColor,const_Color4B_endColor,float_radius,const_Vec2_center,float_expand)
cc.LayerRadialGradient:setEndColor(const_Color3B_color)
cc.LayerRadialGradient:getEndColor3B()
cc.LayerRadialGradient:setRadius(float_radius)
cc.LayerRadialGradient:setStartColor(const_Color3B_color)
cc.LayerRadialGradient:getExpand()
cc.LayerRadialGradient:setBlendFunc(const_BlendFunc_blendFunc)
cc.LayerRadialGradient:getRadius()
cc.LayerRadialGradient:create(const_Color4B_startColor,const_Color4B_endColor,float_radius,const_Vec2_center,float_expand)
cc.LayerMultiplex
cc.LayerMultiplex:initWithArray()
cc.LayerMultiplex:switchToAndReleaseMe(int_n)
cc.LayerMultiplex:addLayer(Layer_layer)
cc.LayerMultiplex:switchTo(int_n)
cc.LayerMultiplex:switchTo(int_n,bool_cleanup)
cc.MenuItem
cc.MenuItem:setEnabled(bool_value)
cc.MenuItem:activate()
cc.MenuItem:isEnabled()
cc.MenuItem:selected()
cc.MenuItem:isSelected()
cc.MenuItem:unselected()
cc.MenuItem:rect()
cc.MenuItemLabel
cc.MenuItemLabel:setLabel(Node_node)
cc.MenuItemLabel:getString()
cc.MenuItemLabel:getDisabledColor()
cc.MenuItemLabel:setString(const_std_string_label)
cc.MenuItemLabel:initWithLabel(Node_label,const_ccMenuCallback_callback)
cc.MenuItemLabel:initWithLabel(Node_label,Ref_target,SEL_MenuHandler_selector)
cc.MenuItemLabel:setDisabledColor(const_Color3B_color)
cc.MenuItemLabel:getLabel()
cc.MenuItemAtlasFont
cc.MenuItemAtlasFont:initWithString(const_std_string_value,const_std_string_charMapFile,int_itemWidth,int_itemHeight,char_startCharMap,Ref_target,SEL_MenuHandler_selector)
cc.MenuItemAtlasFont:initWithString(const_std_string_value,const_std_string_charMapFile,int_itemWidth,int_itemHeight,char_startCharMap,const_ccMenuCallback_callback)
cc.MenuItemFont
cc.MenuItemFont:getFontNameObj()
cc.MenuItemFont:setFontNameObj(const_std_string_name)
cc.MenuItemFont:initWithString(const_std_string_value,Ref_target,SEL_MenuHandler_selector)
cc.MenuItemFont:initWithString(const_std_string_value,const_ccMenuCallback_callback)
cc.MenuItemFont:getFontSizeObj()
cc.MenuItemFont:setFontSizeObj(int_size)
cc.MenuItemFont:setFontName(const_std_string_name)
cc.MenuItemFont:getFontSize()
cc.MenuItemFont:getFontName()
cc.MenuItemFont:setFontSize(int_size)
cc.MenuItemSprite
cc.MenuItemSprite:setEnabled(bool_bEnabled)
cc.MenuItemSprite:selected()
cc.MenuItemSprite:setNormalImage(Node_image)
cc.MenuItemSprite:setDisabledImage(Node_image)
cc.MenuItemSprite:initWithNormalSprite(Node_normalSprite,Node_selectedSprite,Node_disabledSprite,Ref_target,SEL_MenuHandler_selector)
cc.MenuItemSprite:initWithNormalSprite(Node_normalSprite,Node_selectedSprite,Node_disabledSprite,const_ccMenuCallback_callback)
cc.MenuItemSprite:setSelectedImage(Node_image)
cc.MenuItemSprite:getDisabledImage()
cc.MenuItemSprite:getSelectedImage()
cc.MenuItemSprite:getNormalImage()
cc.MenuItemSprite:unselected()
cc.MenuItemImage
cc.MenuItemImage:setDisabledSpriteFrame(SpriteFrame_frame)
cc.MenuItemImage:setSelectedSpriteFrame(SpriteFrame_frame)
cc.MenuItemImage:setNormalSpriteFrame(SpriteFrame_frame)
cc.MenuItemImage:init()
cc.MenuItemImage:initWithNormalImage(const_std_string_normalImage,const_std_string_selectedImage,const_std_string_disabledImage,Ref_target,SEL_MenuHandler_selector)
cc.MenuItemImage:initWithNormalImage(const_std_string_normalImage,const_std_string_selectedImage,const_std_string_disabledImage,const_ccMenuCallback_callback)
cc.MenuItemToggle
cc.MenuItemToggle:setSubItems()
cc.MenuItemToggle:initWithItem(MenuItem_item)
cc.MenuItemToggle:getSelectedIndex()
cc.MenuItemToggle:addSubItem(MenuItem_item)
cc.MenuItemToggle:getSelectedItem()
cc.MenuItemToggle:setSelectedIndex(unsigned_int_index)
cc.Menu
cc.Menu:initWithArray()
cc.Menu:setEnabled(bool_value)
cc.Menu:alignItemsVertically()
cc.Menu:isEnabled()
cc.Menu:alignItemsHorizontallyWithPadding(float_padding)
cc.Menu:alignItemsVerticallyWithPadding(float_padding)
cc.Menu:alignItemsHorizontally()
cc.MotionStreak
cc.MotionStreak:reset()
cc.MotionStreak:setTexture(Texture2D_texture)
cc.MotionStreak:getTexture()
cc.MotionStreak:tintWithColor(const_Color3B_colors)
cc.MotionStreak:setBlendFunc(const_BlendFunc_blendFunc)
cc.MotionStreak:setStartingPositionInitialized(bool_bStartingPositionInitialized)
cc.MotionStreak:getBlendFunc()
cc.MotionStreak:isStartingPositionInitialized()
cc.MotionStreak:isFastMode()
cc.MotionStreak:getStroke()
cc.MotionStreak:initWithFade(float_fade,float_minSeg,float_stroke,const_Color3B_color,const_std_string_path)
cc.MotionStreak:initWithFade(float_fade,float_minSeg,float_stroke,const_Color3B_color,Texture2D_texture)
cc.MotionStreak:setFastMode(bool_bFastMode)
cc.MotionStreak:setStroke(float_stroke)
cc.MotionStreak:create(float_timeToFade,float_minSeg,float_strokeWidth,const_Color3B_strokeColor,const_std_string_imagePath)
cc.MotionStreak:create(float_timeToFade,float_minSeg,float_strokeWidth,const_Color3B_strokeColor,Texture2D_texture)
cc.NodeGrid
cc.NodeGrid:setGridRect(const_Rect_gridRect)
cc.NodeGrid:setTarget(Node_target)
cc.NodeGrid:setGrid(GridBase_grid)
cc.NodeGrid:getGrid()
cc.NodeGrid:getGridRect()
cc.NodeGrid:create()
cc.ParticleBatchNode
cc.ParticleBatchNode:setTexture(Texture2D_texture)
cc.ParticleBatchNode:initWithTexture(Texture2D_tex,int_capacity)
cc.ParticleBatchNode:disableParticle(int_particleIndex)
cc.ParticleBatchNode:getTexture()
cc.ParticleBatchNode:setTextureAtlas(TextureAtlas_atlas)
cc.ParticleBatchNode:initWithFile(const_std_string_fileImage,int_capacity)
cc.ParticleBatchNode:setBlendFunc(const_BlendFunc_blendFunc)
cc.ParticleBatchNode:removeAllChildrenWithCleanup(bool_doCleanup)
cc.ParticleBatchNode:getTextureAtlas()
cc.ParticleBatchNode:getBlendFunc()
cc.ParticleBatchNode:insertChild(ParticleSystem_system,int_index)
cc.ParticleBatchNode:removeChildAtIndex(int_index,bool_doCleanup)
cc.ParticleBatchNode:create(const_std_string_fileImage,int_capacity)
cc.ParticleBatchNode:createWithTexture(Texture2D_tex,int_capacity)
cc.ParticleData
cc.ParticleData:release()
cc.ParticleData:getMaxCount()
cc.ParticleData:init(int_count)
cc.ParticleData:copyParticle(int_p1,int_p2)
cc.ParticleSystem
cc.ParticleSystem:getStartSizeVar()
cc.ParticleSystem:getTexture()
cc.ParticleSystem:isFull()
cc.ParticleSystem:getBatchNode()
cc.ParticleSystem:getStartColor()
cc.ParticleSystem:getPositionType()
cc.ParticleSystem:setPosVar(const_Vec2_pos)
cc.ParticleSystem:getEndSpin()
cc.ParticleSystem:setRotatePerSecondVar(float_degrees)
cc.ParticleSystem:setSourcePositionCompatible(bool_sourcePositionCompatible)
cc.ParticleSystem:getStartSpinVar()
cc.ParticleSystem:getRadialAccelVar()
cc.ParticleSystem:getEndSizeVar()
cc.ParticleSystem:setTangentialAccel(float_t)
cc.ParticleSystem:getRadialAccel()
cc.ParticleSystem:setStartRadius(float_startRadius)
cc.ParticleSystem:setRotatePerSecond(float_degrees)
cc.ParticleSystem:setEndSize(float_endSize)
cc.ParticleSystem:getGravity()
cc.ParticleSystem:resumeEmissions()
cc.ParticleSystem:getTangentialAccel()
cc.ParticleSystem:setEndRadius(float_endRadius)
cc.ParticleSystem:getSpeed()
cc.ParticleSystem:pauseEmissions()
cc.ParticleSystem:getAngle()
cc.ParticleSystem:setEndColor(const_Color4F_color)
cc.ParticleSystem:setStartSpin(float_spin)
cc.ParticleSystem:setDuration(float_duration)
cc.ParticleSystem:initWithTotalParticles(int_numberOfParticles)
cc.ParticleSystem:addParticles(int_count)
cc.ParticleSystem:setTexture(Texture2D_texture)
cc.ParticleSystem:getPosVar()
cc.ParticleSystem:updateWithNoTime()
cc.ParticleSystem:isBlendAdditive()
cc.ParticleSystem:getSpeedVar()
cc.ParticleSystem:setPositionType(PositionType_type)
cc.ParticleSystem:stopSystem()
cc.ParticleSystem:getSourcePosition()
cc.ParticleSystem:setLifeVar(float_lifeVar)
cc.ParticleSystem:setTotalParticles(int_totalParticles)
cc.ParticleSystem:setEndColorVar(const_Color4F_color)
cc.ParticleSystem:getAtlasIndex()
cc.ParticleSystem:getStartSize()
cc.ParticleSystem:setStartSpinVar(float_pinVar)
cc.ParticleSystem:resetSystem()
cc.ParticleSystem:setAtlasIndex(int_index)
cc.ParticleSystem:setTangentialAccelVar(float_t)
cc.ParticleSystem:setEndRadiusVar(float_endRadiusVar)
cc.ParticleSystem:getEndRadius()
cc.ParticleSystem:isActive()
cc.ParticleSystem:setRadialAccelVar(float_t)
cc.ParticleSystem:setStartSize(float_startSize)
cc.ParticleSystem:setSpeed(float_speed)
cc.ParticleSystem:getStartSpin()
cc.ParticleSystem:getResourceFile()
cc.ParticleSystem:getRotatePerSecond()
cc.ParticleSystem:setEmitterMode(Mode_mode)
cc.ParticleSystem:getDuration()
cc.ParticleSystem:setSourcePosition(const_Vec2_pos)
cc.ParticleSystem:stop()
cc.ParticleSystem:updateParticleQuads()
cc.ParticleSystem:getEndSpinVar()
cc.ParticleSystem:setBlendAdditive(bool_value)
cc.ParticleSystem:setLife(float_life)
cc.ParticleSystem:setAngleVar(float_angleVar)
cc.ParticleSystem:setRotationIsDir(bool_t)
cc.ParticleSystem:start()
cc.ParticleSystem:setEndSizeVar(float_sizeVar)
cc.ParticleSystem:setAngle(float_angle)
cc.ParticleSystem:setBatchNode(ParticleBatchNode_batchNode)
cc.ParticleSystem:getTangentialAccelVar()
cc.ParticleSystem:getEmitterMode()
cc.ParticleSystem:setEndSpinVar(float_endSpinVar)
cc.ParticleSystem:initWithFile(const_std_string_plistFile)
cc.ParticleSystem:getAngleVar()
cc.ParticleSystem:setStartColor(const_Color4F_color)
cc.ParticleSystem:getRotatePerSecondVar()
cc.ParticleSystem:getEndSize()
cc.ParticleSystem:getLife()
cc.ParticleSystem:isPaused()
cc.ParticleSystem:setSpeedVar(float_speed)
cc.ParticleSystem:setAutoRemoveOnFinish(bool_var)
cc.ParticleSystem:setGravity(const_Vec2_g)
cc.ParticleSystem:postStep()
cc.ParticleSystem:setEmissionRate(float_rate)
cc.ParticleSystem:getEndColorVar()
cc.ParticleSystem:getRotationIsDir()
cc.ParticleSystem:getEmissionRate()
cc.ParticleSystem:getEndColor()
cc.ParticleSystem:getLifeVar()
cc.ParticleSystem:setStartSizeVar(float_sizeVar)
cc.ParticleSystem:getStartRadius()
cc.ParticleSystem:getParticleCount()
cc.ParticleSystem:getStartRadiusVar()
cc.ParticleSystem:setStartColorVar(const_Color4F_color)
cc.ParticleSystem:setEndSpin(float_endSpin)
cc.ParticleSystem:setRadialAccel(float_t)
cc.ParticleSystem:initWithDictionary(ValueMap_dictionary)
cc.ParticleSystem:initWithDictionary(ValueMap_dictionary,const_std_string_dirname)
cc.ParticleSystem:isAutoRemoveOnFinish()
cc.ParticleSystem:isSourcePositionCompatible()
cc.ParticleSystem:getTotalParticles()
cc.ParticleSystem:setStartRadiusVar(float_startRadiusVar)
cc.ParticleSystem:setBlendFunc(const_BlendFunc_blendFunc)
cc.ParticleSystem:getEndRadiusVar()
cc.ParticleSystem:getStartColorVar()
cc.ParticleSystem:create(const_std_string_plistFile)
cc.ParticleSystem:createWithTotalParticles(int_numberOfParticles)
cc.ParticleSystem:getAllParticleSystems()
cc.ParticleSystemQuad
cc.ParticleSystemQuad:setDisplayFrame(SpriteFrame_spriteFrame)
cc.ParticleSystemQuad:setTextureWithRect(Texture2D_texture,const_Rect_rect)
cc.ParticleSystemQuad:listenRendererRecreated(EventCustom_event)
cc.ParticleSystemQuad:create()
cc.ParticleSystemQuad:create(const_std_string_filename)
cc.ParticleSystemQuad:create(ValueMap_dictionary)
cc.ParticleSystemQuad:createWithTotalParticles(int_numberOfParticles)
cc.ParticleFire
cc.ParticleFire:create()
cc.ParticleFire:createWithTotalParticles(int_numberOfParticles)
cc.ParticleFireworks
cc.ParticleFireworks:init()
cc.ParticleFireworks:create()
cc.ParticleFireworks:createWithTotalParticles(int_numberOfParticles)
cc.ParticleSun
cc.ParticleSun:init()
cc.ParticleSun:create()
cc.ParticleSun:createWithTotalParticles(int_numberOfParticles)
cc.ParticleGalaxy
cc.ParticleGalaxy:init()
cc.ParticleGalaxy:create()
cc.ParticleGalaxy:createWithTotalParticles(int_numberOfParticles)
cc.ParticleFlower
cc.ParticleFlower:init()
cc.ParticleFlower:create()
cc.ParticleFlower:createWithTotalParticles(int_numberOfParticles)
cc.ParticleMeteor
cc.ParticleMeteor:init()
cc.ParticleMeteor:create()
cc.ParticleMeteor:createWithTotalParticles(int_numberOfParticles)
cc.ParticleSpiral
cc.ParticleSpiral:init()
cc.ParticleSpiral:create()
cc.ParticleSpiral:createWithTotalParticles(int_numberOfParticles)
cc.ParticleExplosion
cc.ParticleExplosion:init()
cc.ParticleExplosion:create()
cc.ParticleExplosion:createWithTotalParticles(int_numberOfParticles)
cc.ParticleSmoke
cc.ParticleSmoke:init()
cc.ParticleSmoke:create()
cc.ParticleSmoke:createWithTotalParticles(int_numberOfParticles)
cc.ParticleSnow
cc.ParticleSnow:init()
cc.ParticleSnow:create()
cc.ParticleSnow:createWithTotalParticles(int_numberOfParticles)
cc.ParticleRain
cc.ParticleRain:init()
cc.ParticleRain:create()
cc.ParticleRain:createWithTotalParticles(int_numberOfParticles)
cc.ProgressTimer
cc.ProgressTimer:initWithSprite(Sprite_sp)
cc.ProgressTimer:isReverseDirection()
cc.ProgressTimer:setBarChangeRate(const_Vec2_barChangeRate)
cc.ProgressTimer:getPercentage()
cc.ProgressTimer:setSprite(Sprite_sprite)
cc.ProgressTimer:getType()
cc.ProgressTimer:getSprite()
cc.ProgressTimer:setMidpoint(const_Vec2_point)
cc.ProgressTimer:getBarChangeRate()
cc.ProgressTimer:setReverseDirection(bool_value)
cc.ProgressTimer:getMidpoint()
cc.ProgressTimer:setPercentage(float_percentage)
cc.ProgressTimer:setType(Type_type)
cc.ProgressTimer:create(Sprite_sp)
cc.ProtectedNode
cc.ProtectedNode:addProtectedChild(Node__child)
cc.ProtectedNode:addProtectedChild(Node__child,int_localZOrder)
cc.ProtectedNode:addProtectedChild(Node_child,int_localZOrder,int_tag)
cc.ProtectedNode:disableCascadeColor()
cc.ProtectedNode:removeProtectedChildByTag(int_tag,bool_cleanup)
cc.ProtectedNode:reorderProtectedChild(Node__child,int_localZOrder)
cc.ProtectedNode:removeAllProtectedChildrenWithCleanup(bool_cleanup)
cc.ProtectedNode:disableCascadeOpacity()
cc.ProtectedNode:sortAllProtectedChildren()
cc.ProtectedNode:getProtectedChildByTag(int_tag)
cc.ProtectedNode:removeProtectedChild(Node_child,bool_cleanup)
cc.ProtectedNode:removeAllProtectedChildren()
cc.ProtectedNode:create()
cc.Sprite
cc.Sprite:setSpriteFrame(const_std_string_spriteFrameName)
cc.Sprite:setTexture(const_std_string_filename)
cc.Sprite:setTexture(Texture2D_texture)
cc.Sprite:getTexture()
cc.Sprite:setFlippedY(bool_flippedY)
cc.Sprite:setFlippedX(bool_flippedX)
cc.Sprite:getResourceType()
cc.Sprite:setDisplayFrameWithAnimationName(const_std_string_animationName,ssize_t_frameIndex)
cc.Sprite:getBatchNode()
cc.Sprite:getOffsetPosition()
cc.Sprite:getCenterRect()
cc.Sprite:removeAllChildrenWithCleanup(bool_cleanup)
cc.Sprite:setCenterRectNormalized(const_Rect_rect)
cc.Sprite:isStretchEnabled()
cc.Sprite:setTextureRect(const_Rect_rect)
cc.Sprite:setTextureRect(const_Rect_rect,bool_rotated,const_Size_untrimmedSize)
cc.Sprite:initWithSpriteFrameName(const_std_string_spriteFrameName)
cc.Sprite:setStretchEnabled(bool_enabled)
cc.Sprite:isFrameDisplayed(SpriteFrame_frame)
cc.Sprite:getAtlasIndex()
cc.Sprite:setBatchNode(SpriteBatchNode_spriteBatchNode)
cc.Sprite:getBlendFunc()
cc.Sprite:setCenterRect(const_Rect_rect)
cc.Sprite:setTextureAtlas(TextureAtlas_textureAtlas)
cc.Sprite:getSpriteFrame()
cc.Sprite:getResourceName()
cc.Sprite:isDirty()
cc.Sprite:getCenterRectNormalized()
cc.Sprite:setAtlasIndex(ssize_t_atlasIndex)
cc.Sprite:initWithTexture(Texture2D_texture)
cc.Sprite:initWithTexture(Texture2D_texture,const_Rect_rect)
cc.Sprite:initWithTexture(Texture2D_texture,const_Rect_rect,bool_rotated)
cc.Sprite:setDirty(bool_dirty)
cc.Sprite:isTextureRectRotated()
cc.Sprite:getTextureRect()
cc.Sprite:initWithFile(const_std_string_filename)
cc.Sprite:initWithFile(const_std_string_filename,const_Rect_rect)
cc.Sprite:setBlendFunc(const_BlendFunc_blendFunc)
cc.Sprite:getTextureAtlas()
cc.Sprite:initWithSpriteFrame(SpriteFrame_spriteFrame)
cc.Sprite:isFlippedX()
cc.Sprite:isFlippedY()
cc.Sprite:setVertexRect(const_Rect_rect)
cc.Sprite:createWithTexture(Texture2D_texture)
cc.Sprite:createWithTexture(Texture2D_texture,const_Rect_rect,bool_rotated)
cc.Sprite:createWithSpriteFrameName(const_std_string_spriteFrameName)
cc.Sprite:createWithSpriteFrame(SpriteFrame_spriteFrame)
cc.RenderTexture
cc.RenderTexture:setVirtualViewport(const_Vec2_rtBegin,const_Rect_fullRect,const_Rect_fullViewport)
cc.RenderTexture:clearStencil(int_stencilValue)
cc.RenderTexture:getClearDepth()
cc.RenderTexture:getClearStencil()
cc.RenderTexture:setClearStencil(int_clearStencil)
cc.RenderTexture:setSprite(Sprite_sprite)
cc.RenderTexture:getSprite()
cc.RenderTexture:isAutoDraw()
cc.RenderTexture:setKeepMatrix(bool_keepMatrix)
cc.RenderTexture:setClearFlags(unsigned_int_clearFlags)
cc.RenderTexture:begin()
cc.RenderTexture:saveToFile(const_std_string_filename,bool_isRGBA)
cc.RenderTexture:saveToFile(const_std_string_filename,Image_Format_format,bool_isRGBA)
cc.RenderTexture:setAutoDraw(bool_isAutoDraw)
cc.RenderTexture:setClearColor(const_Color4F_clearColor)
cc.RenderTexture:beginWithClear(float_r,float_g,float_b,float_a)
cc.RenderTexture:beginWithClear(float_r,float_g,float_b,float_a,float_depthValue)
cc.RenderTexture:beginWithClear(float_r,float_g,float_b,float_a,float_depthValue,int_stencilValue)
cc.RenderTexture:beginWithClear(float_r,float_g,float_b,float_a,float_depthValue,int_stencilValue,GLbitfield_flags)
cc.RenderTexture:clearDepth(float_depthValue)
cc.RenderTexture:getClearColor()
cc.RenderTexture:clear(float_r,float_g,float_b,float_a)
cc.RenderTexture:getClearFlags()
cc.RenderTexture:newImage(bool_flipImage)
cc.RenderTexture:setClearDepth(float_clearDepth)
cc.RenderTexture:initWithWidthAndHeight(int_w,int_h,Texture2D_PixelFormat_format)
cc.RenderTexture:initWithWidthAndHeight(int_w,int_h,Texture2D_PixelFormat_format,GLuint_depthStencilFormat)
cc.RenderTexture:create(int_w,int_h,Texture2D_PixelFormat_format,GLuint_depthStencilFormat)
cc.RenderTexture:create(int_w,int_h,Texture2D_PixelFormat_format)
cc.RenderTexture:create(int_w,int_h)
cc.TransitionEaseScene
cc.TransitionEaseScene:easeActionWithAction(ActionInterval__action)
cc.TransitionScene
cc.TransitionScene:getInScene()
cc.TransitionScene:finish()
cc.TransitionScene:initWithDuration(float_t,Scene_scene)
cc.TransitionScene:getDuration()
cc.TransitionScene:hideOutShowIn()
cc.TransitionScene:create(float_t,Scene_scene)
cc.TransitionSceneOriented
cc.TransitionSceneOriented:initWithDuration(float_t,Scene_scene,Orientation_orientation)
cc.TransitionSceneOriented:create(float_t,Scene_scene,Orientation_orientation)
cc.TransitionRotoZoom
cc.TransitionRotoZoom:create(float_t,Scene_scene)
cc.TransitionJumpZoom
cc.TransitionJumpZoom:create(float_t,Scene_scene)
cc.TransitionMoveInL
cc.TransitionMoveInL:action()
cc.TransitionMoveInL:easeActionWithAction(ActionInterval__action)
cc.TransitionMoveInL:create(float_t,Scene_scene)
cc.TransitionMoveInR
cc.TransitionMoveInR:create(float_t,Scene_scene)
cc.TransitionMoveInT
cc.TransitionMoveInT:create(float_t,Scene_scene)
cc.TransitionMoveInB
cc.TransitionMoveInB:create(float_t,Scene_scene)
cc.TransitionSlideInL
cc.TransitionSlideInL:action()
cc.TransitionSlideInL:easeActionWithAction(ActionInterval__action)
cc.TransitionSlideInL:create(float_t,Scene_scene)
cc.TransitionSlideInR
cc.TransitionSlideInR:create(float_t,Scene_scene)
cc.TransitionSlideInB
cc.TransitionSlideInB:create(float_t,Scene_scene)
cc.TransitionSlideInT
cc.TransitionSlideInT:create(float_t,Scene_scene)
cc.TransitionShrinkGrow
cc.TransitionShrinkGrow:easeActionWithAction(ActionInterval__action)
cc.TransitionShrinkGrow:create(float_t,Scene_scene)
cc.TransitionFlipX
cc.TransitionFlipX:create(float_t,Scene_s,Orientation_o)
cc.TransitionFlipX:create(float_t,Scene_s)
cc.TransitionFlipY
cc.TransitionFlipY:create(float_t,Scene_s,Orientation_o)
cc.TransitionFlipY:create(float_t,Scene_s)
cc.TransitionFlipAngular
cc.TransitionFlipAngular:create(float_t,Scene_s,Orientation_o)
cc.TransitionFlipAngular:create(float_t,Scene_s)
cc.TransitionZoomFlipX
cc.TransitionZoomFlipX:create(float_t,Scene_s,Orientation_o)
cc.TransitionZoomFlipX:create(float_t,Scene_s)
cc.TransitionZoomFlipY
cc.TransitionZoomFlipY:create(float_t,Scene_s,Orientation_o)
cc.TransitionZoomFlipY:create(float_t,Scene_s)
cc.TransitionZoomFlipAngular
cc.TransitionZoomFlipAngular:create(float_t,Scene_s,Orientation_o)
cc.TransitionZoomFlipAngular:create(float_t,Scene_s)
cc.TransitionFade
cc.TransitionFade:initWithDuration(float_t,Scenescene,const_Color3B_color)
cc.TransitionFade:create(float_duration,Scene_scene,const_Color3B_color)
cc.TransitionFade:create(float_duration,Scene_scene)
cc.TransitionCrossFade
cc.TransitionCrossFade:create(float_t,Scene_scene)
cc.TransitionTurnOffTiles
cc.TransitionTurnOffTiles:easeActionWithAction(ActionInterval__action)
cc.TransitionTurnOffTiles:create(float_t,Scene_scene)
cc.TransitionSplitCols
cc.TransitionSplitCols:action()
cc.TransitionSplitCols:easeActionWithAction(ActionInterval__action)
cc.TransitionSplitCols:create(float_t,Scene_scene)
cc.TransitionSplitRows
cc.TransitionSplitRows:create(float_t,Scene_scene)
cc.TransitionFadeTR
cc.TransitionFadeTR:easeActionWithAction(ActionInterval__action)
cc.TransitionFadeTR:actionWithSize(const_Size_size)
cc.TransitionFadeTR:create(float_t,Scene_scene)
cc.TransitionFadeBL
cc.TransitionFadeBL:create(float_t,Scene_scene)
cc.TransitionFadeUp
cc.TransitionFadeUp:create(float_t,Scene_scene)
cc.TransitionFadeDown
cc.TransitionFadeDown:create(float_t,Scene_scene)
cc.TransitionPageTurn
cc.TransitionPageTurn:actionWithSize(const_Size_vector)
cc.TransitionPageTurn:initWithDuration(float_t,Scene_scene,bool_backwards)
cc.TransitionPageTurn:create(float_t,Scene_scene,bool_backwards)
cc.TransitionProgress
cc.TransitionProgress:create(float_t,Scene_scene)
cc.TransitionProgressRadialCCW
cc.TransitionProgressRadialCCW:create(float_t,Scene_scene)
cc.TransitionProgressRadialCW
cc.TransitionProgressRadialCW:create(float_t,Scene_scene)
cc.TransitionProgressHorizontal
cc.TransitionProgressHorizontal:create(float_t,Scene_scene)
cc.TransitionProgressVertical
cc.TransitionProgressVertical:create(float_t,Scene_scene)
cc.TransitionProgressInOut
cc.TransitionProgressInOut:create(float_t,Scene_scene)
cc.TransitionProgressOutIn
cc.TransitionProgressOutIn:create(float_t,Scene_scene)
cc.Camera
cc.Camera:restore()
cc.Camera:getDepth()
cc.Camera:getViewProjectionMatrix()
cc.Camera:applyViewport()
cc.Camera:setBackgroundBrush(CameraBackgroundBrush_clearBrush)
cc.Camera:lookAt(const_Vec3_target,const_Vec3_up)
cc.Camera:apply()
cc.Camera:getBackgroundBrush()
cc.Camera:getProjectionMatrix()
cc.Camera:isBrushValid()
cc.Camera:getDepthInView(const_Mat4_transform)
cc.Camera:restoreViewport()
cc.Camera:clearBackground()
cc.Camera:setAdditionalProjection(const_Mat4_mat)
cc.Camera:setViewport(const_experimental_Viewport_vp)
cc.Camera:initDefault()
cc.Camera:getCameraFlag()
cc.Camera:getType()
cc.Camera:initOrthographic(float_zoomX,float_zoomY,float_nearPlane,float_farPlane)
cc.Camera:getRenderOrder()
cc.Camera:isVisibleInFrustum(const_AABB_aabb)
cc.Camera:setDepth(int8_t_depth)
cc.Camera:setScene(Scene_scene)
cc.Camera:projectGL(const_Vec3_src)
cc.Camera:restoreFrameBufferObject()
cc.Camera:getViewMatrix()
cc.Camera:getNearPlane()
cc.Camera:project(const_Vec3_src)
cc.Camera:setCameraFlag(CameraFlag_flag)
cc.Camera:getFarPlane()
cc.Camera:applyFrameBufferObject()
cc.Camera:setFrameBufferObject(experimental_FrameBuffer_fbo)
cc.Camera:isViewProjectionUpdated()
cc.Camera:initPerspective(float_fieldOfView,float_aspectRatio,float_nearPlane,float_farPlane)
cc.Camera:createOrthographic(float_zoomX,float_zoomY,float_nearPlane,float_farPlane)
cc.Camera:getVisitingCamera()
cc.Camera:create()
cc.Camera:createPerspective(float_fieldOfView,float_aspectRatio,float_nearPlane,float_farPlane)
cc.Camera:getDefaultViewport()
cc.Camera:setDefaultViewport(const_experimental_Viewport_vp)
cc.Camera:getDefaultCamera()
cc.CameraBackgroundBrush
cc.CameraBackgroundBrush:getBrushType()
cc.CameraBackgroundBrush:drawBackground(Camera_camera)
cc.CameraBackgroundBrush:init()
cc.CameraBackgroundBrush:isValid()
cc.CameraBackgroundBrush:createColorBrush(const_Color4F_color,float_depth)
cc.CameraBackgroundBrush:createNoneBrush()
cc.CameraBackgroundBrush:createDepthBrush(float_depth)
cc.CameraBackgroundDepthBrush
cc.CameraBackgroundDepthBrush:setDepth(float_depth)
cc.CameraBackgroundDepthBrush:create(float_depth)
cc.CameraBackgroundColorBrush
cc.CameraBackgroundColorBrush:setColor(const_Color4F_color)
cc.CameraBackgroundColorBrush:create(const_Color4F_color,float_depth)
cc.CameraBackgroundSkyBoxBrush
cc.CameraBackgroundSkyBoxBrush:setTextureValid(bool_valid)
cc.CameraBackgroundSkyBoxBrush:setTexture(TextureCube__texture)
cc.CameraBackgroundSkyBoxBrush:setActived(bool_actived)
cc.CameraBackgroundSkyBoxBrush:isActived()
cc.CameraBackgroundSkyBoxBrush:create()
cc.GridBase
cc.GridBase:setGridSize(const_Size_gridSize)
cc.GridBase:setGridRect(const_Rect_rect)
cc.GridBase:afterBlit()
cc.GridBase:getGridRect()
cc.GridBase:afterDraw(Node_target)
cc.GridBase:beforeDraw()
cc.GridBase:calculateVertexPoints()
cc.GridBase:isTextureFlipped()
cc.GridBase:getGridSize()
cc.GridBase:getStep()
cc.GridBase:set2DProjection()
cc.GridBase:setStep(const_Vec2_step)
cc.GridBase:setTextureFlipped(bool_flipped)
cc.GridBase:blit()
cc.GridBase:setActive(bool_active)
cc.GridBase:getReuseGrid()
cc.GridBase:initWithSize(const_Size_gridSize)
cc.GridBase:initWithSize(const_Size_gridSize,Texture2D_texture,bool_flipped)
cc.GridBase:beforeBlit()
cc.GridBase:setReuseGrid(int_reuseGrid)
cc.GridBase:isActive()
cc.GridBase:reuse()
cc.GridBase:create(const_Size_gridSize,Texture2D_texture,bool_flipped)
cc.GridBase:create(const_Size_gridSize)
cc.Grid3D
cc.Grid3D:getNeedDepthTestForBlit()
cc.Grid3D:setNeedDepthTestForBlit(bool_neededDepthTest)
cc.Grid3D:create(const_Size_gridSize)
cc.Grid3D:create(const_Size_gridSize,const_Rect_rect)
cc.Grid3D:create(const_Size_gridSize,Texture2D_texture,bool_flipped)
cc.Grid3D:create(const_Size_gridSize,Texture2D_texture,bool_flipped,const_Rect_rect)
cc.TiledGrid3D
cc.TiledGrid3D:create(const_Size_gridSize)
cc.TiledGrid3D:create(const_Size_gridSize,const_Rect_rect)
cc.TiledGrid3D:create(const_Size_gridSize,Texture2D_texture,bool_flipped)
cc.TiledGrid3D:create(const_Size_gridSize,Texture2D_texture,bool_flipped,const_Rect_rect)
cc.BaseLight
cc.BaseLight:setEnabled(bool_enabled)
cc.BaseLight:getIntensity()
cc.BaseLight:isEnabled()
cc.BaseLight:getLightType()
cc.BaseLight:setLightFlag(LightFlag_flag)
cc.BaseLight:setIntensity(float_intensity)
cc.BaseLight:getLightFlag()
cc.DirectionLight
cc.DirectionLight:getDirection()
cc.DirectionLight:getDirectionInWorld()
cc.DirectionLight:setDirection(const_Vec3_dir)
cc.DirectionLight:create(const_Vec3_direction,const_Color3B_color)
cc.PointLight
cc.PointLight:getRange()
cc.PointLight:setRange(float_range)
cc.PointLight:create(const_Vec3_position,const_Color3B_color,float_range)
cc.SpotLight
cc.SpotLight:getRange()
cc.SpotLight:setDirection(const_Vec3_dir)
cc.SpotLight:getCosInnerAngle()
cc.SpotLight:getOuterAngle()
cc.SpotLight:getInnerAngle()
cc.SpotLight:getDirection()
cc.SpotLight:getCosOuterAngle()
cc.SpotLight:setOuterAngle(float_outerAngle)
cc.SpotLight:setInnerAngle(float_angle)
cc.SpotLight:getDirectionInWorld()
cc.SpotLight:setRange(float_range)
cc.SpotLight:create(const_Vec3_direction,const_Vec3_position,const_Color3B_color,float_innerAngle,float_outerAngle,float_range)
cc.AmbientLight
cc.AmbientLight:create(const_Color3B_color)
cc.GLProgram
cc.GLProgram:getFragmentShaderLog()
cc.GLProgram:initWithByteArrays(const_GLchar_vShaderByteArray,const_GLchar_fShaderByteArray)
cc.GLProgram:initWithByteArrays(const_GLchar_vShaderByteArray,const_GLchar_fShaderByteArray,const_std_string_compileTimeDefines)
cc.GLProgram:initWithByteArrays(const_GLchar_vShaderByteArray,const_GLchar_fShaderByteArray,const_std_string_compileTimeHeaders,const_std_string_compileTimeDefines)
cc.GLProgram:initWithFilenames(const_std_string_vShaderFilename,const_std_string_fShaderFilename)
cc.GLProgram:initWithFilenames(const_std_string_vShaderFilename,const_std_string_fShaderFilename,const_std_string_compileTimeDefines)
cc.GLProgram:initWithFilenames(const_std_string_vShaderFilename,const_std_string_fShaderFilename,const_std_string_compileTimeHeaders,const_std_string_compileTimeDefines)
cc.GLProgram:use()
cc.GLProgram:getVertexShaderLog()
cc.GLProgram:setUniformsForBuiltins(const_Mat4_modelView)
cc.GLProgram:setUniformsForBuiltins()
cc.GLProgram:updateUniforms()
cc.GLProgram:reset()
cc.GLProgram:bindAttribLocation(const_std_string_attributeName,GLuint_index)
cc.GLProgram:getAttribLocation(const_std_string_attributeName)
cc.GLProgram:link()
cc.GLProgram:createWithByteArrays(const_GLchar_vShaderByteArray,const_GLchar_fShaderByteArray)
cc.GLProgram:createWithByteArrays(const_GLchar_vShaderByteArray,const_GLchar_fShaderByteArray,const_std_string_compileTimeDefines)
cc.GLProgram:createWithByteArrays(const_GLchar_vShaderByteArray,const_GLchar_fShaderByteArray,const_std_string_compileTimeHeaders,const_std_string_compileTimeDefines)
cc.GLProgram:createWithFilenames(const_std_string_vShaderFilename,const_std_string_fShaderFilename)
cc.GLProgram:createWithFilenames(const_std_string_vShaderFilename,const_std_string_fShaderFilename,const_std_string_compileTimeDefines)
cc.GLProgram:createWithFilenames(const_std_string_vShaderFilename,const_std_string_fShaderFilename,const_std_string_compileTimeHeaders,const_std_string_compileTimeDefines)
cc.GLProgramCache
cc.GLProgramCache:reloadDefaultGLProgramsRelativeToLights()
cc.GLProgramCache:addGLProgram(GLProgram_program,const_std_string_key)
cc.GLProgramCache:reloadDefaultGLPrograms()
cc.GLProgramCache:loadDefaultGLPrograms()
cc.GLProgramCache:getGLProgram(const_std_string_key)
cc.GLProgramCache:destroyInstance()
cc.GLProgramCache:getInstance()
cc.RenderState
cc.RenderState:setTexture(Texture2D_texture)
cc.RenderState:getTopmost(RenderState_below)
cc.RenderState:getTexture()
cc.RenderState:bind(Pass_pass)
cc.RenderState:bind()
cc.RenderState:getName()
cc.RenderState:getStateBlock()
cc.RenderState:setParent(RenderState_parent)
cc.RenderState:initialize()
cc.Pass
cc.Pass:unbind()
cc.Pass:bind(const_Mat4_modelView)
cc.Pass:clone()
cc.Pass:getGLProgramState()
cc.Pass:getVertexAttributeBinding()
cc.Pass:getHash()
cc.Pass:setVertexAttribBinding(VertexAttribBinding_binding)
cc.Pass:create(Technique_parent)
cc.Pass:createWithGLProgramState(Technique_parent,GLProgramState_programState)
cc.Technique
cc.Technique:getPassCount()
cc.Technique:clone()
cc.Technique:addPass(Pass_pass)
cc.Technique:getPasses()
cc.Technique:getName()
cc.Technique:getPassByIndex(ssize_t_index)
cc.Technique:create(Material_parent)
cc.Technique:createWithGLProgramState(Material_parent,GLProgramState_state)
cc.Material
cc.Material:clone()
cc.Material:getTechniqueCount()
cc.Material:setName(const_std_string_name)
cc.Material:getTechniqueByIndex(ssize_t_index)
cc.Material:getName()
cc.Material:getTechniques()
cc.Material:setTechnique(const_std_string_techniqueName)
cc.Material:getTechniqueByName(const_std_string_name)
cc.Material:addTechnique(Technique_technique)
cc.Material:getTechnique()
cc.Material:createWithFilename(const_std_string_path)
cc.Material:createWithGLStateProgram(GLProgramState_programState)
cc.Material:createWithProperties(Properties_materialProperties)
cc.TextureCache
cc.TextureCache:reloadTexture(const_std_string_fileName)
cc.TextureCache:unbindAllImageAsync()
cc.TextureCache:removeTextureForKey(const_std_string_key)
cc.TextureCache:removeAllTextures()
cc.TextureCache:getDescription()
cc.TextureCache:getCachedTextureInfo()
cc.TextureCache:addImage(const_std_string_filepath)
cc.TextureCache:addImage(Image_image,const_std_string_key)
cc.TextureCache:unbindImageAsync(const_std_string_filename)
cc.TextureCache:getTextureForKey(const_std_string_key)
cc.TextureCache:getTextureFilePath(Texture2D_texture)
cc.TextureCache:renameTextureWithKey(const_std_string_srcName,const_std_string_dstName)
cc.TextureCache:removeUnusedTextures()
cc.TextureCache:removeTexture(Texture2D_texture)
cc.TextureCache:waitForQuit()
cc.TextureCache:setETC1AlphaFileSuffix(const_std_string_suffix)
cc.TextureCache:getETC1AlphaFileSuffix()
cc.Device
cc.Device:setAccelerometerEnabled(bool_isEnabled)
cc.Device:setAccelerometerInterval(float_interval)
cc.Device:setKeepScreenOn(bool_keepScreenOn)
cc.Device:vibrate(float_duration)
cc.Device:getDPI()
cc.Application
cc.Application:getTargetPlatform()
cc.Application:getCurrentLanguage()
cc.Application:getCurrentLanguageCode()
cc.Application:openURL(const_std_string_url)
cc.Application:getVersion()
cc.Application:setAnimationInterval(float_interval)
cc.Application:getInstance()
cc.GLViewImpl
cc.GLViewImpl:createWithRect(const_std_string_viewName,Rect_rect,float_frameZoomFactor)
cc.GLViewImpl:create(const_std_string_viewname)
cc.GLViewImpl:createWithFullScreen(const_std_string_viewName)
cc.AnimationCache
cc.AnimationCache:getAnimation(const_std_string_name)
cc.AnimationCache:addAnimation(Animation_animation,const_std_string_name)
cc.AnimationCache:init()
cc.AnimationCache:addAnimationsWithDictionary(const_ValueMap_dictionary,const_std_string_plist)
cc.AnimationCache:removeAnimation(const_std_string_name)
cc.AnimationCache:destroyInstance()
cc.AnimationCache:getInstance()
cc.SpriteBatchNode
cc.SpriteBatchNode:appendChild(Sprite_sprite)
cc.SpriteBatchNode:reorderBatch(bool_reorder)
cc.SpriteBatchNode:getTexture()
cc.SpriteBatchNode:setTexture(Texture2D_texture)
cc.SpriteBatchNode:removeChildAtIndex(ssize_t_index,bool_doCleanup)
cc.SpriteBatchNode:removeSpriteFromAtlas(Sprite_sprite)
cc.SpriteBatchNode:addSpriteWithoutQuad(Sprite_child,int_z,int_aTag)
cc.SpriteBatchNode:atlasIndexForChild(Sprite_sprite,int_z)
cc.SpriteBatchNode:increaseAtlasCapacity()
cc.SpriteBatchNode:lowestAtlasIndexInChild(Sprite_sprite)
cc.SpriteBatchNode:getBlendFunc()
cc.SpriteBatchNode:initWithTexture(Texture2D_tex,ssize_t_capacity)
cc.SpriteBatchNode:setTextureAtlas(TextureAtlas_textureAtlas)
cc.SpriteBatchNode:reserveCapacity(ssize_t_newCapacity)
cc.SpriteBatchNode:removeAllChildrenWithCleanup(bool_cleanup)
cc.SpriteBatchNode:insertQuadFromSprite(Sprite_sprite,ssize_t_index)
cc.SpriteBatchNode:initWithFile(const_std_string_fileImage,ssize_t_capacity)
cc.SpriteBatchNode:setBlendFunc(const_BlendFunc_blendFunc)
cc.SpriteBatchNode:rebuildIndexInOrder(Sprite_parent,ssize_t_index)
cc.SpriteBatchNode:getTextureAtlas()
cc.SpriteBatchNode:highestAtlasIndexInChild(Sprite_sprite)
cc.SpriteBatchNode:create(const_std_string_fileImage,ssize_t_capacity)
cc.SpriteBatchNode:createWithTexture(Texture2D_tex,ssize_t_capacity)
cc.SpriteFrameCache
cc.SpriteFrameCache:reloadTexture(const_std_string_plist)
cc.SpriteFrameCache:addSpriteFramesWithFileContent(const_std_string_plist_content,Texture2D_texture)
cc.SpriteFrameCache:addSpriteFrame(SpriteFrame_frame,const_std_string_frameName)
cc.SpriteFrameCache:removeSpriteFramesFromFile(const_std_string_plist)
cc.SpriteFrameCache:init()
cc.SpriteFrameCache:removeSpriteFrames()
cc.SpriteFrameCache:removeUnusedSpriteFrames()
cc.SpriteFrameCache:removeSpriteFramesFromFileContent(const_std_string_plist_content)
cc.SpriteFrameCache:removeSpriteFrameByName(const_std_string_name)
cc.SpriteFrameCache:isSpriteFramesWithFileLoaded(const_std_string_plist)
cc.SpriteFrameCache:removeSpriteFramesFromTexture(Texture2D_texture)
cc.SpriteFrameCache:destroyInstance()
cc.SpriteFrameCache:getInstance()
cc.ParallaxNode
cc.ParallaxNode:addChild(Node__child,int_z,const_Vec2_parallaxRatio,const_Vec2_positionOffset)
cc.ParallaxNode:addChild(Node__child,int_zOrder,int_tag)
cc.ParallaxNode:removeAllChildrenWithCleanup(bool_cleanup)
cc.ParallaxNode:create()
cc.TMXObjectGroup
cc.TMXObjectGroup:setPositionOffset(const_Vec2_offset)
cc.TMXObjectGroup:getProperty(const_std_string_propertyName)
cc.TMXObjectGroup:getPositionOffset()
cc.TMXObjectGroup:getObject(const_std_string_objectName)
cc.TMXObjectGroup:getObjects()
cc.TMXObjectGroup:setGroupName(const_std_string_groupName)
cc.TMXObjectGroup:getProperties()
cc.TMXObjectGroup:getGroupName()
cc.TMXObjectGroup:setProperties(const_ValueMap_properties)
cc.TMXObjectGroup:setObjects(const_ValueVector_objects)
cc.TMXLayerInfo
cc.TMXLayerInfo:setProperties(ValueMap_properties)
cc.TMXLayerInfo:getProperties()
cc.TMXTilesetInfo
cc.TMXTilesetInfo:getRectForGID(uint32_t_gid)
cc.TMXMapInfo
cc.TMXMapInfo:setCurrentString(const_std_string_currentString)
cc.TMXMapInfo:getHexSideLength()
cc.TMXMapInfo:setTileSize(const_Size_tileSize)
cc.TMXMapInfo:initWithTMXFile(const_std_string_tmxFile)
cc.TMXMapInfo:getOrientation()
cc.TMXMapInfo:setObjectGroups()
cc.TMXMapInfo:setLayers()
cc.TMXMapInfo:parseXMLFile(const_std_string_xmlFilename)
cc.TMXMapInfo:getParentElement()
cc.TMXMapInfo:setTMXFileName(const_std_string_fileName)
cc.TMXMapInfo:parseXMLString(const_std_string_xmlString)
cc.TMXMapInfo:getLayers()
cc.TMXMapInfo:getStaggerAxis()
cc.TMXMapInfo:setHexSideLength(int_hexSideLength)
cc.TMXMapInfo:getTilesets()
cc.TMXMapInfo:getParentGID()
cc.TMXMapInfo:setParentElement(int_element)
cc.TMXMapInfo:initWithXML(const_std_string_tmxString,const_std_string_resourcePath)
cc.TMXMapInfo:setParentGID(int_gid)
cc.TMXMapInfo:getLayerAttribs()
cc.TMXMapInfo:getTileSize()
cc.TMXMapInfo:getTileProperties()
cc.TMXMapInfo:isStoringCharacters()
cc.TMXMapInfo:getExternalTilesetFileName()
cc.TMXMapInfo:getObjectGroups()
cc.TMXMapInfo:getTMXFileName()
cc.TMXMapInfo:setStaggerIndex(int_staggerIndex)
cc.TMXMapInfo:setProperties(const_ValueMap_properties)
cc.TMXMapInfo:setOrientation(int_orientation)
cc.TMXMapInfo:setTileProperties(const_ValueMapIntKey_tileProperties)
cc.TMXMapInfo:setMapSize(const_Size_mapSize)
cc.TMXMapInfo:getCurrentString()
cc.TMXMapInfo:setStoringCharacters(bool_storingCharacters)
cc.TMXMapInfo:setStaggerAxis(int_staggerAxis)
cc.TMXMapInfo:getMapSize()
cc.TMXMapInfo:setTilesets()
cc.TMXMapInfo:getProperties()
cc.TMXMapInfo:getStaggerIndex()
cc.TMXMapInfo:setLayerAttribs(int_layerAttribs)
cc.TMXMapInfo:create(const_std_string_tmxFile)
cc.TMXMapInfo:createWithXML(const_std_string_tmxString,const_std_string_resourcePath)
cc.TMXLayer
cc.TMXLayer:getPositionAt(const_Vec2_tileCoordinate)
cc.TMXLayer:setLayerOrientation(int_orientation)
cc.TMXLayer:getLayerSize()
cc.TMXLayer:setMapTileSize(const_Size_size)
cc.TMXLayer:getLayerOrientation()
cc.TMXLayer:setProperties(const_ValueMap_properties)
cc.TMXLayer:setLayerName(const_std_string_layerName)
cc.TMXLayer:removeTileAt(const_Vec2_tileCoordinate)
cc.TMXLayer:initWithTilesetInfo(TMXTilesetInfo_tilesetInfo,TMXLayerInfo_layerInfo,TMXMapInfo_mapInfo)
cc.TMXLayer:setupTiles()
cc.TMXLayer:setTileGID(int_gid,const_Vec2_tileCoordinate)
cc.TMXLayer:setTileGID(int_gid,const_Vec2_tileCoordinate,TMXTileFlags_flags)
cc.TMXLayer:getMapTileSize()
cc.TMXLayer:getProperty(const_std_string_propertyName)
cc.TMXLayer:setLayerSize(const_Size_size)
cc.TMXLayer:getLayerName()
cc.TMXLayer:setTileSet(TMXTilesetInfo_info)
cc.TMXLayer:getTileSet()
cc.TMXLayer:getProperties()
cc.TMXLayer:getTileAt(const_Vec2_tileCoordinate)
cc.TMXLayer:create(TMXTilesetInfo_tilesetInfo,TMXLayerInfo_layerInfo,TMXMapInfo_mapInfo)
cc.TMXLayer:setupTileSprite(Sprite_sprite,const_Vec2_pos,uint32_t_gid)
cc.TMXTiledMap
cc.TMXTiledMap:setObjectGroups()
cc.TMXTiledMap:getProperty(const_std_string_propertyName)
cc.TMXTiledMap:setMapSize(const_Size_mapSize)
cc.TMXTiledMap:getObjectGroup(const_std_string_groupName)
cc.TMXTiledMap:getObjectGroups()
cc.TMXTiledMap:initWithTMXFile(const_std_string_tmxFile)
cc.TMXTiledMap:getTileSize()
cc.TMXTiledMap:getMapSize()
cc.TMXTiledMap:initWithXML(const_std_string_tmxString,const_std_string_resourcePath)
cc.TMXTiledMap:getProperties()
cc.TMXTiledMap:setTileSize(const_Size_tileSize)
cc.TMXTiledMap:setProperties(const_ValueMap_properties)
cc.TMXTiledMap:getLayer(const_std_string_layerName)
cc.TMXTiledMap:getMapOrientation()
cc.TMXTiledMap:setMapOrientation(int_mapOrientation)
cc.TMXTiledMap:create(const_std_string_tmxFile)
cc.TMXTiledMap:createWithXML(const_std_string_tmxString,const_std_string_resourcePath)
cc.TMXTiledMap:getPropertiesForGID(int_GID)
cc.TileMapAtlas
cc.TileMapAtlas:initWithTileFile(const_std_string_tile,const_std_string_mapFile,int_tileWidth,int_tileHeight)
cc.TileMapAtlas:releaseMap()
cc.TileMapAtlas:getTileAt(const_Vec2_position)
cc.TileMapAtlas:setTile(const_Color3B_tile,const_Vec2_position)
cc.TileMapAtlas:create(const_std_string_tile,const_std_string_mapFile,int_tileWidth,int_tileHeight)
cc.MotionStreak3D
cc.MotionStreak3D:reset()
cc.MotionStreak3D:setTexture(Texture2D_texture)
cc.MotionStreak3D:getTexture()
cc.MotionStreak3D:tintWithColor(const_Color3B_colors)
cc.MotionStreak3D:getSweepAxis()
cc.MotionStreak3D:setBlendFunc(const_BlendFunc_blendFunc)
cc.MotionStreak3D:setStartingPositionInitialized(bool_bStartingPositionInitialized)
cc.MotionStreak3D:getBlendFunc()
cc.MotionStreak3D:isStartingPositionInitialized()
cc.MotionStreak3D:getStroke()
cc.MotionStreak3D:initWithFade(float_fade,float_minSeg,float_stroke,const_Color3B_color,const_std_string_path)
cc.MotionStreak3D:initWithFade(float_fade,float_minSeg,float_stroke,const_Color3B_color,Texture2D_texture)
cc.MotionStreak3D:setSweepAxis(const_Vec3_sweepAxis)
cc.MotionStreak3D:setStroke(float_stroke)
cc.MotionStreak3D:create(float_fade,float_minSeg,float_stroke,const_Color3B_color,const_std_string_path)
cc.MotionStreak3D:create(float_fade,float_minSeg,float_stroke,const_Color3B_color,Texture2D_texture)
cc.ComponentLua
cc.ComponentLua:getScriptObject()
cc.ComponentLua:update(float_dt)
cc.ComponentLua:create(const_std_string_scriptFileName)
cc.CCBAnimationManager
cc.CCBAnimationManager:moveAnimationsFromNode(cocos2d_Node_fromNode,cocos2d_Node_toNode)
cc.CCBAnimationManager:setAutoPlaySequenceId(int_autoPlaySequenceId)
cc.CCBAnimationManager:getDocumentCallbackNames()
cc.CCBAnimationManager:actionForSoundChannel(CCBSequenceProperty_channel)
cc.CCBAnimationManager:setBaseValue(const_cocos2d_Value_value,cocos2d_Node_pNode,const_std_string_propName)
cc.CCBAnimationManager:getDocumentOutletNodes()
cc.CCBAnimationManager:getLastCompletedSequenceName()
cc.CCBAnimationManager:setRootNode(cocos2d_Node_pRootNode)
cc.CCBAnimationManager:runAnimationsForSequenceNamedTweenDuration(const_char_pName,float_fTweenDuration)
cc.CCBAnimationManager:addDocumentOutletName(std_string_name)
cc.CCBAnimationManager:getSequences()
cc.CCBAnimationManager:getRootContainerSize()
cc.CCBAnimationManager:setDocumentControllerName(const_std_string_name)
cc.CCBAnimationManager:setObject(cocos2d_Ref_obj,cocos2d_Node_pNode,const_std_string_propName)
cc.CCBAnimationManager:getContainerSize(cocos2d_Node_pNode)
cc.CCBAnimationManager:actionForCallbackChannel(CCBSequenceProperty_channel)
cc.CCBAnimationManager:getDocumentOutletNames()
cc.CCBAnimationManager:addDocumentCallbackControlEvents(cocos2d_extension_Control_EventType_eventType)
cc.CCBAnimationManager:init()
cc.CCBAnimationManager:getKeyframeCallbacks()
cc.CCBAnimationManager:getDocumentCallbackControlEvents()
cc.CCBAnimationManager:setRootContainerSize(const_cocos2d_Size_rootContainerSize)
cc.CCBAnimationManager:runAnimationsForSequenceIdTweenDuration(int_nSeqId,float_fTweenDuraiton)
cc.CCBAnimationManager:getRunningSequenceName()
cc.CCBAnimationManager:getAutoPlaySequenceId()
cc.CCBAnimationManager:addDocumentCallbackName(std_string_name)
cc.CCBAnimationManager:getRootNode()
cc.CCBAnimationManager:addDocumentOutletNode(cocos2d_Node_node)
cc.CCBAnimationManager:getSequenceDuration(const_char_pSequenceName)
cc.CCBAnimationManager:addDocumentCallbackNode(cocos2d_Node_node)
cc.CCBAnimationManager:runAnimationsForSequenceNamed(const_char_pName)
cc.CCBAnimationManager:getSequenceId(const_char_pSequenceName)
cc.CCBAnimationManager:getDocumentCallbackNodes()
cc.CCBAnimationManager:setSequences()
cc.CCBAnimationManager:debug()
cc.CCBAnimationManager:getDocumentControllerName()
cc.CCBReader
cc.CCBReader:addOwnerOutletName(std_string_name)
cc.CCBReader:getOwnerCallbackNames()
cc.CCBReader:addDocumentCallbackControlEvents(cocos2d_extension_Control_EventType_eventType)
cc.CCBReader:setCCBRootPath(const_char_ccbRootPath)
cc.CCBReader:addOwnerOutletNode(cocos2d_Node_node)
cc.CCBReader:getOwnerCallbackNodes()
cc.CCBReader:readSoundKeyframesForSeq(CCBSequence_seq)
cc.CCBReader:getCCBRootPath()
cc.CCBReader:getOwnerCallbackControlEvents()
cc.CCBReader:getOwnerOutletNodes()
cc.CCBReader:readUTF8()
cc.CCBReader:addOwnerCallbackControlEvents(cocos2d_extension_Control_EventType_type)
cc.CCBReader:getOwnerOutletNames()
cc.CCBReader:readCallbackKeyframesForSeq(CCBSequence_seq)
cc.CCBReader:getAnimationManagersForNodes()
cc.CCBReader:getNodesWithAnimationManagers()
cc.CCBReader:setResolutionScale(float_scale)
cc.SimpleAudioEngine
cc.SimpleAudioEngine:stopAllEffects()
cc.SimpleAudioEngine:preloadEffect(const_char_filePath)
cc.SimpleAudioEngine:getEffectsVolume()
cc.SimpleAudioEngine:pauseEffect(unsigned_int_soundId)
cc.SimpleAudioEngine:playEffect(const_char_filePath,bool_loop,float_pitch,float_pan,float_gain)
cc.SimpleAudioEngine:resumeAllEffects()
cc.SimpleAudioEngine:setEffectsVolume(float_volume)
cc.SimpleAudioEngine:stopEffect(unsigned_int_soundId)
cc.SimpleAudioEngine:pauseAllEffects()
cc.SimpleAudioEngine:unloadEffect(const_char_filePath)
cc.SimpleAudioEngine:resumeEffect(unsigned_int_soundId)
cc.SimpleAudioEngine:getInstance()
cc.Controller
cc.Controller:receiveExternalKeyEvent(int_externalKeyCode,bool_receive)
cc.Controller:getDeviceName()
cc.Controller:isConnected()
cc.Controller:getDeviceId()
cc.Controller:setTag(int_tag)
cc.Controller:getTag()
cc.Controller:startDiscoveryController()
cc.Controller:stopDiscoveryController()
cc.Controller:getControllerByDeviceId(int_deviceId)
cc.Controller:getControllerByTag(int_tag)
cc.CSLoader
cc.CSLoader:createNodeFromJson(const_std_string_filename)
cc.CSLoader:createNodeWithFlatBuffersFile(const_std_string_filename)
cc.CSLoader:createNodeWithFlatBuffersFile(const_std_string_filename,const_ccNodeLoadCallback_callback)
cc.CSLoader:loadNodeWithFile(const_std_string_fileName)
cc.CSLoader:setJsonPath(std_string_jsonPath)
cc.CSLoader:init()
cc.CSLoader:loadNodeWithContent(const_std_string_content)
cc.CSLoader:isRecordJsonPath()
cc.CSLoader:getJsonPath()
cc.CSLoader:setRecordJsonPath(bool_record)
cc.CSLoader:createNodeWithFlatBuffersForSimulator(const_std_string_filename)
cc.CSLoader:destroyInstance()
cc.CSLoader:createNodeWithVisibleSize(const_std_string_filename)
cc.CSLoader:getInstance()
ccexp.VideoPlayer
ccexp.VideoPlayer:getFileName()
ccexp.VideoPlayer:getURL()
ccexp.VideoPlayer:play()
ccexp.VideoPlayer:setKeepAspectRatioEnabled(bool_enable)
ccexp.VideoPlayer:stop()
ccexp.VideoPlayer:setFullScreenEnabled(bool_fullscreen)
ccexp.VideoPlayer:setFileName(const_std_string_videoPath)
ccexp.VideoPlayer:setURL(const_std_string__videoURL)
ccexp.VideoPlayer:isKeepAspectRatioEnabled()
ccexp.VideoPlayer:onPlayEvent(int_event)
ccexp.VideoPlayer:isFullScreenEnabled()
ccexp.VideoPlayer:isPlaying()
ccexp.VideoPlayer:seekTo(float_sec)
ccexp.WebView
ccexp.WebView:setOpacityWebView(float_opacity)
ccexp.WebView:canGoBack()
ccexp.WebView:loadHTMLString(const_std_string_string,const_std_string_baseURL)
ccexp.WebView:goForward()
ccexp.WebView:goBack()
ccexp.WebView:setScalesPageToFit(const_bool_scalesPageToFit)
ccexp.WebView:loadFile(const_std_string_fileName)
ccexp.WebView:loadURL(const_std_string_url)
ccexp.WebView:loadURL(const_std_string_url,bool_cleanCachedData)
ccexp.WebView:setBounces(bool_bounce)
ccexp.WebView:evaluateJS(const_std_string_js)
ccexp.WebView:setBackgroundTransparent()
ccexp.WebView:getOnJSCallback()
ccexp.WebView:canGoForward()
ccexp.WebView:stopLoading()
ccexp.WebView:getOpacityWebView()
ccexp.WebView:reload()
ccexp.WebView:setJavascriptInterfaceScheme(const_std_string_scheme)
ccexp.WebView:create()
cc.Control
cc.Control:setEnabled(bool_bEnabled)
cc.Control:sendActionsForControlEvents(EventType_controlEvents)
cc.Control:setSelected(bool_bSelected)
cc.Control:isEnabled()
cc.Control:needsLayout()
cc.Control:hasVisibleParents()
cc.Control:isSelected()
cc.Control:isTouchInside(Touch__touch)
cc.Control:setHighlighted(bool_bHighlighted)
cc.Control:getTouchLocation(Touch_touch)
cc.Control:isHighlighted()
cc.Control:create()
cc.ControlButton
cc.ControlButton:isPushed()
cc.ControlButton:setTitleLabelForState(Node_label,State_state)
cc.ControlButton:setAdjustBackgroundImage(bool_adjustBackgroundImage)
cc.ControlButton:setTitleForState(const_std_string_title,State_state)
cc.ControlButton:initWithBackgroundSprite(cocos2d_ui_Scale9Sprite_sprite)
cc.ControlButton:getTitleTTFSizeForState(State_state)
cc.ControlButton:setTitleTTFForState(const_std_string_fntFile,State_state)
cc.ControlButton:setTitleTTFSizeForState(float_size,State_state)
cc.ControlButton:getBackgroundSpriteForState(State_state)
cc.ControlButton:initWithTitleAndFontNameAndFontSize(const_std_string_title,const_std_string_fontName,float_fontSize)
cc.ControlButton:setTitleBMFontForState(const_std_string_fntFile,State_state)
cc.ControlButton:getTitleTTFForState(State_state)
cc.ControlButton:getTitleColorForState(State_state)
cc.ControlButton:setTitleColorForState(const_Color3B_color,State_state)
cc.ControlButton:doesAdjustBackgroundImage()
cc.ControlButton:setBackgroundSpriteFrameForState(SpriteFrame__spriteFrame,State_state)
cc.ControlButton:setBackgroundSpriteForState(cocos2d_ui_Scale9Sprite_sprite,State_state)
cc.ControlButton:getTitleBMFontForState(State_state)
cc.ControlButton:getTitleLabelForState(State_state)
cc.ControlButton:setMargins(int_marginH,int_marginV)
cc.ControlButton:getCurrentTitle()
cc.ControlButton:initWithLabelAndBackgroundSprite(Node_label,cocos2d_ui_Scale9Sprite_backgroundSprite,bool_adjustBackGroundSize)
cc.ControlButton:getTitleForState(State_state)
cc.ControlButton:create()
cc.ControlButton:create(Node_label,cocos2d_ui_Scale9Sprite_backgroundSprite)
cc.ControlButton:create(Node_label,cocos2d_ui_Scale9Sprite_backgroundSprite,bool_adjustBackGroundSize)
cc.ControlHuePicker
cc.ControlHuePicker:initWithTargetAndPos(Node_target,Vec2_pos)
cc.ControlHuePicker:setHue(float_val)
cc.ControlHuePicker:setHuePercentage(float_val)
cc.ControlHuePicker:create(Node_target,Vec2_pos)
cc.ControlSaturationBrightnessPicker
cc.ControlSaturationBrightnessPicker:initWithTargetAndPos(Node_target,Vec2_pos)
cc.ControlSaturationBrightnessPicker:create(Node_target,Vec2_pos)
cc.ControlColourPicker
cc.ControlColourPicker:hueSliderValueChanged(Ref__sender,Control_EventType_controlEvent)
cc.ControlColourPicker:colourSliderValueChanged(Ref__sender,Control_EventType_controlEvent)
cc.ControlColourPicker:create()
cc.ControlPotentiometer
cc.ControlPotentiometer:setValue(float_value)
cc.ControlPotentiometer:getMaximumValue()
cc.ControlPotentiometer:potentiometerBegan(Vec2_location)
cc.ControlPotentiometer:setMaximumValue(float_maximumValue)
cc.ControlPotentiometer:getMinimumValue()
cc.ControlPotentiometer:getValue()
cc.ControlPotentiometer:distanceBetweenPointAndPoint(Vec2_point1,Vec2_point2)
cc.ControlPotentiometer:potentiometerEnded(Vec2_location)
cc.ControlPotentiometer:setMinimumValue(float_minimumValue)
cc.ControlPotentiometer:initWithTrackSprite_ProgressTimer_ThumbSprite(Sprite_trackSprite,ProgressTimer_progressTimer,Sprite_thumbSprite)
cc.ControlPotentiometer:potentiometerMoved(Vec2_location)
cc.ControlPotentiometer:create(const_char_backgroundFile,const_char_progressFile,const_char_thumbFile)
cc.ControlSlider
cc.ControlSlider:initWithSprites(Sprite__backgroundSprite,Sprite_progressSprite,Sprite_thumbSprite)
cc.ControlSlider:initWithSprites(Sprite__backgroundSprite,Sprite_progressSprite,Sprite_thumbSprite,Sprite_selectedThumbSprite)
cc.ControlSlider:setMaximumValue(float_val)
cc.ControlSlider:setValue(float_val)
cc.ControlSlider:locationFromTouch(Touch_touch)
cc.ControlSlider:setMinimumValue(float_val)
cc.ControlSlider:create(const_char_bgFile,const_char_progressFile,const_char_thumbFile)
cc.ControlSlider:create(Sprite__backgroundSprite,Sprite_pogressSprite,Sprite_thumbSprite)
cc.ControlSlider:create(const_char_bgFile,const_char_progressFile,const_char_thumbFile,const_char_selectedThumbSpriteFile)
cc.ControlSlider:create(Sprite__backgroundSprite,Sprite_pogressSprite,Sprite_thumbSprite,Sprite_selectedThumbSprite)
cc.ControlStepper
cc.ControlStepper:setValue(double_value)
cc.ControlStepper:setStepValue(double_stepValue)
cc.ControlStepper:initWithMinusSpriteAndPlusSprite(Sprite_minusSprite,Sprite_plusSprite)
cc.ControlStepper:setValueWithSendingEvent(double_value,bool_send)
cc.ControlStepper:setMaximumValue(double_maximumValue)
cc.ControlStepper:setWraps(bool_wraps)
cc.ControlStepper:startAutorepeat()
cc.ControlStepper:updateLayoutUsingTouchLocation(Vec2_location)
cc.ControlStepper:isContinuous()
cc.ControlStepper:stopAutorepeat()
cc.ControlStepper:setMinimumValue(double_minimumValue)
cc.ControlStepper:getValue()
cc.ControlStepper:create(Sprite_minusSprite,Sprite_plusSprite)
cc.ControlSwitch
cc.ControlSwitch:setOn(bool_isOn,bool_animated)
cc.ControlSwitch:locationFromTouch(Touch_touch)
cc.ControlSwitch:isOn()
cc.ControlSwitch:initWithMaskSprite(Sprite_maskSprite,Sprite__onSprite,Sprite__offSprite,Sprite__thumbSprite)
cc.ControlSwitch:initWithMaskSprite(Sprite_maskSprite,Sprite__onSprite,Sprite__offSprite,Sprite__thumbSprite,Label_onLabel,Label_offLabel)
cc.ControlSwitch:hasMoved()
cc.ControlSwitch:create(Sprite_maskSprite,Sprite__onSprite,Sprite__offSprite,Sprite__thumbSprite,Label_onLabel,Label_offLabel)
cc.ControlSwitch:create(Sprite_maskSprite,Sprite__onSprite,Sprite__offSprite,Sprite__thumbSprite)
cc.ScrollView
cc.ScrollView:setDirection(Direction_dir)
cc.ScrollView:getDirection()
cc.ScrollView:create()
cc.ScrollView:scrollToTop(float_timeInSec,bool_attenuated)
cc.ScrollView:scrollToPercentHorizontal(float_percent,float_timeInSec,bool_attenuated)
cc.ScrollView:setScrollBarOpacity(GLubyte_opacity)
cc.ScrollView:setScrollBarEnabled(bool_enabled)
cc.ScrollView:isInertiaScrollEnabled()
cc.ScrollView:scrollToPercentBothDirection(const_Vec2_percent,float_timeInSec,bool_attenuated)
cc.ScrollView:getScrolledPercentBothDirection()
cc.ScrollView:setScrollBarColor(const_Color3B_color)
cc.ScrollView:scrollToBottomLeft(float_timeInSec,bool_attenuated)
cc.ScrollView:getInnerContainer()
cc.ScrollView:jumpToBottom()
cc.ScrollView:setInnerContainerPosition(const_Vec2_pos)
cc.ScrollView:scrollToTopLeft(float_timeInSec,bool_attenuated)
cc.ScrollView:jumpToTopRight()
cc.ScrollView:jumpToTop()
cc.ScrollView:setInnerContainerSize(const_Size_size)
cc.ScrollView:getInnerContainerPosition()
cc.ScrollView:getScrolledPercentVertical()
cc.ScrollView:isBounceEnabled()
cc.ScrollView:jumpToPercentVertical(float_percent)
cc.ScrollView:addEventListener(const_ccScrollViewCallback_callback)
cc.ScrollView:setScrollBarAutoHideTime(float_autoHideTime)
cc.ScrollView:isAutoScrolling()
cc.ScrollView:setScrollBarPositionFromCornerForHorizontal(const_Vec2_positionFromCorner)
cc.ScrollView:setInertiaScrollEnabled(bool_enabled)
cc.ScrollView:setScrollBarAutoHideEnabled(bool_autoHideEnabled)
cc.ScrollView:getScrollBarColor()
cc.ScrollView:setScrollBarWidth(float_width)
cc.ScrollView:jumpToTopLeft()
cc.ScrollView:isScrollBarEnabled()
cc.ScrollView:jumpToBottomRight()
cc.ScrollView:setTouchTotalTimeThreshold(float_touchTotalTimeThreshold)
cc.ScrollView:getTouchTotalTimeThreshold()
cc.ScrollView:getScrollBarPositionFromCornerForHorizontal()
cc.ScrollView:getScrolledPercentHorizontal()
cc.ScrollView:setBounceEnabled(bool_enabled)
cc.ScrollView:stopAutoScroll()
cc.ScrollView:scrollToTopRight(float_timeInSec,bool_attenuated)
cc.ScrollView:isScrolling()
cc.ScrollView:scrollToLeft(float_timeInSec,bool_attenuated)
cc.ScrollView:jumpToPercentBothDirection(const_Vec2_percent)
cc.ScrollView:scrollToPercentVertical(float_percent,float_timeInSec,bool_attenuated)
cc.ScrollView:scrollToBottom(float_timeInSec,bool_attenuated)
cc.ScrollView:getScrollBarOpacity()
cc.ScrollView:scrollToBottomRight(float_timeInSec,bool_attenuated)
cc.ScrollView:setScrollBarPositionFromCorner(const_Vec2_positionFromCorner)
cc.ScrollView:setScrollBarPositionFromCornerForVertical(const_Vec2_positionFromCorner)
cc.ScrollView:getScrollBarAutoHideTime()
cc.ScrollView:jumpToLeft()
cc.ScrollView:scrollToRight(float_timeInSec,bool_attenuated)
cc.ScrollView:getScrollBarPositionFromCornerForVertical()
cc.ScrollView:getScrollBarWidth()
cc.ScrollView:isScrollBarAutoHideEnabled()
cc.ScrollView:jumpToBottomLeft()
cc.ScrollView:jumpToRight()
cc.ScrollView:getInnerContainerSize()
cc.ScrollView:jumpToPercentHorizontal(float_percent)
cc.TableViewCell
cc.TableViewCell:reset()
cc.TableViewCell:getIdx()
cc.TableViewCell:setIdx(ssize_t_uIdx)
cc.TableView
cc.TableView:updateCellAtIndex(ssize_t_idx)
cc.TableView:setVerticalFillOrder(VerticalFillOrder_order)
cc.TableView:scrollViewDidZoom(ScrollView_view)
cc.TableView:_updateContentSize()
cc.TableView:getVerticalFillOrder()
cc.TableView:removeCellAtIndex(ssize_t_idx)
cc.TableView:initWithViewSize(Size_size,Node_container)
cc.TableView:scrollViewDidScroll(ScrollView_view)
cc.TableView:reloadData()
cc.TableView:insertCellAtIndex(ssize_t_idx)
cc.TableView:cellAtIndex(ssize_t_idx)
cc.TableView:dequeueCell()
cc.AssetsManager
cc.AssetsManager:setStoragePath(const_char_storagePath)
cc.AssetsManager:setPackageUrl(const_char_packageUrl)
cc.AssetsManager:checkUpdate()
cc.AssetsManager:getStoragePath()
cc.AssetsManager:update()
cc.AssetsManager:setConnectionTimeout(unsigned_int_timeout)
cc.AssetsManager:setVersionFileUrl(const_char_versionFileUrl)
cc.AssetsManager:getPackageUrl()
cc.AssetsManager:getConnectionTimeout()
cc.AssetsManager:getVersion()
cc.AssetsManager:getVersionFileUrl()
cc.AssetsManager:deleteVersion()
cc.AssetsManager:create(const_char_packageUrl,const_char_versionFileUrl,const_char_storagePath,ErrorCallback_errorCallback,ProgressCallback_progressCallback,SuccessCallback_successCallback)
cc.EventAssetsManagerEx
cc.EventAssetsManagerEx:getAssetsManagerEx()
cc.EventAssetsManagerEx:getAssetId()
cc.EventAssetsManagerEx:getCURLECode()
cc.EventAssetsManagerEx:getMessage()
cc.EventAssetsManagerEx:getCURLMCode()
cc.EventAssetsManagerEx:getPercentByFile()
cc.EventAssetsManagerEx:getEventCode()
cc.EventAssetsManagerEx:getPercent()
cc.Manifest
cc.Manifest:getManifestFileUrl()
cc.Manifest:isVersionLoaded()
cc.Manifest:isLoaded()
cc.Manifest:getPackageUrl()
cc.Manifest:getVersion()
cc.Manifest:getVersionFileUrl()
cc.Manifest:getSearchPaths()
cc.AssetsManagerEx
cc.AssetsManagerEx:getState()
cc.AssetsManagerEx:getMaxConcurrentTask()
cc.AssetsManagerEx:checkUpdate()
cc.AssetsManagerEx:setVerifyCallback()
cc.AssetsManagerEx:getStoragePath()
cc.AssetsManagerEx:update()
cc.AssetsManagerEx:setVersionCompareHandle()
cc.AssetsManagerEx:setMaxConcurrentTask(const_int_max)
cc.AssetsManagerEx:getLocalManifest()
cc.AssetsManagerEx:getRemoteManifest()
cc.AssetsManagerEx:downloadFailedAssets()
cc.AssetsManagerEx:create(const_std_string_manifestUrl,const_std_string_storagePath)
cc.EventListenerAssetsManagerEx
cc.EventListenerAssetsManagerEx:init(const_AssetsManagerEx_AssetsManagerEx)
cc.ParticleSystem3D
cc.ParticleSystem3D:removeAffector(int_index)
cc.ParticleSystem3D:resumeParticleSystem()
cc.ParticleSystem3D:removeAllAffector()
cc.ParticleSystem3D:addAffector(Particle3DAffector_affector)
cc.ParticleSystem3D:startParticleSystem()
cc.ParticleSystem3D:isEnabled()
cc.ParticleSystem3D:getRender()
cc.ParticleSystem3D:setEmitter(Particle3DEmitter_emitter)
cc.ParticleSystem3D:isKeepLocal()
cc.ParticleSystem3D:getParticleQuota()
cc.ParticleSystem3D:pauseParticleSystem()
cc.ParticleSystem3D:getState()
cc.ParticleSystem3D:getAliveParticleCount()
cc.ParticleSystem3D:setParticleQuota(unsigned_int_quota)
cc.ParticleSystem3D:setBlendFunc(const_BlendFunc_blendFunc)
cc.ParticleSystem3D:setRender(Particle3DRender_render)
cc.ParticleSystem3D:stopParticleSystem()
cc.ParticleSystem3D:setKeepLocal(bool_keepLocal)
cc.PUParticleSystem3D
cc.PUParticleSystem3D:initWithFilePath(const_std_string_filePath)
cc.PUParticleSystem3D:getParticleSystemScaleVelocity()
cc.PUParticleSystem3D:setEmittedSystemQuota(unsigned_int_quota)
cc.PUParticleSystem3D:getDefaultDepth()
cc.PUParticleSystem3D:getEmittedSystemQuota()
cc.PUParticleSystem3D:clearAllParticles()
cc.PUParticleSystem3D:getMaterialName()
cc.PUParticleSystem3D:calulateRotationOffset()
cc.PUParticleSystem3D:getMaxVelocity()
cc.PUParticleSystem3D:forceUpdate(float_delta)
cc.PUParticleSystem3D:getTimeElapsedSinceStart()
cc.PUParticleSystem3D:removeAllBehaviourTemplate()
cc.PUParticleSystem3D:getEmittedEmitterQuota()
cc.PUParticleSystem3D:forceEmission(PUEmitter_emitter,unsigned_requested)
cc.PUParticleSystem3D:addListener(PUListener_listener)
cc.PUParticleSystem3D:isMarkedForEmission()
cc.PUParticleSystem3D:getDefaultWidth()
cc.PUParticleSystem3D:setEmittedEmitterQuota(unsigned_int_quota)
cc.PUParticleSystem3D:setMarkedForEmission(bool_isMarked)
cc.PUParticleSystem3D:clone()
cc.PUParticleSystem3D:addEmitter(PUEmitter_emitter)
cc.PUParticleSystem3D:addBehaviourTemplate(PUBehaviour_behaviour)
cc.PUParticleSystem3D:setDefaultWidth(const_float_width)
cc.PUParticleSystem3D:copyAttributesTo(PUParticleSystem3D_system)
cc.PUParticleSystem3D:setMaterialName(const_std_string_name)
cc.PUParticleSystem3D:getParentParticleSystem()
cc.PUParticleSystem3D:removeListener(PUListener_listener)
cc.PUParticleSystem3D:setMaxVelocity(float_maxVelocity)
cc.PUParticleSystem3D:getDefaultHeight()
cc.PUParticleSystem3D:getDerivedPosition()
cc.PUParticleSystem3D:rotationOffset(Vec3_pos)
cc.PUParticleSystem3D:removeAllEmitter()
cc.PUParticleSystem3D:setParticleSystemScaleVelocity(float_scaleVelocity)
cc.PUParticleSystem3D:getDerivedScale()
cc.PUParticleSystem3D:setDefaultHeight(const_float_height)
cc.PUParticleSystem3D:removeAllListener()
cc.PUParticleSystem3D:initSystem(const_std_string_filePath)
cc.PUParticleSystem3D:makeParticleLocal(PUParticle3D_particle)
cc.PUParticleSystem3D:removerAllObserver()
cc.PUParticleSystem3D:setDefaultDepth(const_float_depth)
cc.PUParticleSystem3D:addObserver(PUObserver_observer)
cc.PUParticleSystem3D:create()
cc.PUParticleSystem3D:create(const_std_string_filePath,const_std_string_materialPath)
cc.NavMeshAgent
cc.NavMeshAgent:setMaxSpeed(float_maxSpeed)
cc.NavMeshAgent:syncToNode()
cc.NavMeshAgent:completeOffMeshLink()
cc.NavMeshAgent:getSeparationWeight()
cc.NavMeshAgent:setAutoTraverseOffMeshLink(bool_isAuto)
cc.NavMeshAgent:getCurrentVelocity()
cc.NavMeshAgent:syncToAgent()
cc.NavMeshAgent:isOnOffMeshLink()
cc.NavMeshAgent:setSeparationWeight(float_weight)
cc.NavMeshAgent:pause()
cc.NavMeshAgent:getUserData()
cc.NavMeshAgent:setAutoOrientation(bool_isAuto)
cc.NavMeshAgent:getHeight()
cc.NavMeshAgent:getMaxSpeed()
cc.NavMeshAgent:getCurrentOffMeshLinkData()
cc.NavMeshAgent:getRadius()
cc.NavMeshAgent:setSyncFlag(const_NavMeshAgentSyncFlag_flag)
cc.NavMeshAgent:getSyncFlag()
cc.NavMeshAgent:resume()
cc.NavMeshAgent:stop()
cc.NavMeshAgent:setMaxAcceleration(float_maxAcceleration)
cc.NavMeshAgent:setOrientationRefAxes(const_Vec3_rotRefAxes)
cc.NavMeshAgent:getMaxAcceleration()
cc.NavMeshAgent:setHeight(float_height)
cc.NavMeshAgent:setUserData(void_data)
cc.NavMeshAgent:getObstacleAvoidanceType()
cc.NavMeshAgent:getVelocity()
cc.NavMeshAgent:setRadius(float_radius)
cc.NavMeshAgent:setObstacleAvoidanceType(unsigned_char_type)
cc.NavMeshAgent:getNavMeshAgentComponentName()
cc.NavMeshAgent:create(const_NavMeshAgentParam_param)
cc.NavMeshObstacle
cc.NavMeshObstacle:getSyncFlag()
cc.NavMeshObstacle:initWith(float_radius,float_height)
cc.NavMeshObstacle:syncToObstacle()
cc.NavMeshObstacle:syncToNode()
cc.NavMeshObstacle:getHeight()
cc.NavMeshObstacle:setSyncFlag(const_NavMeshObstacleSyncFlag_flag)
cc.NavMeshObstacle:getRadius()
cc.NavMeshObstacle:create(float_radius,float_height)
cc.NavMeshObstacle:getNavMeshObstacleComponentName()
cc.NavMesh
cc.NavMesh:removeNavMeshObstacle(NavMeshObstacle_obstacle)
cc.NavMesh:removeNavMeshAgent(NavMeshAgent_agent)
cc.NavMesh:update(float_dt)
cc.NavMesh:isDebugDrawEnabled()
cc.NavMesh:addNavMeshAgent(NavMeshAgent_agent)
cc.NavMesh:addNavMeshObstacle(NavMeshObstacle_obstacle)
cc.NavMesh:setDebugDrawEnable(bool_enable)
cc.NavMesh:debugDraw(Renderer_renderer)
cc.NavMesh:create(const_std_string_navFilePath,const_std_string_geomFilePath)
cc.Physics3DShape
cc.Physics3DShape:getbtShape()
cc.Physics3DShape:initSphere(float_radius)
cc.Physics3DShape:initBox(const_cocos2d_Vec3_ext)
cc.Physics3DShape:initCapsule(float_radius,float_height)
cc.Physics3DShape:initCylinder(float_radius,float_height)
cc.Physics3DShape:getShapeType()
cc.Physics3DShape:createBox(const_cocos2d_Vec3_extent)
cc.Physics3DShape:createCylinder(float_radius,float_height)
cc.Physics3DShape:createConvexHull(const_cocos2d_Vec3_points,int_numPoints)
cc.Physics3DShape:createCapsule(float_radius,float_height)
cc.Physics3DShape:createSphere(float_radius)
cc.Physics3DObject
cc.Physics3DObject:setUserData(void_userData)
cc.Physics3DObject:getUserData()
cc.Physics3DObject:getObjType()
cc.Physics3DObject:setPhysicsWorld(Physics3DWorld_world)
cc.Physics3DObject:getWorldTransform()
cc.Physics3DObject:getPhysicsWorld()
cc.Physics3DObject:setMask(unsigned_int_mask)
cc.Physics3DObject:getCollisionCallback()
cc.Physics3DObject:getMask()
cc.Physics3DObject:needCollisionCallback()
cc.Physics3DRigidBody
cc.Physics3DRigidBody:setGravity(const_cocos2d_Vec3_acceleration)
cc.Physics3DRigidBody:getFriction()
cc.Physics3DRigidBody:setAngularFactor(const_cocos2d_Vec3_angFac)
cc.Physics3DRigidBody:setAngularFactor(float_angFac)
cc.Physics3DRigidBody:addConstraint(Physics3DConstraint_constraint)
cc.Physics3DRigidBody:getRigidBody()
cc.Physics3DRigidBody:getTotalForce()
cc.Physics3DRigidBody:getConstraintCount()
cc.Physics3DRigidBody:applyCentralForce(const_cocos2d_Vec3_force)
cc.Physics3DRigidBody:setMassProps(float_mass,const_cocos2d_Vec3_inertia)
cc.Physics3DRigidBody:setFriction(float_frict)
cc.Physics3DRigidBody:setKinematic(bool_kinematic)
cc.Physics3DRigidBody:setDamping(float_lin_damping,float_ang_damping)
cc.Physics3DRigidBody:applyImpulse(const_cocos2d_Vec3_impulse,const_cocos2d_Vec3_rel_pos)
cc.Physics3DRigidBody:isKinematic()
cc.Physics3DRigidBody:applyTorque(const_cocos2d_Vec3_torque)
cc.Physics3DRigidBody:setCcdMotionThreshold(float_ccdMotionThreshold)
cc.Physics3DRigidBody:setRollingFriction(float_frict)
cc.Physics3DRigidBody:getCcdMotionThreshold()
cc.Physics3DRigidBody:getLinearFactor()
cc.Physics3DRigidBody:applyDamping(float_timeStep)
cc.Physics3DRigidBody:getAngularVelocity()
cc.Physics3DRigidBody:init(Physics3DRigidBodyDes_info)
cc.Physics3DRigidBody:applyTorqueImpulse(const_cocos2d_Vec3_torque)
cc.Physics3DRigidBody:setActive(bool_active)
cc.Physics3DRigidBody:setLinearFactor(const_cocos2d_Vec3_linearFactor)
cc.Physics3DRigidBody:setLinearVelocity(const_cocos2d_Vec3_lin_vel)
cc.Physics3DRigidBody:getLinearVelocity()
cc.Physics3DRigidBody:setCcdSweptSphereRadius(float_radius)
cc.Physics3DRigidBody:applyForce(const_cocos2d_Vec3_force,const_cocos2d_Vec3_rel_pos)
cc.Physics3DRigidBody:setAngularVelocity(const_cocos2d_Vec3_ang_vel)
cc.Physics3DRigidBody:applyCentralImpulse(const_cocos2d_Vec3_impulse)
cc.Physics3DRigidBody:getGravity()
cc.Physics3DRigidBody:getRollingFriction()
cc.Physics3DRigidBody:setCenterOfMassTransform(const_cocos2d_Mat4_xform)
cc.Physics3DRigidBody:setInvInertiaDiagLocal(const_cocos2d_Vec3_diagInvInertia)
cc.Physics3DRigidBody:removeConstraint(Physics3DConstraint_constraint)
cc.Physics3DRigidBody:getTotalTorque()
cc.Physics3DRigidBody:getInvMass()
cc.Physics3DRigidBody:getConstraint(unsigned_int_idx)
cc.Physics3DRigidBody:getRestitution()
cc.Physics3DRigidBody:getCcdSweptSphereRadius()
cc.Physics3DRigidBody:getHitFraction()
cc.Physics3DRigidBody:getAngularDamping()
cc.Physics3DRigidBody:getInvInertiaDiagLocal()
cc.Physics3DRigidBody:getCenterOfMassTransform()
cc.Physics3DRigidBody:getAngularFactor()
cc.Physics3DRigidBody:setRestitution(float_rest)
cc.Physics3DRigidBody:setHitFraction(float_hitFraction)
cc.Physics3DRigidBody:getLinearDamping()
cc.Physics3DComponent
cc.Physics3DComponent:syncNodeToPhysics()
cc.Physics3DComponent:addToPhysicsWorld(Physics3DWorld_world)
cc.Physics3DComponent:syncPhysicsToNode()
cc.Physics3DComponent:getPhysics3DObject()
cc.Physics3DComponent:setPhysics3DObject(Physics3DObject_physicsObj)
cc.Physics3DComponent:setSyncFlag(PhysicsSyncFlag_syncFlag)
cc.Physics3DComponent:getPhysics3DComponentName()
cc.PhysicsSprite3D
cc.PhysicsSprite3D:syncNodeToPhysics()
cc.PhysicsSprite3D:syncPhysicsToNode()
cc.PhysicsSprite3D:getPhysicsObj()
cc.PhysicsSprite3D:setSyncFlag(Physics3DComponent_PhysicsSyncFlag_syncFlag)
cc.Physics3DWorld
cc.Physics3DWorld:setGravity(const_Vec3_gravity)
cc.Physics3DWorld:stepSimulate(float_dt)
cc.Physics3DWorld:needCollisionChecking()
cc.Physics3DWorld:collisionChecking()
cc.Physics3DWorld:setGhostPairCallback()
cc.Physics3DWorld:removeAllPhysics3DObjects()
cc.Physics3DWorld:isDebugDrawEnabled()
cc.Physics3DWorld:removeAllPhysics3DConstraints()
cc.Physics3DWorld:getGravity()
cc.Physics3DWorld:removePhysics3DConstraint(Physics3DConstraint_constraint)
cc.Physics3DWorld:addPhysics3DObject(Physics3DObject_physicsObj)
cc.Physics3DWorld:setDebugDrawEnable(bool_enableDebugDraw)
cc.Physics3DWorld:removePhysics3DObject(Physics3DObject_physicsObj)
cc.Physics3DWorld:addPhysics3DConstraint(Physics3DConstraint_constraint,bool_disableCollisionsBetweenLinkedObjs)
cc.Physics3DWorld:debugDraw(cocos2d_Renderer_renderer)
cc.Physics3DConstraint
cc.Physics3DConstraint:setEnabled(bool_enabled)
cc.Physics3DConstraint:setBreakingImpulse(float_impulse)
cc.Physics3DConstraint:getUserData()
cc.Physics3DConstraint:getBreakingImpulse()
cc.Physics3DConstraint:getBodyA()
cc.Physics3DConstraint:isEnabled()
cc.Physics3DConstraint:getOverrideNumSolverIterations()
cc.Physics3DConstraint:getBodyB()
cc.Physics3DConstraint:setOverrideNumSolverIterations(int_overrideNumIterations)
cc.Physics3DConstraint:getConstraintType()
cc.Physics3DConstraint:setUserData(void_userData)
cc.Physics3DConstraint:getbtContraint()
cc.Physics3DPointToPointConstraint
cc.Physics3DPointToPointConstraint:getPivotPointInA()
cc.Physics3DPointToPointConstraint:getPivotPointInB()
cc.Physics3DPointToPointConstraint:init(Physics3DRigidBody_rbA,const_cocos2d_Vec3_pivotPointInA)
cc.Physics3DPointToPointConstraint:setPivotPointInA(const_cocos2d_Vec3_pivotA)
cc.Physics3DPointToPointConstraint:setPivotPointInB(const_cocos2d_Vec3_pivotB)
cc.Physics3DPointToPointConstraint:create(Physics3DRigidBody_rbA,const_cocos2d_Vec3_pivotPointInA)
cc.Physics3DPointToPointConstraint:create(Physics3DRigidBody_rbA,Physics3DRigidBody_rbB,const_cocos2d_Vec3_pivotPointInA,const_cocos2d_Vec3_pivotPointInB)
cc.Physics3DHingeConstraint
cc.Physics3DHingeConstraint:getHingeAngle()
cc.Physics3DHingeConstraint:getHingeAngle(const_cocos2d_Mat4_transA,const_cocos2d_Mat4_transB)
cc.Physics3DHingeConstraint:getMotorTargetVelosity()
cc.Physics3DHingeConstraint:getFrameOffsetA()
cc.Physics3DHingeConstraint:getFrameOffsetB()
cc.Physics3DHingeConstraint:setMaxMotorImpulse(float_maxMotorImpulse)
cc.Physics3DHingeConstraint:enableAngularMotor(bool_enableMotor,float_targetVelocity,float_maxMotorImpulse)
cc.Physics3DHingeConstraint:getUpperLimit()
cc.Physics3DHingeConstraint:getMaxMotorImpulse()
cc.Physics3DHingeConstraint:getLowerLimit()
cc.Physics3DHingeConstraint:setUseFrameOffset(bool_frameOffsetOnOff)
cc.Physics3DHingeConstraint:getEnableAngularMotor()
cc.Physics3DHingeConstraint:enableMotor(bool_enableMotor)
cc.Physics3DHingeConstraint:getBFrame()
cc.Physics3DHingeConstraint:setFrames(const_cocos2d_Mat4_frameA,const_cocos2d_Mat4_frameB)
cc.Physics3DHingeConstraint:getUseFrameOffset()
cc.Physics3DHingeConstraint:setAngularOnly(bool_angularOnly)
cc.Physics3DHingeConstraint:setLimit(float_low,float_high,float__softness,float__biasFactor,float__relaxationFactor)
cc.Physics3DHingeConstraint:getAngularOnly()
cc.Physics3DHingeConstraint:setAxis(const_cocos2d_Vec3_axisInA)
cc.Physics3DHingeConstraint:getAFrame()
cc.Physics3DHingeConstraint:create(Physics3DRigidBody_rbA,const_cocos2d_Mat4_rbAFrame,bool_useReferenceFrameA)
cc.Physics3DHingeConstraint:create(Physics3DRigidBody_rbA,const_cocos2d_Vec3_pivotInA,const_cocos2d_Vec3_axisInA,bool_useReferenceFrameA)
cc.Physics3DHingeConstraint:create(Physics3DRigidBody_rbA,Physics3DRigidBody_rbB,const_cocos2d_Vec3_pivotInA,const_cocos2d_Vec3_pivotInB,cocos2d_Vec3_axisInA,cocos2d_Vec3_axisInB,bool_useReferenceFrameA)
cc.Physics3DHingeConstraint:create(Physics3DRigidBody_rbA,Physics3DRigidBody_rbB,const_cocos2d_Mat4_rbAFrame,const_cocos2d_Mat4_rbBFrame,bool_useReferenceFrameA)
cc.Physics3DSliderConstraint
cc.Physics3DSliderConstraint:setPoweredAngMotor(bool_onOff)
cc.Physics3DSliderConstraint:getDampingLimAng()
cc.Physics3DSliderConstraint:setRestitutionOrthoLin(float_restitutionOrthoLin)
cc.Physics3DSliderConstraint:setRestitutionDirLin(float_restitutionDirLin)
cc.Physics3DSliderConstraint:getLinearPos()
cc.Physics3DSliderConstraint:getFrameOffsetA()
cc.Physics3DSliderConstraint:getFrameOffsetB()
cc.Physics3DSliderConstraint:setPoweredLinMotor(bool_onOff)
cc.Physics3DSliderConstraint:getDampingDirAng()
cc.Physics3DSliderConstraint:getRestitutionLimLin()
cc.Physics3DSliderConstraint:getSoftnessOrthoAng()
cc.Physics3DSliderConstraint:setSoftnessOrthoLin(float_softnessOrthoLin)
cc.Physics3DSliderConstraint:setSoftnessLimLin(float_softnessLimLin)
cc.Physics3DSliderConstraint:getAngularPos()
cc.Physics3DSliderConstraint:setRestitutionLimAng(float_restitutionLimAng)
cc.Physics3DSliderConstraint:setUpperLinLimit(float_upperLimit)
cc.Physics3DSliderConstraint:setDampingDirLin(float_dampingDirLin)
cc.Physics3DSliderConstraint:getUpperAngLimit()
cc.Physics3DSliderConstraint:getDampingDirLin()
cc.Physics3DSliderConstraint:getSoftnessDirAng()
cc.Physics3DSliderConstraint:getPoweredAngMotor()
cc.Physics3DSliderConstraint:setLowerAngLimit(float_lowerLimit)
cc.Physics3DSliderConstraint:setUpperAngLimit(float_upperLimit)
cc.Physics3DSliderConstraint:setTargetLinMotorVelocity(float_targetLinMotorVelocity)
cc.Physics3DSliderConstraint:setDampingLimAng(float_dampingLimAng)
cc.Physics3DSliderConstraint:getRestitutionLimAng()
cc.Physics3DSliderConstraint:getUseFrameOffset()
cc.Physics3DSliderConstraint:getSoftnessOrthoLin()
cc.Physics3DSliderConstraint:getDampingOrthoAng()
cc.Physics3DSliderConstraint:setUseFrameOffset(bool_frameOffsetOnOff)
cc.Physics3DSliderConstraint:setLowerLinLimit(float_lowerLimit)
cc.Physics3DSliderConstraint:getRestitutionDirLin()
cc.Physics3DSliderConstraint:getTargetLinMotorVelocity()
cc.Physics3DSliderConstraint:getLowerLinLimit()
cc.Physics3DSliderConstraint:getSoftnessLimLin()
cc.Physics3DSliderConstraint:setDampingOrthoAng(float_dampingOrthoAng)
cc.Physics3DSliderConstraint:setSoftnessDirAng(float_softnessDirAng)
cc.Physics3DSliderConstraint:getPoweredLinMotor()
cc.Physics3DSliderConstraint:setRestitutionOrthoAng(float_restitutionOrthoAng)
cc.Physics3DSliderConstraint:setDampingDirAng(float_dampingDirAng)
cc.Physics3DSliderConstraint:setFrames(const_cocos2d_Mat4_frameA,const_cocos2d_Mat4_frameB)
cc.Physics3DSliderConstraint:getRestitutionOrthoAng()
cc.Physics3DSliderConstraint:getMaxAngMotorForce()
cc.Physics3DSliderConstraint:getDampingOrthoLin()
cc.Physics3DSliderConstraint:getUpperLinLimit()
cc.Physics3DSliderConstraint:setMaxLinMotorForce(float_maxLinMotorForce)
cc.Physics3DSliderConstraint:getRestitutionOrthoLin()
cc.Physics3DSliderConstraint:setTargetAngMotorVelocity(float_targetAngMotorVelocity)
cc.Physics3DSliderConstraint:getSoftnessLimAng()
cc.Physics3DSliderConstraint:setRestitutionDirAng(float_restitutionDirAng)
cc.Physics3DSliderConstraint:getDampingLimLin()
cc.Physics3DSliderConstraint:getLowerAngLimit()
cc.Physics3DSliderConstraint:getRestitutionDirAng()
cc.Physics3DSliderConstraint:getTargetAngMotorVelocity()
cc.Physics3DSliderConstraint:setRestitutionLimLin(float_restitutionLimLin)
cc.Physics3DSliderConstraint:getMaxLinMotorForce()
cc.Physics3DSliderConstraint:setDampingOrthoLin(float_dampingOrthoLin)
cc.Physics3DSliderConstraint:setSoftnessOrthoAng(float_softnessOrthoAng)
cc.Physics3DSliderConstraint:setDampingLimLin(float_dampingLimLin)
cc.Physics3DSliderConstraint:setSoftnessDirLin(float_softnessDirLin)
cc.Physics3DSliderConstraint:setMaxAngMotorForce(float_maxAngMotorForce)
cc.Physics3DSliderConstraint:getSoftnessDirLin()
cc.Physics3DSliderConstraint:setSoftnessLimAng(float_softnessLimAng)
cc.Physics3DSliderConstraint:getUseLinearReferenceFrameA()
cc.Physics3DSliderConstraint:create(Physics3DRigidBody_rbA,Physics3DRigidBody_rbB,const_cocos2d_Mat4_frameInA,const_cocos2d_Mat4_frameInB,bool_useLinearReferenceFrameA)
cc.Physics3DConeTwistConstraint
cc.Physics3DConeTwistConstraint:getBFrame()
cc.Physics3DConeTwistConstraint:setFixThresh(float_fixThresh)
cc.Physics3DConeTwistConstraint:getFrameOffsetB()
cc.Physics3DConeTwistConstraint:getFrameOffsetA()
cc.Physics3DConeTwistConstraint:getFixThresh()
cc.Physics3DConeTwistConstraint:getSwingSpan2()
cc.Physics3DConeTwistConstraint:getSwingSpan1()
cc.Physics3DConeTwistConstraint:setMaxMotorImpulse(float_maxMotorImpulse)
cc.Physics3DConeTwistConstraint:setFrames(const_cocos2d_Mat4_frameA,const_cocos2d_Mat4_frameB)
cc.Physics3DConeTwistConstraint:getTwistAngle()
cc.Physics3DConeTwistConstraint:GetPointForAngle(float_fAngleInRadians,float_fLength)
cc.Physics3DConeTwistConstraint:setMaxMotorImpulseNormalized(float_maxMotorImpulse)
cc.Physics3DConeTwistConstraint:getTwistSpan()
cc.Physics3DConeTwistConstraint:setDamping(float_damping)
cc.Physics3DConeTwistConstraint:setLimit(float_swingSpan1,float_swingSpan2,float_twistSpan,float_softness,float_biasFactor,float_relaxationFactor)
cc.Physics3DConeTwistConstraint:getAFrame()
cc.Physics3DConeTwistConstraint:enableMotor(bool_b)
cc.Physics3DConeTwistConstraint:create(Physics3DRigidBody_rbA,const_cocos2d_Mat4_frameA)
cc.Physics3DConeTwistConstraint:create(Physics3DRigidBody_rbA,Physics3DRigidBody_rbB,const_cocos2d_Mat4_frameA,const_cocos2d_Mat4_frameB)
cc.Physics3D6DofConstraint
cc.Physics3D6DofConstraint:setLinearLowerLimit(const_cocos2d_Vec3_linearLower)
cc.Physics3D6DofConstraint:getLinearLowerLimit()
cc.Physics3D6DofConstraint:getAngularUpperLimit()
cc.Physics3D6DofConstraint:getUseFrameOffset()
cc.Physics3D6DofConstraint:getLinearUpperLimit()
cc.Physics3D6DofConstraint:setAngularLowerLimit(const_cocos2d_Vec3_angularLower)
cc.Physics3D6DofConstraint:isLimited(int_limitIndex)
cc.Physics3D6DofConstraint:setUseFrameOffset(bool_frameOffsetOnOff)
cc.Physics3D6DofConstraint:setLinearUpperLimit(const_cocos2d_Vec3_linearUpper)
cc.Physics3D6DofConstraint:getAngularLowerLimit()
cc.Physics3D6DofConstraint:setAngularUpperLimit(const_cocos2d_Vec3_angularUpper)
cc.Physics3D6DofConstraint:create(Physics3DRigidBody_rbA,Physics3DRigidBody_rbB,const_cocos2d_Mat4_frameInA,const_cocos2d_Mat4_frameInB,bool_useLinearReferenceFrameA)
cc.Physics3D6DofConstraint:create(Physics3DRigidBody_rbB,const_cocos2d_Mat4_frameInB,bool_useLinearReferenceFrameB)
cc.PhysicsShape
cc.PhysicsShape:getFriction()
cc.PhysicsShape:setGroup(int_group)
cc.PhysicsShape:setDensity(float_density)
cc.PhysicsShape:getMass()
cc.PhysicsShape:getMaterial()
cc.PhysicsShape:setSensor(bool_sensor)
cc.PhysicsShape:getCollisionBitmask()
cc.PhysicsShape:getArea()
cc.PhysicsShape:setCategoryBitmask(int_bitmask)
cc.PhysicsShape:getGroup()
cc.PhysicsShape:setMoment(float_moment)
cc.PhysicsShape:containsPoint(const_Vec2_point)
cc.PhysicsShape:getCategoryBitmask()
cc.PhysicsShape:isSensor()
cc.PhysicsShape:getType()
cc.PhysicsShape:getContactTestBitmask()
cc.PhysicsShape:getCenter()
cc.PhysicsShape:getDensity()
cc.PhysicsShape:setMass(float_mass)
cc.PhysicsShape:getTag()
cc.PhysicsShape:calculateDefaultMoment()
cc.PhysicsShape:setCollisionBitmask(int_bitmask)
cc.PhysicsShape:getMoment()
cc.PhysicsShape:getOffset()
cc.PhysicsShape:getRestitution()
cc.PhysicsShape:setFriction(float_friction)
cc.PhysicsShape:setMaterial(const_PhysicsMaterial_material)
cc.PhysicsShape:setTag(int_tag)
cc.PhysicsShape:setContactTestBitmask(int_bitmask)
cc.PhysicsShape:setRestitution(float_restitution)
cc.PhysicsShape:getBody()
cc.PhysicsShapeCircle
cc.PhysicsShapeCircle:getRadius()
cc.PhysicsShapeCircle:create(float_radius,const_PhysicsMaterial_material,const_Vec2_offset)
cc.PhysicsShapeCircle:calculateArea(float_radius)
cc.PhysicsShapeCircle:calculateArea()
cc.PhysicsShapeCircle:calculateMoment(float_mass,float_radius,const_Vec2_offset)
cc.PhysicsShapePolygon
cc.PhysicsShapePolygon:getPointsCount()
cc.PhysicsShapePolygon:getPoint(int_i)
cc.PhysicsShapeBox
cc.PhysicsShapeBox:getSize()
cc.PhysicsShapeBox:create(const_Size_size,const_PhysicsMaterial_material,const_Vec2_offset,float_radius)
cc.PhysicsShapeEdgeSegment
cc.PhysicsShapeEdgeSegment:getPointB()
cc.PhysicsShapeEdgeSegment:getPointA()
cc.PhysicsShapeEdgeSegment:create(const_Vec2_a,const_Vec2_b,const_PhysicsMaterial_material,float_border)
cc.PhysicsShapeEdgePolygon
cc.PhysicsShapeEdgePolygon:getPointsCount()
cc.PhysicsShapeEdgeBox
cc.PhysicsShapeEdgeBox:create(const_Size_size,const_PhysicsMaterial_material,float_border,const_Vec2_offset)
cc.PhysicsShapeEdgeChain
cc.PhysicsShapeEdgeChain:getPointsCount()
cc.PhysicsBody
cc.PhysicsBody:isGravityEnabled()
cc.PhysicsBody:resetForces()
cc.PhysicsBody:getVelocityLimit()
cc.PhysicsBody:setGroup(int_group)
cc.PhysicsBody:getMass()
cc.PhysicsBody:getCollisionBitmask()
cc.PhysicsBody:getRotationOffset()
cc.PhysicsBody:getRotation()
cc.PhysicsBody:getMoment()
cc.PhysicsBody:applyImpulse(const_Vec2_impulse,const_Vec2_offset)
cc.PhysicsBody:setRotationOffset(float_rotation)
cc.PhysicsBody:applyForce(const_Vec2_force,const_Vec2_offset)
cc.PhysicsBody:addShape(PhysicsShape_shape,bool_addMassAndMoment)
cc.PhysicsBody:applyTorque(float_torque)
cc.PhysicsBody:getAngularVelocityLimit()
cc.PhysicsBody:setAngularVelocityLimit(float_limit)
cc.PhysicsBody:getVelocity()
cc.PhysicsBody:getLinearDamping()
cc.PhysicsBody:removeAllShapes(bool_reduceMassAndMoment)
cc.PhysicsBody:setAngularDamping(float_damping)
cc.PhysicsBody:setVelocityLimit(float_limit)
cc.PhysicsBody:setResting(bool_rest)
cc.PhysicsBody:getPositionOffset()
cc.PhysicsBody:setCategoryBitmask(int_bitmask)
cc.PhysicsBody:getWorld()
cc.PhysicsBody:getAngularVelocity()
cc.PhysicsBody:getPosition()
cc.PhysicsBody:setGravityEnable(bool_enable)
cc.PhysicsBody:getGroup()
cc.PhysicsBody:setMoment(float_moment)
cc.PhysicsBody:getTag()
cc.PhysicsBody:local2World(const_Vec2_point)
cc.PhysicsBody:getCategoryBitmask()
cc.PhysicsBody:setDynamic(bool_dynamic)
cc.PhysicsBody:getFirstShape()
cc.PhysicsBody:getShapes()
cc.PhysicsBody:getContactTestBitmask()
cc.PhysicsBody:setAngularVelocity(float_velocity)
cc.PhysicsBody:world2Local(const_Vec2_point)
cc.PhysicsBody:removeShape(PhysicsShape_shape,bool_reduceMassAndMoment)
cc.PhysicsBody:removeShape(int_tag,bool_reduceMassAndMoment)
cc.PhysicsBody:setMass(float_mass)
cc.PhysicsBody:addMoment(float_moment)
cc.PhysicsBody:setVelocity(const_Vec2_velocity)
cc.PhysicsBody:setLinearDamping(float_damping)
cc.PhysicsBody:setCollisionBitmask(int_bitmask)
cc.PhysicsBody:setPositionOffset(const_Vec2_position)
cc.PhysicsBody:setRotationEnable(bool_enable)
cc.PhysicsBody:isRotationEnabled()
cc.PhysicsBody:getCPBody()
cc.PhysicsBody:getAngularDamping()
cc.PhysicsBody:getVelocityAtLocalPoint(const_Vec2_point)
cc.PhysicsBody:isResting()
cc.PhysicsBody:addMass(float_mass)
cc.PhysicsBody:getShape(int_tag)
cc.PhysicsBody:setTag(int_tag)
cc.PhysicsBody:getVelocityAtWorldPoint(const_Vec2_point)
cc.PhysicsBody:setContactTestBitmask(int_bitmask)
cc.PhysicsBody:removeFromWorld()
cc.PhysicsBody:isDynamic()
cc.PhysicsBody:getNode()
cc.PhysicsBody:createBox(const_Size_size,const_PhysicsMaterial_material,const_Vec2_offset)
cc.PhysicsBody:createEdgeSegment(const_Vec2_a,const_Vec2_b,const_PhysicsMaterial_material,float_border)
cc.PhysicsBody:create()
cc.PhysicsBody:create(float_mass)
cc.PhysicsBody:create(float_mass,float_moment)
cc.PhysicsBody:createEdgeBox(const_Size_size,const_PhysicsMaterial_material,float_border,const_Vec2_offset)
cc.PhysicsBody:createCircle(float_radius,const_PhysicsMaterial_material,const_Vec2_offset)
cc.PhysicsContact
cc.PhysicsContact:getContactData()
cc.PhysicsContact:getEventCode()
cc.PhysicsContact:getPreContactData()
cc.PhysicsContact:getShapeA()
cc.PhysicsContact:getShapeB()
cc.PhysicsContactPreSolve
cc.PhysicsContactPreSolve:getFriction()
cc.PhysicsContactPreSolve:getRestitution()
cc.PhysicsContactPreSolve:setFriction(float_friction)
cc.PhysicsContactPreSolve:ignore()
cc.PhysicsContactPreSolve:getSurfaceVelocity()
cc.PhysicsContactPreSolve:setSurfaceVelocity(const_Vec2_velocity)
cc.PhysicsContactPreSolve:setRestitution(float_restitution)
cc.PhysicsContactPostSolve
cc.PhysicsContactPostSolve:getFriction()
cc.PhysicsContactPostSolve:getSurfaceVelocity()
cc.PhysicsContactPostSolve:getRestitution()
cc.EventListenerPhysicsContact
cc.EventListenerPhysicsContact:create()
cc.EventListenerPhysicsContactWithBodies
cc.EventListenerPhysicsContactWithBodies:hitTest(PhysicsShape_shapeA,PhysicsShape_shapeB)
cc.EventListenerPhysicsContactWithBodies:create(PhysicsBody_bodyA,PhysicsBody_bodyB)
cc.EventListenerPhysicsContactWithShapes
cc.EventListenerPhysicsContactWithShapes:hitTest(PhysicsShape_shapeA,PhysicsShape_shapeB)
cc.EventListenerPhysicsContactWithShapes:create(PhysicsShape_shapeA,PhysicsShape_shapeB)
cc.EventListenerPhysicsContactWithGroup
cc.EventListenerPhysicsContactWithGroup:hitTest(PhysicsShape_shapeA,PhysicsShape_shapeB)
cc.EventListenerPhysicsContactWithGroup:create(int_group)
cc.PhysicsJoint
cc.PhysicsJoint:getBodyA()
cc.PhysicsJoint:getBodyB()
cc.PhysicsJoint:getMaxForce()
cc.PhysicsJoint:setMaxForce(float_force)
cc.PhysicsJoint:isEnabled()
cc.PhysicsJoint:setEnable(bool_enable)
cc.PhysicsJoint:setCollisionEnable(bool_enable)
cc.PhysicsJoint:getWorld()
cc.PhysicsJoint:setTag(int_tag)
cc.PhysicsJoint:removeFormWorld()
cc.PhysicsJoint:isCollisionEnabled()
cc.PhysicsJoint:getTag()
cc.PhysicsJointFixed
cc.PhysicsJointFixed:createConstraints()
cc.PhysicsJointFixed:construct(PhysicsBody_a,PhysicsBody_b,const_Vec2_anchr)
cc.PhysicsJointLimit
cc.PhysicsJointLimit:setAnchr2(const_Vec2_anchr2)
cc.PhysicsJointLimit:setAnchr1(const_Vec2_anchr1)
cc.PhysicsJointLimit:setMax(float_max)
cc.PhysicsJointLimit:getAnchr2()
cc.PhysicsJointLimit:getAnchr1()
cc.PhysicsJointLimit:createConstraints()
cc.PhysicsJointLimit:getMin()
cc.PhysicsJointLimit:getMax()
cc.PhysicsJointLimit:setMin(float_min)
cc.PhysicsJointLimit:construct(PhysicsBody_a,PhysicsBody_b,const_Vec2_anchr1,const_Vec2_anchr2)
cc.PhysicsJointLimit:construct(PhysicsBody_a,PhysicsBody_b,const_Vec2_anchr1,const_Vec2_anchr2,float_min,float_max)
cc.PhysicsJointPin
cc.PhysicsJointPin:createConstraints()
cc.PhysicsJointPin:construct(PhysicsBody_a,PhysicsBody_b,const_Vec2_pivot)
cc.PhysicsJointPin:construct(PhysicsBody_a,PhysicsBody_b,const_Vec2_anchr1,const_Vec2_anchr2)
cc.PhysicsJointDistance
cc.PhysicsJointDistance:createConstraints()
cc.PhysicsJointDistance:setDistance(float_distance)
cc.PhysicsJointDistance:getDistance()
cc.PhysicsJointDistance:construct(PhysicsBody_a,PhysicsBody_b,const_Vec2_anchr1,const_Vec2_anchr2)
cc.PhysicsJointSpring
cc.PhysicsJointSpring:setAnchr2(const_Vec2_anchr2)
cc.PhysicsJointSpring:setAnchr1(const_Vec2_anchr1)
cc.PhysicsJointSpring:getDamping()
cc.PhysicsJointSpring:setStiffness(float_stiffness)
cc.PhysicsJointSpring:getRestLength()
cc.PhysicsJointSpring:getAnchr2()
cc.PhysicsJointSpring:getAnchr1()
cc.PhysicsJointSpring:getStiffness()
cc.PhysicsJointSpring:createConstraints()
cc.PhysicsJointSpring:setRestLength(float_restLength)
cc.PhysicsJointSpring:setDamping(float_damping)
cc.PhysicsJointSpring:construct(PhysicsBody_a,PhysicsBody_b,const_Vec2_anchr1,const_Vec2_anchr2,float_stiffness,float_damping)
cc.PhysicsJointGroove
cc.PhysicsJointGroove:setAnchr2(const_Vec2_anchr2)
cc.PhysicsJointGroove:setGrooveA(const_Vec2_grooveA)
cc.PhysicsJointGroove:setGrooveB(const_Vec2_grooveB)
cc.PhysicsJointGroove:getGrooveA()
cc.PhysicsJointGroove:getGrooveB()
cc.PhysicsJointGroove:getAnchr2()
cc.PhysicsJointGroove:createConstraints()
cc.PhysicsJointGroove:construct(PhysicsBody_a,PhysicsBody_b,const_Vec2_grooveA,const_Vec2_grooveB,const_Vec2_anchr2)
cc.PhysicsJointRotarySpring
cc.PhysicsJointRotarySpring:getDamping()
cc.PhysicsJointRotarySpring:setRestAngle(float_restAngle)
cc.PhysicsJointRotarySpring:getStiffness()
cc.PhysicsJointRotarySpring:createConstraints()
cc.PhysicsJointRotarySpring:setStiffness(float_stiffness)
cc.PhysicsJointRotarySpring:setDamping(float_damping)
cc.PhysicsJointRotarySpring:getRestAngle()
cc.PhysicsJointRotarySpring:construct(PhysicsBody_a,PhysicsBody_b,float_stiffness,float_damping)
cc.PhysicsJointRotaryLimit
cc.PhysicsJointRotaryLimit:getMax()
cc.PhysicsJointRotaryLimit:createConstraints()
cc.PhysicsJointRotaryLimit:setMin(float_min)
cc.PhysicsJointRotaryLimit:setMax(float_max)
cc.PhysicsJointRotaryLimit:getMin()
cc.PhysicsJointRotaryLimit:construct(PhysicsBody_a,PhysicsBody_b,float_min,float_max)
cc.PhysicsJointRotaryLimit:construct(PhysicsBody_a,PhysicsBody_b)
cc.PhysicsJointRatchet
cc.PhysicsJointRatchet:getAngle()
cc.PhysicsJointRatchet:setAngle(float_angle)
cc.PhysicsJointRatchet:createConstraints()
cc.PhysicsJointRatchet:setPhase(float_phase)
cc.PhysicsJointRatchet:getPhase()
cc.PhysicsJointRatchet:setRatchet(float_ratchet)
cc.PhysicsJointRatchet:getRatchet()
cc.PhysicsJointRatchet:construct(PhysicsBody_a,PhysicsBody_b,float_phase,float_ratchet)
cc.PhysicsJointGear
cc.PhysicsJointGear:setRatio(float_ratchet)
cc.PhysicsJointGear:getPhase()
cc.PhysicsJointGear:setPhase(float_phase)
cc.PhysicsJointGear:createConstraints()
cc.PhysicsJointGear:getRatio()
cc.PhysicsJointGear:construct(PhysicsBody_a,PhysicsBody_b,float_phase,float_ratio)
cc.PhysicsJointMotor
cc.PhysicsJointMotor:setRate(float_rate)
cc.PhysicsJointMotor:getRate()
cc.PhysicsJointMotor:createConstraints()
cc.PhysicsJointMotor:construct(PhysicsBody_a,PhysicsBody_b,float_rate)
cc.PhysicsWorld
cc.PhysicsWorld:setGravity(const_Vec2_gravity)
cc.PhysicsWorld:getAllBodies()
cc.PhysicsWorld:setFixedUpdateRate(int_updatesPerSecond)
cc.PhysicsWorld:setSubsteps(int_steps)
cc.PhysicsWorld:setAutoStep(bool_autoStep)
cc.PhysicsWorld:addJoint(PhysicsJoint_joint)
cc.PhysicsWorld:removeAllJoints(bool_destroy)
cc.PhysicsWorld:getDebugDrawMask()
cc.PhysicsWorld:isAutoStep()
cc.PhysicsWorld:removeBody(PhysicsBody_body)
cc.PhysicsWorld:removeBody(int_tag)
cc.PhysicsWorld:removeJoint(PhysicsJoint_joint,bool_destroy)
cc.PhysicsWorld:getShapes(const_Vec2_point)
cc.PhysicsWorld:step(float_delta)
cc.PhysicsWorld:setDebugDrawMask(int_mask)
cc.PhysicsWorld:getGravity()
cc.PhysicsWorld:setUpdateRate(int_rate)
cc.PhysicsWorld:getFixedUpdateRate()
cc.PhysicsWorld:getSubsteps()
cc.PhysicsWorld:getSpeed()
cc.PhysicsWorld:getUpdateRate()
cc.PhysicsWorld:removeAllBodies()
cc.PhysicsWorld:setSpeed(float_speed)
cc.PhysicsWorld:getShape(const_Vec2_point)
cc.PhysicsWorld:getBody(int_tag)
sp.SkeletonRenderer
sp.SkeletonRenderer:setTimeScale(float_scale)
sp.SkeletonRenderer:getDebugSlotsEnabled()
sp.SkeletonRenderer:setDebugSlotsEnabled(bool_enabled)
sp.SkeletonRenderer:setDebugBonesEnabled(bool_enabled)
sp.SkeletonRenderer:getDebugBonesEnabled()
sp.SkeletonRenderer:getTimeScale()
sp.SkeletonRenderer:getSkeleton()
sp.SkeletonAnimation
sp.SkeletonAnimation:findAnimation(const_std_string_name)
ccs.ActionFrame
ccs.ActionFrame:getAction(float_duration)
ccs.ActionFrame:getAction(float_duration,ActionFrame_srcFrame)
ccs.ActionFrame:getFrameType()
ccs.ActionFrame:setFrameTime(float_fTime)
ccs.ActionFrame:setEasingType(int_easingType)
ccs.ActionFrame:getFrameTime()
ccs.ActionFrame:getFrameIndex()
ccs.ActionFrame:setFrameType(int_frameType)
ccs.ActionFrame:setFrameIndex(int_index)
ccs.ActionFrame:setEasingParameter()
ccs.ActionFrame:getEasingType()
ccs.ActionMoveFrame
ccs.ActionMoveFrame:setPosition(cocos2d_Vec2_pos)
ccs.ActionMoveFrame:getAction(float_duration)
ccs.ActionMoveFrame:getPosition()
ccs.ActionScaleFrame
ccs.ActionScaleFrame:setScaleY(float_scaleY)
ccs.ActionScaleFrame:setScaleX(float_scaleX)
ccs.ActionScaleFrame:getScaleY()
ccs.ActionScaleFrame:getScaleX()
ccs.ActionScaleFrame:getAction(float_duration)
ccs.ActionRotationFrame
ccs.ActionRotationFrame:setRotation(float_rotation)
ccs.ActionRotationFrame:getAction(float_duration)
ccs.ActionRotationFrame:getAction(float_duration,ActionFrame_srcFrame)
ccs.ActionRotationFrame:getRotation()
ccs.ActionFadeFrame
ccs.ActionFadeFrame:getOpacity()
ccs.ActionFadeFrame:getAction(float_duration)
ccs.ActionFadeFrame:setOpacity(int_opacity)
ccs.ActionTintFrame
ccs.ActionTintFrame:getColor()
ccs.ActionTintFrame:getAction(float_duration)
ccs.ActionTintFrame:setColor(cocos2d_Color3B_ccolor)
ccs.ActionObject
ccs.ActionObject:setCurrentTime(float_fTime)
ccs.ActionObject:pause()
ccs.ActionObject:setName(const_char_name)
ccs.ActionObject:setUnitTime(float_fTime)
ccs.ActionObject:getTotalTime()
ccs.ActionObject:getName()
ccs.ActionObject:stop()
ccs.ActionObject:play()
ccs.ActionObject:play(cocos2d_CallFunc_func)
ccs.ActionObject:getCurrentTime()
ccs.ActionObject:removeActionNode(ActionNode_node)
ccs.ActionObject:getLoop()
ccs.ActionObject:addActionNode(ActionNode_node)
ccs.ActionObject:getUnitTime()
ccs.ActionObject:isPlaying()
ccs.ActionObject:updateToFrameByTime(float_fTime)
ccs.ActionObject:setLoop(bool_bLoop)
ccs.ActionObject:simulationActionUpdate(float_dt)
ccs.ActionManagerEx
ccs.ActionManagerEx:stopActionByName(const_char_jsonName,const_char_actionName)
ccs.ActionManagerEx:getActionByName(const_char_jsonName,const_char_actionName)
ccs.ActionManagerEx:getStudioVersionNumber()
ccs.ActionManagerEx:playActionByName(const_char_jsonName,const_char_actionName)
ccs.ActionManagerEx:playActionByName(const_char_jsonName,const_char_actionName,cocos2d_CallFunc_func)
ccs.ActionManagerEx:releaseActions()
ccs.ActionManagerEx:destroyInstance()
ccs.ActionManagerEx:getInstance()
ccs.BaseData
ccs.BaseData:getColor()
ccs.BaseData:setColor(const_cocos2d_Color4B_color)
ccs.DisplayData
ccs.DisplayData:copy(DisplayData_displayData)
ccs.DisplayData:changeDisplayToTexture(const_std_string_displayName)
ccs.SpriteDisplayData
ccs.SpriteDisplayData:copy(DisplayData_displayData)
ccs.ArmatureDisplayData
ccs.ArmatureDisplayData:new()
ccs.ArmatureDisplayData:create()
ccs.ParticleDisplayData
ccs.ParticleDisplayData:new()
ccs.ParticleDisplayData:create()
ccs.BoneData
ccs.BoneData:getDisplayData(int_index)
ccs.BoneData:init()
ccs.BoneData:addDisplayData(DisplayData_displayData)
ccs.ArmatureData
ccs.ArmatureData:addBoneData(BoneData_boneData)
ccs.ArmatureData:init()
ccs.ArmatureData:getBoneData(const_std_string_boneName)
ccs.FrameData
ccs.FrameData:copy(const_BaseData_baseData)
ccs.MovementBoneData
ccs.MovementBoneData:init()
ccs.MovementBoneData:getFrameData(int_index)
ccs.MovementBoneData:addFrameData(FrameData_frameData)
ccs.MovementData
ccs.MovementData:getMovementBoneData(const_std_string_boneName)
ccs.MovementData:addMovementBoneData(MovementBoneData_movBoneData)
ccs.AnimationData
ccs.AnimationData:getMovement(const_std_string_movementName)
ccs.AnimationData:getMovementCount()
ccs.AnimationData:addMovement(MovementData_movData)
ccs.ContourData
ccs.ContourData:init()
ccs.ContourData:addVertex(cocos2d_Vec2_vertex)
ccs.TextureData
ccs.TextureData:getContourData(int_index)
ccs.TextureData:init()
ccs.TextureData:addContourData(ContourData_contourData)
ccs.Tween
ccs.Tween:getAnimation()
ccs.Tween:gotoAndPause(int_frameIndex)
ccs.Tween:play(MovementBoneData_movementBoneData,int_durationTo,int_durationTween,int_loop,int_tweenEasing)
ccs.Tween:gotoAndPlay(int_frameIndex)
ccs.Tween:init(Bone_bone)
ccs.Tween:setAnimation(ArmatureAnimation_animation)
ccs.Tween:create(Bone_bone)
ccs.DisplayManager
ccs.DisplayManager:getDisplayRenderNode()
ccs.DisplayManager:getAnchorPointInPoints()
ccs.DisplayManager:getDisplayRenderNodeType()
ccs.DisplayManager:removeDisplay(int_index)
ccs.DisplayManager:setForceChangeDisplay(bool_force)
ccs.DisplayManager:init(Bone_bone)
ccs.DisplayManager:getContentSize()
ccs.DisplayManager:getBoundingBox()
ccs.DisplayManager:addDisplay(DisplayData_displayData,int_index)
ccs.DisplayManager:containPoint(cocos2d_Vec2__point)
ccs.DisplayManager:containPoint(float_x,float_y)
ccs.DisplayManager:changeDisplayWithIndex(int_index,bool_force)
ccs.DisplayManager:changeDisplayWithName(const_std_string_name,bool_force)
ccs.DisplayManager:isForceChangeDisplay()
ccs.DisplayManager:getCurrentDisplayIndex()
ccs.DisplayManager:getAnchorPoint()
ccs.DisplayManager:getDecorativeDisplayList()
ccs.DisplayManager:isVisible()
ccs.DisplayManager:setVisible(bool_visible)
ccs.DisplayManager:create(Bone_bone)
ccs.Bone
ccs.Bone:isTransformDirty()
ccs.Bone:setBlendFunc(const_cocos2d_BlendFunc_blendFunc)
ccs.Bone:isIgnoreMovementBoneData()
ccs.Bone:updateZOrder()
ccs.Bone:getDisplayRenderNode()
ccs.Bone:isBlendDirty()
ccs.Bone:addChildBone(Bone_child)
ccs.Bone:getWorldInfo()
ccs.Bone:getTween()
ccs.Bone:getParentBone()
ccs.Bone:updateColor()
ccs.Bone:setTransformDirty(bool_dirty)
ccs.Bone:getDisplayRenderNodeType()
ccs.Bone:removeDisplay(int_index)
ccs.Bone:setBoneData(BoneData_boneData)
ccs.Bone:init()
ccs.Bone:init(const_std_string_name)
ccs.Bone:setParentBone(Bone_parent)
ccs.Bone:addDisplay(DisplayData_displayData,int_index)
ccs.Bone:getBlendFunc()
ccs.Bone:removeFromParent(bool_recursion)
ccs.Bone:getColliderDetector()
ccs.Bone:getChildArmature()
ccs.Bone:getTweenData()
ccs.Bone:changeDisplayWithIndex(int_index,bool_force)
ccs.Bone:changeDisplayWithName(const_std_string_name,bool_force)
ccs.Bone:setArmature(Armature_armature)
ccs.Bone:setBlendDirty(bool_dirty)
ccs.Bone:removeChildBone(Bone_bone,bool_recursion)
ccs.Bone:setChildArmature(Armature_childArmature)
ccs.Bone:getNodeToArmatureTransform()
ccs.Bone:getDisplayManager()
ccs.Bone:getArmature()
ccs.Bone:getBoneData()
ccs.Bone:create()
ccs.Bone:create(const_std_string_name)
ccs.BatchNode
ccs.BatchNode:create()
ccs.ArmatureAnimation
ccs.ArmatureAnimation:getSpeedScale()
ccs.ArmatureAnimation:play(const_std_string_animationName,int_durationTo,int_loop)
ccs.ArmatureAnimation:gotoAndPause(int_frameIndex)
ccs.ArmatureAnimation:playWithIndexes(int_durationTo,bool_loop)
ccs.ArmatureAnimation:setAnimationData(AnimationData_data)
ccs.ArmatureAnimation:setSpeedScale(float_speedScale)
ccs.ArmatureAnimation:getAnimationData()
ccs.ArmatureAnimation:gotoAndPlay(int_frameIndex)
ccs.ArmatureAnimation:init(Armature_armature)
ccs.ArmatureAnimation:playWithNames(int_durationTo,bool_loop)
ccs.ArmatureAnimation:getMovementCount()
ccs.ArmatureAnimation:playWithIndex(int_animationIndex,int_durationTo,int_loop)
ccs.ArmatureAnimation:getCurrentMovementID()
ccs.ArmatureAnimation:create(Armature_armature)
ccs.ArmatureDataManager
ccs.ArmatureDataManager:getAnimationDatas()
ccs.ArmatureDataManager:removeAnimationData(const_std_string_id)
ccs.ArmatureDataManager:addArmatureData(const_std_string_id,ArmatureData_armatureData,const_std_string_configFilePath)
ccs.ArmatureDataManager:addArmatureFileInfo(const_std_string_configFilePath)
ccs.ArmatureDataManager:addArmatureFileInfo(const_std_string_imagePath,const_std_string_plistPath,const_std_string_configFilePath)
ccs.ArmatureDataManager:removeArmatureFileInfo(const_std_string_configFilePath)
ccs.ArmatureDataManager:getTextureDatas()
ccs.ArmatureDataManager:getTextureData(const_std_string_id)
ccs.ArmatureDataManager:getArmatureData(const_std_string_id)
ccs.ArmatureDataManager:getAnimationData(const_std_string_id)
ccs.ArmatureDataManager:addAnimationData(const_std_string_id,AnimationData_animationData,const_std_string_configFilePath)
ccs.ArmatureDataManager:init()
ccs.ArmatureDataManager:removeArmatureData(const_std_string_id)
ccs.ArmatureDataManager:getArmatureDatas()
ccs.ArmatureDataManager:removeTextureData(const_std_string_id)
ccs.ArmatureDataManager:addTextureData(const_std_string_id,TextureData_textureData,const_std_string_configFilePath)
ccs.ArmatureDataManager:isAutoLoadSpriteFile()
ccs.ArmatureDataManager:addSpriteFrameFromFile(const_std_string_plistPath,const_std_string_imagePath,const_std_string_configFilePath)
ccs.ArmatureDataManager:destroyInstance()
ccs.ArmatureDataManager:getInstance()
ccs.Armature
ccs.Armature:getBone(const_std_string_name)
ccs.Armature:changeBoneParent(Bone_bone,const_std_string_parentName)
ccs.Armature:setAnimation(ArmatureAnimation_animation)
ccs.Armature:getBoneAtPoint(float_x,float_y)
ccs.Armature:getArmatureTransformDirty()
ccs.Armature:setVersion(float_version)
ccs.Armature:updateOffsetPoint()
ccs.Armature:getParentBone()
ccs.Armature:removeBone(Bone_bone,bool_recursion)
ccs.Armature:getBatchNode()
ccs.Armature:init()
ccs.Armature:init(const_std_string_name)
ccs.Armature:setParentBone(Bone_parentBone)
ccs.Armature:setBatchNode(BatchNode_batchNode)
ccs.Armature:setArmatureData(ArmatureData_armatureData)
ccs.Armature:addBone(Bone_bone,const_std_string_parentName)
ccs.Armature:getArmatureData()
ccs.Armature:getVersion()
ccs.Armature:getAnimation()
ccs.Armature:getOffsetPoints()
ccs.Armature:setBlendFunc(const_cocos2d_BlendFunc_blendFunc)
ccs.Armature:getBoneDic()
ccs.Armature:create()
ccs.Armature:create(const_std_string_name)
ccs.Skin
ccs.Skin:getBone()
ccs.Skin:getNodeToWorldTransformAR()
ccs.Skin:updateArmatureTransform()
ccs.Skin:setBone(Bone_bone)
ccs.Skin:create()
ccs.Skin:create(const_std_string_pszFileName)
ccs.Skin:createWithSpriteFrameName(const_std_string_pszSpriteFrameName)
ccs.ComAttribute
ccs.ComAttribute:getFloat(const_std_string_key,float_def)
ccs.ComAttribute:getString(const_std_string_key,const_std_string_def)
ccs.ComAttribute:setFloat(const_std_string_key,float_value)
ccs.ComAttribute:setString(const_std_string_key,const_std_string_value)
ccs.ComAttribute:getBool(const_std_string_key,bool_def)
ccs.ComAttribute:setInt(const_std_string_key,int_value)
ccs.ComAttribute:parse(const_std_string_jsonFile)
ccs.ComAttribute:getInt(const_std_string_key,int_def)
ccs.ComAttribute:setBool(const_std_string_key,bool_value)
ccs.ComAttribute:create()
ccs.ComAudio
ccs.ComAudio:stopAllEffects()
ccs.ComAudio:getEffectsVolume()
ccs.ComAudio:stopEffect(unsigned_int_nSoundId)
ccs.ComAudio:getBackgroundMusicVolume()
ccs.ComAudio:willPlayBackgroundMusic()
ccs.ComAudio:setBackgroundMusicVolume(float_volume)
ccs.ComAudio:start()
ccs.ComAudio:stopBackgroundMusic(bool_bReleaseData)
ccs.ComAudio:pauseBackgroundMusic()
ccs.ComAudio:isBackgroundMusicPlaying()
ccs.ComAudio:isLoop()
ccs.ComAudio:resumeAllEffects()
ccs.ComAudio:pauseAllEffects()
ccs.ComAudio:preloadBackgroundMusic(const_char_pszFilePath)
ccs.ComAudio:playBackgroundMusic(const_char_pszFilePath,bool_bLoop)
ccs.ComAudio:playBackgroundMusic()
ccs.ComAudio:stop()
ccs.ComAudio:playEffect(const_char_pszFilePath,bool_bLoop)
ccs.ComAudio:playEffect()
ccs.ComAudio:preloadEffect(const_char_pszFilePath)
ccs.ComAudio:setLoop(bool_bLoop)
ccs.ComAudio:unloadEffect(const_char_pszFilePath)
ccs.ComAudio:rewindBackgroundMusic()
ccs.ComAudio:pauseEffect(unsigned_int_nSoundId)
ccs.ComAudio:resumeBackgroundMusic()
ccs.ComAudio:setFile(const_char_pszFilePath)
ccs.ComAudio:setEffectsVolume(float_volume)
ccs.ComAudio:getFile()
ccs.ComAudio:resumeEffect(unsigned_int_nSoundId)
ccs.ComAudio:create()
ccs.ComController
ccs.ComController:create()
ccs.ComRender
ccs.ComRender:setNode(cocos2d_Node_node)
ccs.ComRender:getNode()
ccs.ComRender:create()
ccs.GUIReader
ccs.GUIReader:setFilePath(const_std_string_strFilePath)
ccs.GUIReader:widgetFromJsonFile(const_char_fileName)
ccs.GUIReader:getFilePath()
ccs.GUIReader:widgetFromBinaryFile(const_char_fileName)
ccs.GUIReader:getVersionInteger(const_char_str)
ccs.GUIReader:destroyInstance()
ccs.GUIReader:getInstance()
ccs.SceneReader
ccs.SceneReader:setTarget()
ccs.SceneReader:createNodeWithSceneFile(const_std_string_fileName,AttachComponentType_attachComponent)
ccs.SceneReader:getAttachComponentType()
ccs.SceneReader:getNodeByTag(int_nTag)
ccs.SceneReader:destroyInstance()
ccs.SceneReader:sceneReaderVersion()
ccs.SceneReader:getInstance()
ccs.ActionTimelineCache
ccs.ActionTimelineCache:createActionFromJson(const_std_string_fileName)
ccs.ActionTimelineCache:createActionWithFlatBuffersFile(const_std_string_fileName)
ccs.ActionTimelineCache:loadAnimationActionWithFlatBuffersFile(const_std_string_fileName)
ccs.ActionTimelineCache:createActionFromContent(const_std_string_fileName,const_std_string_content)
ccs.ActionTimelineCache:purge()
ccs.ActionTimelineCache:init()
ccs.ActionTimelineCache:loadAnimationActionWithContent(const_std_stringfileName,const_std_string_content)
ccs.ActionTimelineCache:loadAnimationActionWithFile(const_std_string_fileName)
ccs.ActionTimelineCache:removeAction(const_std_string_fileName)
ccs.ActionTimelineCache:createActionWithFlatBuffersForSimulator(const_std_string_fileName)
ccs.ActionTimelineCache:destroyInstance()
ccs.ActionTimelineCache:createAction(const_std_string_fileName)
ccs.Frame
ccs.Frame:clone()
ccs.Frame:setTweenType()
ccs.Frame:setNode()
ccs.Frame:setTimeline()
ccs.Frame:isEnterWhenPassed()
ccs.Frame:getTweenType()
ccs.Frame:getEasingParams()
ccs.Frame:setEasingParams()
ccs.Frame:getFrameIndex()
ccs.Frame:apply()
ccs.Frame:isTween()
ccs.Frame:setFrameIndex()
ccs.Frame:setTween()
ccs.Frame:getTimeline()
ccs.Frame:getNode()
ccs.VisibleFrame
ccs.VisibleFrame:isVisible()
ccs.VisibleFrame:setVisible(bool_visible)
ccs.VisibleFrame:create()
ccs.TextureFrame
ccs.TextureFrame:new()
ccs.TextureFrame:getTextureName()
ccs.TextureFrame:setTextureName()
ccs.TextureFrame:create()
ccs.RotationFrame
ccs.RotationFrame:setRotation(float_rotation)
ccs.RotationFrame:getRotation()
ccs.RotationFrame:create()
ccs.SkewFrame
ccs.SkewFrame:getSkewY()
ccs.SkewFrame:setSkewX(float_skewx)
ccs.SkewFrame:setSkewY(float_skewy)
ccs.SkewFrame:getSkewX()
ccs.SkewFrame:create()
ccs.RotationSkewFrame
ccs.RotationSkewFrame:create()
ccs.PositionFrame
ccs.PositionFrame:getX()
ccs.PositionFrame:getY()
ccs.PositionFrame:setPosition(const_cocos2d_Point_position)
ccs.PositionFrame:setX(float_x)
ccs.PositionFrame:setY(float_y)
ccs.PositionFrame:getPosition()
ccs.PositionFrame:create()
ccs.ScaleFrame
ccs.ScaleFrame:new()
ccs.ScaleFrame:setScaleY()
ccs.ScaleFrame:setScaleX()
ccs.ScaleFrame:getScaleY()
ccs.ScaleFrame:getScaleX()
ccs.ScaleFrame:setScale()
ccs.ScaleFrame:create()
ccs.AnchorPointFrame
ccs.AnchorPointFrame:setAnchorPoint(const_cocos2d_Point_point)
ccs.AnchorPointFrame:getAnchorPoint()
ccs.AnchorPointFrame:create()
ccs.InnerActionFrame
ccs.InnerActionFrame:new()
ccs.InnerActionFrame:getEndFrameIndex()
ccs.InnerActionFrame:getStartFrameIndex()
ccs.InnerActionFrame:getInnerActionType()
ccs.InnerActionFrame:setEndFrameIndex()
ccs.InnerActionFrame:setEnterWithName()
ccs.InnerActionFrame:setSingleFrameIndex()
ccs.InnerActionFrame:setStartFrameIndex()
ccs.InnerActionFrame:getSingleFrameIndex()
ccs.InnerActionFrame:setInnerActionType()
ccs.InnerActionFrame:setAnimationName()
ccs.InnerActionFrame:create()
ccs.ColorFrame
ccs.ColorFrame:new()
ccs.ColorFrame:getColor()
ccs.ColorFrame:setColor()
ccs.ColorFrame:create()
ccs.AlphaFrame
ccs.AlphaFrame:getAlpha()
ccs.AlphaFrame:setAlpha(GLubyte_alpha)
ccs.AlphaFrame:create()
ccs.EventFrame
ccs.EventFrame:new()
ccs.EventFrame:setEvent()
ccs.EventFrame:init()
ccs.EventFrame:getEvent()
ccs.EventFrame:create()
ccs.ZOrderFrame
ccs.ZOrderFrame:getZOrder()
ccs.ZOrderFrame:setZOrder(int_zorder)
ccs.ZOrderFrame:create()
ccs.BlendFuncFrame
ccs.BlendFuncFrame:getBlendFunc()
ccs.BlendFuncFrame:setBlendFunc(cocos2d_BlendFunc_blendFunc)
ccs.BlendFuncFrame:create()
ccs.PlayableFrame
ccs.PlayableFrame:setPlayableAct(std_string_playact)
ccs.PlayableFrame:getPlayableAct()
ccs.PlayableFrame:create()
ccs.Timeline
ccs.Timeline:clone()
ccs.Timeline:gotoFrame(int_frameIndex)
ccs.Timeline:setNode(cocos2d_Node_node)
ccs.Timeline:getActionTimeline()
ccs.Timeline:insertFrame(Frame_frame,int_index)
ccs.Timeline:setActionTag(int_tag)
ccs.Timeline:addFrame(Frame_frame)
ccs.Timeline:getFrames()
ccs.Timeline:getActionTag()
ccs.Timeline:getNode()
ccs.Timeline:removeFrame(Frame_frame)
ccs.Timeline:setActionTimeline(ActionTimeline_action)
ccs.Timeline:stepToFrame(int_frameIndex)
ccs.Timeline:create()
ccs.ActionTimelineData
ccs.ActionTimelineData:setActionTag(int_actionTag)
ccs.ActionTimelineData:init(int_actionTag)
ccs.ActionTimelineData:getActionTag()
ccs.ActionTimelineData:create(int_actionTag)
ccs.ActionTimeline
ccs.ActionTimeline:clearFrameEndCallFuncs()
ccs.ActionTimeline:setAnimationEndCallFunc(const_std_string_animationName)
ccs.ActionTimeline:addTimeline(Timeline_timeline)
ccs.ActionTimeline:getCurrentFrame()
ccs.ActionTimeline:getStartFrame()
ccs.ActionTimeline:pause()
ccs.ActionTimeline:start()
ccs.ActionTimeline:init()
ccs.ActionTimeline:removeTimeline(Timeline_timeline)
ccs.ActionTimeline:clearFrameEventCallFunc()
ccs.ActionTimeline:setLastFrameCallFunc()
ccs.ActionTimeline:getTimelines()
ccs.ActionTimeline:play(std_string_animationName,bool_loop)
ccs.ActionTimeline:getAnimationInfo(const_std_string_animationName)
ccs.ActionTimeline:resume()
ccs.ActionTimeline:addFrameEndCallFunc(int_frameIndex,const_std_string_funcKey)
ccs.ActionTimeline:removeAnimationInfo(std_string_animationName)
ccs.ActionTimeline:getTimeSpeed()
ccs.ActionTimeline:addAnimationInfo(const_AnimationInfo_animationInfo)
ccs.ActionTimeline:getDuration()
ccs.ActionTimeline:gotoFrameAndPause(int_startIndex)
ccs.ActionTimeline:isPlaying()
ccs.ActionTimeline:removeFrameEndCallFuncs(int_frameIndex)
ccs.ActionTimeline:gotoFrameAndPlay(int_startIndex)
ccs.ActionTimeline:gotoFrameAndPlay(int_startIndex,bool_loop)
ccs.ActionTimeline:gotoFrameAndPlay(int_startIndex,int_endIndex,bool_loop)
ccs.ActionTimeline:gotoFrameAndPlay(int_startIndex,int_endIndex,int_currentFrameIndex,bool_loop)
ccs.ActionTimeline:IsAnimationInfoExists(const_std_string_animationName)
ccs.ActionTimeline:getEndFrame()
ccs.ActionTimeline:setTimeSpeed(float_speed)
ccs.ActionTimeline:clearLastFrameCallFunc()
ccs.ActionTimeline:setDuration(int_duration)
ccs.ActionTimeline:setCurrentFrame(int_frameIndex)
ccs.ActionTimeline:removeFrameEndCallFunc(int_frameIndex,const_std_string_funcKey)
ccs.ActionTimeline:create()
ccs.ActionTimelineNode
ccs.ActionTimelineNode:getRoot()
ccs.ActionTimelineNode:getActionTimeline()
ccs.ActionTimelineNode:setActionTimeline(ActionTimeline_action)
ccs.ActionTimelineNode:init()
ccs.ActionTimelineNode:setRoot(cocos2d_Node_root)
ccs.ActionTimelineNode:create(cocos2d_Node_root,ActionTimeline_action)
ccs.BoneNode
ccs.BoneNode:getDebugDrawWidth()
ccs.BoneNode:getChildBones()
ccs.BoneNode:getBlendFunc()
ccs.BoneNode:getAllSubBones()
ccs.BoneNode:setBlendFunc(const_cocos2d_BlendFunc_blendFunc)
ccs.BoneNode:setDebugDrawEnabled(bool_isDebugDraw)
ccs.BoneNode:getVisibleSkinsRect()
ccs.BoneNode:getAllSubSkins()
ccs.BoneNode:displaySkin(SkinNode_skin,bool_hideOthers)
ccs.BoneNode:displaySkin(const_std_string_skinName,bool_hideOthers)
ccs.BoneNode:isDebugDrawEnabled()
ccs.BoneNode:addSkin(SkinNode_skin,bool_display)
ccs.BoneNode:addSkin(SkinNode_skin,bool_display,bool_hideOthers)
ccs.BoneNode:getRootSkeletonNode()
ccs.BoneNode:setDebugDrawLength(float_length)
ccs.BoneNode:getSkins()
ccs.BoneNode:getVisibleSkins()
ccs.BoneNode:setDebugDrawWidth(float_width)
ccs.BoneNode:getDebugDrawLength()
ccs.BoneNode:setDebugDrawColor(const_cocos2d_Color4F_color)
ccs.BoneNode:getDebugDrawColor()
ccs.BoneNode:create()
ccs.SkeletonNode
ccs.SkeletonNode:getBoneNode(const_std_string_boneName)
ccs.SkeletonNode:changeSkins(_boneSkinNameMap)
ccs.SkeletonNode:changeSkins(const_std_string_skinGroupName)
ccs.SkeletonNode:addSkinGroup(std_string_groupName,boneSkinNameMap)
ccs.SkeletonNode:getAllSubBonesMap()
ccs.SkeletonNode:create()
ccs.ComExtensionData
ccs.ComExtensionData:setActionTag(int_actionTag)
ccs.ComExtensionData:getCustomProperty()
ccs.ComExtensionData:getActionTag()
ccs.ComExtensionData:setCustomProperty(const_std_string_customProperty)
ccs.ComExtensionData:create()
ccui.LayoutParameter
ccui.LayoutParameter:clone()
ccui.LayoutParameter:getLayoutType()
ccui.LayoutParameter:createCloneInstance()
ccui.LayoutParameter:copyProperties(LayoutParameter_model)
ccui.LayoutParameter:create()
ccui.LinearLayoutParameter
ccui.LinearLayoutParameter:setGravity(LinearGravity_gravity)
ccui.LinearLayoutParameter:getGravity()
ccui.LinearLayoutParameter:create()
ccui.RelativeLayoutParameter
ccui.RelativeLayoutParameter:setAlign(RelativeAlign_align)
ccui.RelativeLayoutParameter:setRelativeToWidgetName(const_std_string_name)
ccui.RelativeLayoutParameter:getRelativeName()
ccui.RelativeLayoutParameter:getRelativeToWidgetName()
ccui.RelativeLayoutParameter:setRelativeName(const_std_string_name)
ccui.RelativeLayoutParameter:getAlign()
ccui.RelativeLayoutParameter:create()
ccui.Widget
ccui.Widget:setLayoutComponentEnabled(bool_enable)
ccui.Widget:setSizePercent(const_Vec2_percent)
ccui.Widget:getCustomSize()
ccui.Widget:getLeftBoundary()
ccui.Widget:setFlippedX(bool_flippedX)
ccui.Widget:setCallbackName(const_std_string_callbackName)
ccui.Widget:getVirtualRenderer()
ccui.Widget:setPropagateTouchEvents(bool_isPropagate)
ccui.Widget:isUnifySizeEnabled()
ccui.Widget:getSizePercent()
ccui.Widget:setPositionPercent(const_Vec2_percent)
ccui.Widget:setSwallowTouches(bool_swallow)
ccui.Widget:getLayoutSize()
ccui.Widget:setHighlighted(bool_highlight)
ccui.Widget:setPositionType(PositionType_type)
ccui.Widget:isIgnoreContentAdaptWithSize()
ccui.Widget:getVirtualRendererSize()
ccui.Widget:isHighlighted()
ccui.Widget:getLayoutParameter()
ccui.Widget:getLayoutParameter(LayoutParameter_Type_type)
ccui.Widget:getPositionType()
ccui.Widget:getTopBoundary()
ccui.Widget:ignoreContentAdaptWithSize(bool_ignore)
ccui.Widget:findNextFocusedWidget(FocusDirection_direction,Widget_current)
ccui.Widget:isEnabled()
ccui.Widget:isFocused()
ccui.Widget:getTouchBeganPosition()
ccui.Widget:isTouchEnabled()
ccui.Widget:getCallbackName()
ccui.Widget:getActionTag()
ccui.Widget:getWorldPosition()
ccui.Widget:isFocusEnabled()
ccui.Widget:setFocused(bool_focus)
ccui.Widget:setActionTag(int_tag)
ccui.Widget:setTouchEnabled(bool_enabled)
ccui.Widget:setFlippedY(bool_flippedY)
ccui.Widget:setEnabled(bool_enabled)
ccui.Widget:getRightBoundary()
ccui.Widget:setBrightStyle(BrightStyle_style)
ccui.Widget:setLayoutParameter(LayoutParameter_parameter)
ccui.Widget:clone()
ccui.Widget:setFocusEnabled(bool_enable)
ccui.Widget:getBottomBoundary()
ccui.Widget:isBright()
ccui.Widget:dispatchFocusEvent(Widget_widgetLoseFocus,Widget_widgetGetFocus)
ccui.Widget:setUnifySizeEnabled(bool_enable)
ccui.Widget:isPropagateTouchEvents()
ccui.Widget:hitTest(const_Vec2_pt,const_Camera_camera,Vec3_p)
ccui.Widget:isLayoutComponentEnabled()
ccui.Widget:requestFocus()
ccui.Widget:updateSizeAndPosition()
ccui.Widget:updateSizeAndPosition(const_Size_parentSize)
ccui.Widget:onFocusChange(Widget_widgetLostFocus,Widget_widgetGetFocus)
ccui.Widget:getTouchMovePosition()
ccui.Widget:getSizeType()
ccui.Widget:getCallbackType()
ccui.Widget:getTouchEndPosition()
ccui.Widget:getPositionPercent()
ccui.Widget:propagateTouchEvent(TouchEventType_event,Widget_sender,Touch_touch)
ccui.Widget:isFlippedX()
ccui.Widget:isFlippedY()
ccui.Widget:isClippingParentContainsPoint(const_Vec2_pt)
ccui.Widget:setSizeType(SizeType_type)
ccui.Widget:interceptTouchEvent(TouchEventType_event,Widget_sender,Touch_touch)
ccui.Widget:setBright(bool_bright)
ccui.Widget:setCallbackType(const_std_string_callbackType)
ccui.Widget:isSwallowTouches()
ccui.Widget:enableDpadNavigation(bool_enable)
ccui.Widget:getCurrentFocusedWidget(bool_isWidget)
ccui.Widget:getCurrentFocusedWidget()
ccui.Widget:create()
ccui.Layout
ccui.Layout:setBackGroundColorVector(const_Vec2_vector)
ccui.Layout:setClippingType(ClippingType_type)
ccui.Layout:setBackGroundColorType(BackGroundColorType_type)
ccui.Layout:setLoopFocus(bool_loop)
ccui.Layout:setBackGroundImageColor(const_Color3B_color)
ccui.Layout:getBackGroundColorVector()
ccui.Layout:getClippingType()
ccui.Layout:getRenderFile()
ccui.Layout:isLoopFocus()
ccui.Layout:removeBackGroundImage()
ccui.Layout:getBackGroundColorOpacity()
ccui.Layout:isClippingEnabled()
ccui.Layout:setBackGroundImageOpacity(GLubyte_opacity)
ccui.Layout:setBackGroundImage(const_std_string_fileName,TextureResType_texType)
ccui.Layout:setBackGroundColor(const_Color3B_color)
ccui.Layout:setBackGroundColor(const_Color3B_startColor,const_Color3B_endColor)
ccui.Layout:requestDoLayout()
ccui.Layout:getBackGroundImageCapInsets()
ccui.Layout:getBackGroundColor()
ccui.Layout:setClippingEnabled(bool_enabled)
ccui.Layout:getBackGroundImageColor()
ccui.Layout:isBackGroundImageScale9Enabled()
ccui.Layout:getBackGroundColorType()
ccui.Layout:getBackGroundEndColor()
ccui.Layout:setBackGroundColorOpacity(GLubyte_opacity)
ccui.Layout:getBackGroundImageOpacity()
ccui.Layout:isPassFocusToChild()
ccui.Layout:setBackGroundImageCapInsets(const_Rect_capInsets)
ccui.Layout:getBackGroundImageTextureSize()
ccui.Layout:forceDoLayout()
ccui.Layout:getLayoutType()
ccui.Layout:setPassFocusToChild(bool_pass)
ccui.Layout:getBackGroundStartColor()
ccui.Layout:setBackGroundImageScale9Enabled(bool_enabled)
ccui.Layout:setLayoutType(Type_type)
ccui.Layout:create()
ccui.Button
ccui.Button:getNormalTextureSize()
ccui.Button:getTitleText()
ccui.Button:setTitleLabel(Label_label)
ccui.Button:setTitleFontSize(float_size)
ccui.Button:resetPressedRender()
ccui.Button:setScale9Enabled(bool_enable)
ccui.Button:resetDisabledRender()
ccui.Button:getTitleRenderer()
ccui.Button:getRendererClicked()
ccui.Button:getDisabledFile()
ccui.Button:getZoomScale()
ccui.Button:getCapInsetsDisabledRenderer()
ccui.Button:setTitleColor(const_Color3B_color)
ccui.Button:getNormalFile()
ccui.Button:resetNormalRender()
ccui.Button:getRendererDisabled()
ccui.Button:setCapInsetsDisabledRenderer(const_Rect_capInsets)
ccui.Button:setCapInsets(const_Rect_capInsets)
ccui.Button:loadTextureDisabled(const_std_string_disabled,TextureResType_texType)
ccui.Button:loadTextureDisabled(SpriteFrame_disabledSpriteFrame)
ccui.Button:init()
ccui.Button:setTitleText(const_std_string_text)
ccui.Button:setCapInsetsNormalRenderer(const_Rect_capInsets)
ccui.Button:loadTexturePressed(const_std_string_selected,TextureResType_texType)
ccui.Button:loadTexturePressed(SpriteFrame_pressedSpriteFrame)
ccui.Button:setTitleFontName(const_std_string_fontName)
ccui.Button:getCapInsetsNormalRenderer()
ccui.Button:setTitleAlignment(TextHAlignment_hAlignment)
ccui.Button:setTitleAlignment(TextHAlignment_hAlignment,TextVAlignment_vAlignment)
ccui.Button:getCapInsetsPressedRenderer()
ccui.Button:isScale9Enabled()
ccui.Button:loadTextureNormal(const_std_string_normal,TextureResType_texType)
ccui.Button:loadTextureNormal(SpriteFrame_normalSpriteFrame)
ccui.Button:setCapInsetsPressedRenderer(const_Rect_capInsets)
ccui.Button:getPressedFile()
ccui.Button:getTitleLabel()
ccui.Button:getTitleFontSize()
ccui.Button:getRendererNormal()
ccui.Button:getTitleFontName()
ccui.Button:getTitleColor()
ccui.Button:setPressedActionEnabled(bool_enabled)
ccui.Button:setZoomScale(float_scale)
ccui.Button:create()
ccui.AbstractCheckButton
ccui.AbstractCheckButton:getCrossDisabledFile()
ccui.AbstractCheckButton:getBackDisabledFile()
ccui.AbstractCheckButton:loadTextureBackGroundSelected(const_std_string_backGroundSelected,TextureResType_texType)
ccui.AbstractCheckButton:loadTextureBackGroundSelected(SpriteFrame_spriteFrame)
ccui.AbstractCheckButton:loadTextureBackGroundDisabled(const_std_string_backGroundDisabled,TextureResType_texType)
ccui.AbstractCheckButton:loadTextureBackGroundDisabled(SpriteFrame_spriteframe)
ccui.AbstractCheckButton:getCrossNormalFile()
ccui.AbstractCheckButton:setSelected(bool_selected)
ccui.AbstractCheckButton:getBackPressedFile()
ccui.AbstractCheckButton:getRendererFrontCrossDisabled()
ccui.AbstractCheckButton:getRendererBackground()
ccui.AbstractCheckButton:loadTextureFrontCross(const_std_string_crossTextureName,TextureResType_texType)
ccui.AbstractCheckButton:loadTextureFrontCross(SpriteFrame_spriteframe)
ccui.AbstractCheckButton:getRendererBackgroundDisabled()
ccui.AbstractCheckButton:isSelected()
ccui.AbstractCheckButton:init()
ccui.AbstractCheckButton:getBackNormalFile()
ccui.AbstractCheckButton:getZoomScale()
ccui.AbstractCheckButton:getRendererFrontCross()
ccui.AbstractCheckButton:getRendererBackgroundSelected()
ccui.AbstractCheckButton:loadTextureBackGround(const_std_string_backGround,TextureResType_type)
ccui.AbstractCheckButton:loadTextureBackGround(SpriteFrame_spriteFrame)
ccui.AbstractCheckButton:setZoomScale(float_scale)
ccui.AbstractCheckButton:loadTextureFrontCrossDisabled(const_std_string_frontCrossDisabled,TextureResType_texType)
ccui.AbstractCheckButton:loadTextureFrontCrossDisabled(SpriteFrame_spriteframe)
ccui.CheckBox
ccui.CheckBox:addEventListener(const_ccCheckBoxCallback_callback)
ccui.CheckBox:create()
ccui.RadioButton
ccui.RadioButton:addEventListener(const_ccRadioButtonCallback_callback)
ccui.RadioButton:create()
ccui.RadioButtonGroup
ccui.RadioButtonGroup:removeRadioButton(RadioButton_radioButton)
ccui.RadioButtonGroup:isAllowedNoSelection()
ccui.RadioButtonGroup:getSelectedButtonIndex()
ccui.RadioButtonGroup:setAllowedNoSelection(bool_allowedNoSelection)
ccui.RadioButtonGroup:setSelectedButtonWithoutEvent(int_index)
ccui.RadioButtonGroup:setSelectedButtonWithoutEvent(RadioButton_radioButton)
ccui.RadioButtonGroup:addEventListener(const_ccRadioButtonGroupCallback_callback)
ccui.RadioButtonGroup:removeAllRadioButtons()
ccui.RadioButtonGroup:getRadioButtonByIndex(int_index)
ccui.RadioButtonGroup:getNumberOfRadioButtons()
ccui.RadioButtonGroup:addRadioButton(RadioButton_radioButton)
ccui.RadioButtonGroup:setSelectedButton(int_index)
ccui.RadioButtonGroup:setSelectedButton(RadioButton_radioButton)
ccui.RadioButtonGroup:create()
ccui.ImageView
ccui.ImageView:loadTexture(const_std_string_fileName,TextureResType_texType)
ccui.ImageView:loadTexture(SpriteFrame_spriteframe)
ccui.ImageView:setBlendFunc(const_BlendFunc_blendFunc)
ccui.ImageView:init()
ccui.ImageView:setScale9Enabled(bool_enabled)
ccui.ImageView:setTextureRect(const_Rect_rect)
ccui.ImageView:setCapInsets(const_Rect_capInsets)
ccui.ImageView:getRenderFile()
ccui.ImageView:getCapInsets()
ccui.ImageView:isScale9Enabled()
ccui.ImageView:create()
ccui.ImageView:create(const_std_string_imageFileName,TextureResType_texType)
ccui.Text
ccui.Text:getFontSize()
ccui.Text:getString()
ccui.Text:disableEffect()
ccui.Text:disableEffect(LabelEffect_effect)
ccui.Text:getLabelEffectType()
ccui.Text:getTextColor()
ccui.Text:setTextVerticalAlignment(TextVAlignment_alignment)
ccui.Text:setFontName(const_std_string_name)
ccui.Text:setTouchScaleChangeEnabled(bool_enabled)
ccui.Text:getShadowOffset()
ccui.Text:setString(const_std_string_text)
ccui.Text:getOutlineSize()
ccui.Text:init()
ccui.Text:getShadowBlurRadius()
ccui.Text:isTouchScaleChangeEnabled()
ccui.Text:getFontName()
ccui.Text:setTextAreaSize(const_Size_size)
ccui.Text:getStringLength()
ccui.Text:getAutoRenderSize()
ccui.Text:enableOutline(const_Color4B_outlineColor,int_outlineSize)
ccui.Text:getEffectColor()
ccui.Text:getType()
ccui.Text:getTextHorizontalAlignment()
ccui.Text:isShadowEnabled()
ccui.Text:setFontSize(float_size)
ccui.Text:getShadowColor()
ccui.Text:setTextColor(const_Color4B_color)
ccui.Text:enableGlow(const_Color4B_glowColor)
ccui.Text:getLetter(int_lettetIndex)
ccui.Text:getTextVerticalAlignment()
ccui.Text:getTextAreaSize()
ccui.Text:setTextHorizontalAlignment(TextHAlignment_alignment)
ccui.Text:create()
ccui.TextAtlas
ccui.TextAtlas:getStringLength()
ccui.TextAtlas:getString()
ccui.TextAtlas:setString(const_std_string_value)
ccui.TextAtlas:getRenderFile()
ccui.TextAtlas:adaptRenderers()
ccui.TextAtlas:create()
ccui.LoadingBar
ccui.LoadingBar:setPercent(float_percent)
ccui.LoadingBar:loadTexture(const_std_string_texture,TextureResType_texType)
ccui.LoadingBar:loadTexture(SpriteFrame_spriteframe)
ccui.LoadingBar:setDirection(Direction_direction)
ccui.LoadingBar:getRenderFile()
ccui.LoadingBar:setScale9Enabled(bool_enabled)
ccui.LoadingBar:setCapInsets(const_Rect_capInsets)
ccui.LoadingBar:getDirection()
ccui.LoadingBar:getCapInsets()
ccui.LoadingBar:isScale9Enabled()
ccui.LoadingBar:getPercent()
ccui.LoadingBar:create()
ccui.LoadingBar:create(const_std_string_textureName,float_percentage)
ccui.ListView
ccui.ListView:setGravity(Gravity_gravity)
ccui.ListView:removeLastItem()
ccui.ListView:getLeftPadding()
ccui.ListView:getCenterItemInCurrentView()
ccui.ListView:getCurSelectedIndex()
ccui.ListView:getScrollDuration()
ccui.ListView:getMagneticAllowedOutOfBoundary()
ccui.ListView:getItemsMargin()
ccui.ListView:scrollToItem(ssize_t_itemIndex,const_Vec2_positionRatioInView,const_Vec2_itemAnchorPoint)
ccui.ListView:jumpToItem(ssize_t_itemIndex,const_Vec2_positionRatioInView,const_Vec2_itemAnchorPoint)
ccui.ListView:setTopPadding(float_t)
ccui.ListView:getIndex(Widget_item)
ccui.ListView:pushBackCustomItem(Widget_item)
ccui.ListView:setCurSelectedIndex(int_itemIndex)
ccui.ListView:insertDefaultItem(ssize_t_index)
ccui.ListView:setMagneticType(MagneticType_magneticType)
ccui.ListView:setMagneticAllowedOutOfBoundary(bool_magneticAllowedOutOfBoundary)
ccui.ListView:addEventListener(const_ccListViewCallback_callback)
ccui.ListView:doLayout()
ccui.ListView:getTopmostItemInCurrentView()
ccui.ListView:setPadding(float_l,float_t,float_r,float_b)
ccui.ListView:removeAllItems()
ccui.ListView:getRightPadding()
ccui.ListView:getBottommostItemInCurrentView()
ccui.ListView:getItems()
ccui.ListView:getLeftmostItemInCurrentView()
ccui.ListView:setItemsMargin(float_margin)
ccui.ListView:getMagneticType()
ccui.ListView:getItem(ssize_t_index)
ccui.ListView:removeItem(ssize_t_index)
ccui.ListView:getTopPadding()
ccui.ListView:pushBackDefaultItem()
ccui.ListView:setLeftPadding(float_l)
ccui.ListView:getClosestItemToPosition(const_Vec2_targetPosition,const_Vec2_itemAnchorPoint)
ccui.ListView:setBottomPadding(float_b)
ccui.ListView:setScrollDuration(float_time)
ccui.ListView:getClosestItemToPositionInCurrentView(const_Vec2_positionRatioInView,const_Vec2_itemAnchorPoint)
ccui.ListView:getRightmostItemInCurrentView()
ccui.ListView:setRightPadding(float_r)
ccui.ListView:setItemModel(Widget_model)
ccui.ListView:getBottomPadding()
ccui.ListView:insertCustomItem(Widget_item,ssize_t_index)
ccui.ListView:create()
ccui.Slider
ccui.Slider:setPercent(int_percent)
ccui.Slider:getMaxPercent()
ccui.Slider:loadSlidBallTextureNormal(const_std_string_normal,TextureResType_resType)
ccui.Slider:loadSlidBallTextureNormal(SpriteFrame_spriteframe)
ccui.Slider:loadProgressBarTexture(const_std_string_fileName,TextureResType_resType)
ccui.Slider:loadProgressBarTexture(SpriteFrame_spriteframe)
ccui.Slider:getBallNormalFile()
ccui.Slider:getSlidBallDisabledRenderer()
ccui.Slider:setScale9Enabled(bool_able)
ccui.Slider:getBallPressedFile()
ccui.Slider:getZoomScale()
ccui.Slider:setCapInsetProgressBarRenderer(const_Rect_capInsets)
ccui.Slider:getSlidBallRenderer()
ccui.Slider:addEventListener(const_ccSliderCallback_callback)
ccui.Slider:setMaxPercent(int_percent)
ccui.Slider:loadBarTexture(const_std_string_fileName,TextureResType_resType)
ccui.Slider:loadBarTexture(SpriteFrame_spriteframe)
ccui.Slider:getProgressBarFile()
ccui.Slider:getCapInsetsBarRenderer()
ccui.Slider:getCapInsetsProgressBarRenderer()
ccui.Slider:getSlidBallPressedRenderer()
ccui.Slider:loadSlidBallTexturePressed(const_std_string_pressed,TextureResType_resType)
ccui.Slider:loadSlidBallTexturePressed(SpriteFrame_spriteframe)
ccui.Slider:getBackFile()
ccui.Slider:isScale9Enabled()
ccui.Slider:getBallDisabledFile()
ccui.Slider:setCapInsetsBarRenderer(const_Rect_capInsets)
ccui.Slider:getPercent()
ccui.Slider:setCapInsets(const_Rect_capInsets)
ccui.Slider:loadSlidBallTextureDisabled(const_std_string_disabled,TextureResType_resType)
ccui.Slider:loadSlidBallTextureDisabled(SpriteFrame_spriteframe)
ccui.Slider:getSlidBallNormalRenderer()
ccui.Slider:setZoomScale(float_scale)
ccui.Slider:create()
ccui.TextField
ccui.TextField:setAttachWithIME(bool_attach)
ccui.TextField:getFontSize()
ccui.TextField:getString()
ccui.TextField:setPasswordStyleText(const_char_styleText)
ccui.TextField:getDeleteBackward()
ccui.TextField:getTextColor()
ccui.TextField:getPlaceHolder()
ccui.TextField:getAttachWithIME()
ccui.TextField:setFontName(const_std_string_name)
ccui.TextField:getInsertText()
ccui.TextField:setInsertText(bool_insertText)
ccui.TextField:setString(const_std_string_text)
ccui.TextField:getDetachWithIME()
ccui.TextField:setTextVerticalAlignment(TextVAlignment_alignment)
ccui.TextField:addEventListener(const_ccTextFieldCallback_callback)
ccui.TextField:didNotSelectSelf()
ccui.TextField:getFontName()
ccui.TextField:setTextAreaSize(const_Size_size)
ccui.TextField:attachWithIME()
ccui.TextField:getStringLength()
ccui.TextField:getAutoRenderSize()
ccui.TextField:setPasswordEnabled(bool_enable)
ccui.TextField:getPlaceHolderColor()
ccui.TextField:getPasswordStyleText()
ccui.TextField:setMaxLengthEnabled(bool_enable)
ccui.TextField:isPasswordEnabled()
ccui.TextField:setDeleteBackward(bool_deleteBackward)
ccui.TextField:setCursorPosition(std_size_t_cursorPosition)
ccui.TextField:getTextHorizontalAlignment()
ccui.TextField:setFontSize(int_size)
ccui.TextField:setPlaceHolder(const_std_string_value)
ccui.TextField:setCursorFromPoint(const_Vec2_point,const_Camera_camera)
ccui.TextField:setPlaceHolderColor(const_Color3B_color)
ccui.TextField:setPlaceHolderColor(const_Color4B_color)
ccui.TextField:setTextHorizontalAlignment(TextHAlignment_alignment)
ccui.TextField:setTextColor(const_Color4B_textColor)
ccui.TextField:setCursorChar(char_cursor)
ccui.TextField:getMaxLength()
ccui.TextField:isMaxLengthEnabled()
ccui.TextField:setDetachWithIME(bool_detach)
ccui.TextField:getTextVerticalAlignment()
ccui.TextField:setTouchAreaEnabled(bool_enable)
ccui.TextField:setMaxLength(int_length)
ccui.TextField:setCursorEnabled(bool_enabled)
ccui.TextField:setTouchSize(const_Size_size)
ccui.TextField:getTouchSize()
ccui.TextField:create()
ccui.TextBMFont
ccui.TextBMFont:getStringLength()
ccui.TextBMFont:getString()
ccui.TextBMFont:getRenderFile()
ccui.TextBMFont:setFntFile(const_std_string_fileName)
ccui.TextBMFont:resetRender()
ccui.TextBMFont:create()
ccui.PageView
ccui.PageView:setIndicatorSpaceBetweenIndexNodes(float_spaceBetweenIndexNodes)
ccui.PageView:insertPage(Widget_page,int_idx)
ccui.PageView:setIndicatorIndexNodesOpacity(GLubyte_opacity)
ccui.PageView:setIndicatorSelectedIndexOpacity(GLubyte_opacity)
ccui.PageView:removeAllPages()
ccui.PageView:setAutoScrollStopEpsilon(float_epsilon)
ccui.PageView:setIndicatorIndexNodesScale(float_indexNodesScale)
ccui.PageView:setIndicatorEnabled(bool_enabled)
ccui.PageView:setIndicatorSelectedIndexColor(const_Color3B_color)
ccui.PageView:addEventListener(const_ccPageViewCallback_callback)
ccui.PageView:getIndicatorPosition()
ccui.PageView:setCurrentPageIndex(ssize_t_index)
ccui.PageView:getIndicatorIndexNodesColor()
ccui.PageView:getIndicatorSelectedIndexColor()
ccui.PageView:getIndicatorIndexNodesScale()
ccui.PageView:setIndicatorPosition(const_Vec2_position)
ccui.PageView:getIndicatorSelectedIndexOpacity()
ccui.PageView:scrollToPage(ssize_t_idx)
ccui.PageView:scrollToPage(ssize_t_idx,float_time)
ccui.PageView:setIndicatorPositionAsAnchorPoint(const_Vec2_positionAsAnchorPoint)
ccui.PageView:scrollToItem(ssize_t_itemIndex)
ccui.PageView:scrollToItem(ssize_t_idx,float_time)
ccui.PageView:setIndicatorIndexNodesColor(const_Color3B_color)
ccui.PageView:getIndicatorIndexNodesOpacity()
ccui.PageView:getIndicatorPositionAsAnchorPoint()
ccui.PageView:getCurrentPageIndex()
ccui.PageView:removePage(Widget_page)
ccui.PageView:setIndicatorIndexNodesTexture(const_std_string_texName,Widget_TextureResType_texType)
ccui.PageView:getIndicatorEnabled()
ccui.PageView:removePageAtIndex(ssize_t_index)
ccui.PageView:getIndicatorSpaceBetweenIndexNodes()
ccui.PageView:addPage(Widget_page)
ccui.PageView:create()
ccui.Helper
ccui.Helper:convertBoundingBoxToScreen(Node_node)
ccui.Helper:changeLayoutSystemActiveState(bool_active)
ccui.Helper:seekActionWidgetByActionTag(Widget_root,int_tag)
ccui.Helper:seekWidgetByName(Widget_root,const_std_string_name)
ccui.Helper:seekWidgetByTag(Widget_root,int_tag)
ccui.Helper:restrictCapInsetRect(const_Rect_capInsets,const_Size_textureSize)
ccui.Helper:doLayout(Node_rootNode)
ccui.RichElement
ccui.RichElement:equalType(Type_type)
ccui.RichElement:init(int_tag,const_Color3B_color,GLubyte_opacity)
ccui.RichElement:setColor(const_Color3B_color)
ccui.RichElementText
ccui.RichElementText:new()
ccui.RichElementText:init()
ccui.RichElementText:create()
ccui.RichElementImage
ccui.RichElementImage:setHeight(int_height)
ccui.RichElementImage:init(int_tag,const_Color3B_color,GLubyte_opacity,const_std_string_filePath,const_std_string_url,Widget_TextureResType_texType)
ccui.RichElementImage:setWidth(int_width)
ccui.RichElementImage:setUrl(const_std_string_url)
ccui.RichElementImage:create(int_tag,const_Color3B_color,GLubyte_opacity,const_std_string_filePath,const_std_string_url,Widget_TextureResType_texType)
ccui.RichElementCustomNode
ccui.RichElementCustomNode:init(int_tag,const_Color3B_color,GLubyte_opacity,Node_customNode)
ccui.RichElementCustomNode:create(int_tag,const_Color3B_color,GLubyte_opacity,Node_customNode)
ccui.RichElementNewLine
ccui.RichElementNewLine:create(int_tag,const_Color3B_color,GLubyte_opacity)
ccui.RichText
ccui.RichText:insertElement(RichElement_element,int_index)
ccui.RichText:setAnchorTextOutline(bool_enable,const_Color3B_outlineColor,int_outlineSize)
ccui.RichText:getFontSize()
ccui.RichText:pushBackElement(RichElement_element)
ccui.RichText:setAnchorTextBold(bool_enable)
ccui.RichText:getAnchorFontColor()
ccui.RichText:getAnchorTextShadowBlurRadius()
ccui.RichText:setAnchorTextShadow(bool_enable,const_Color3B_shadowColor,const_Size_offset,int_blurRadius)
ccui.RichText:isAnchorTextItalicEnabled()
ccui.RichText:setAnchorFontColor(const_std_string_color)
ccui.RichText:setFontFace(const_std_string_face)
ccui.RichText:setAnchorTextGlow(bool_enable,const_Color3B_glowColor)
ccui.RichText:getHorizontalAlignment()
ccui.RichText:setHorizontalAlignment(HorizontalAlignment_a)
ccui.RichText:setAnchorTextDel(bool_enable)
ccui.RichText:getAnchorTextOutlineColor3B()
ccui.RichText:stringWithColor4B(const_cocos2d_Color4B_color4b)
ccui.RichText:initWithXML(const_std_string_xml,const_ValueMap_defaults,const_OpenUrlHandler_handleOpenUrl)
ccui.RichText:getAnchorFontColor3B()
ccui.RichText:formatText()
ccui.RichText:getAnchorTextGlowColor3B()
ccui.RichText:openUrl(const_std_string_url)
ccui.RichText:getFontFace()
ccui.RichText:setFontColor(const_std_string_color)
ccui.RichText:isAnchorTextGlowEnabled()
ccui.RichText:getDefaults()
ccui.RichText:isAnchorTextUnderlineEnabled()
ccui.RichText:getFontColor()
ccui.RichText:isAnchorTextShadowEnabled()
ccui.RichText:getAnchorTextOutlineSize()
ccui.RichText:setVerticalSpace(float_space)
ccui.RichText:isAnchorTextDelEnabled()
ccui.RichText:setDefaults(const_ValueMap_defaults)
ccui.RichText:setWrapMode(WrapMode_wrapMode)
ccui.RichText:setFontSize(float_size)
ccui.RichText:removeElement(int_index)
ccui.RichText:removeElement(RichElement_element)
ccui.RichText:setAnchorTextItalic(bool_enable)
ccui.RichText:getAnchorTextShadowOffset()
ccui.RichText:isAnchorTextBoldEnabled()
ccui.RichText:getAnchorTextShadowColor3B()
ccui.RichText:stringWithColor3B(const_cocos2d_Color3B_color3b)
ccui.RichText:isAnchorTextOutlineEnabled()
ccui.RichText:getFontColor3B()
ccui.RichText:getWrapMode()
ccui.RichText:setAnchorTextUnderline(bool_enable)
ccui.RichText:color3BWithString(const_std_string_color)
ccui.RichText:create()
ccui.RichText:createWithXML(const_std_string_xml,const_ValueMap_defaults,const_OpenUrlHandler_handleOpenUrl)
ccui.HBox
ccui.HBox:initWithSize(const_Size_size)
ccui.HBox:create()
ccui.HBox:create(const_Size_size)
ccui.VBox
ccui.VBox:initWithSize(const_Size_size)
ccui.VBox:create()
ccui.VBox:create(const_Size_size)
ccui.RelativeBox
ccui.RelativeBox:initWithSize(const_Size_size)
ccui.RelativeBox:create()
ccui.RelativeBox:create(const_Size_size)
ccui.Scale9Sprite
ccui.Scale9Sprite:resizableSpriteWithCapInsets(const_Rect_capInsets)
ccui.Scale9Sprite:setState(State_state)
ccui.Scale9Sprite:setInsetBottom(float_bottomInset)
ccui.Scale9Sprite:initWithSpriteFrameName(const_std_string_spriteFrameName,const_Rect_capInsets)
ccui.Scale9Sprite:initWithSpriteFrameName(const_std_string_spriteFrameName)
ccui.Scale9Sprite:setInsetTop(float_topInset)
ccui.Scale9Sprite:init()
ccui.Scale9Sprite:init(Sprite_sprite,const_Rect_rect,bool_rotated,const_Rect_capInsets)
ccui.Scale9Sprite:init(Sprite_sprite,const_Rect_rect,const_Rect_capInsets)
ccui.Scale9Sprite:setPreferredSize(const_Size_size)
ccui.Scale9Sprite:setSpriteFrame(SpriteFrame__spriteFrame,const_Rect_capInsets)
ccui.Scale9Sprite:getState()
ccui.Scale9Sprite:getInsetBottom()
ccui.Scale9Sprite:setScale9Enabled(bool_enabled)
ccui.Scale9Sprite:isScale9Enabled()
ccui.Scale9Sprite:getInsetRight()
ccui.Scale9Sprite:getOriginalSize()
ccui.Scale9Sprite:initWithFile(const_std_string_file,const_Rect_rect,const_Rect_capInsets)
ccui.Scale9Sprite:initWithFile(const_Rect_capInsets,const_std_string_file)
ccui.Scale9Sprite:initWithFile(const_std_string_file,const_Rect_rect)
ccui.Scale9Sprite:initWithFile(const_std_string_file)
ccui.Scale9Sprite:getInsetTop()
ccui.Scale9Sprite:setInsetLeft(float_leftInset)
ccui.Scale9Sprite:initWithSpriteFrame(SpriteFrame_spriteFrame,const_Rect_capInsets)
ccui.Scale9Sprite:getPreferredSize()
ccui.Scale9Sprite:getInsetLeft()
ccui.Scale9Sprite:setInsetRight(float_rightInset)
ccui.Scale9Sprite:create()
ccui.Scale9Sprite:create(const_std_string_file,const_Rect_rect,const_Rect_capInsets)
ccui.Scale9Sprite:create(const_Rect_capInsets,const_std_string_file)
ccui.Scale9Sprite:create(const_std_string_file,const_Rect_rect)
ccui.Scale9Sprite:create(const_std_string_file)
ccui.Scale9Sprite:createWithSpriteFrameName(const_std_string_spriteFrameName)
ccui.Scale9Sprite:createWithSpriteFrameName(const_std_string_spriteFrameName,const_Rect_capInsets)
ccui.Scale9Sprite:createWithSpriteFrame(SpriteFrame_spriteFrame)
ccui.Scale9Sprite:createWithSpriteFrame(SpriteFrame_spriteFrame,const_Rect_capInsets)
ccui.EditBox
ccui.EditBox:new()
ccui.EditBox:getFontSize()
ccui.EditBox:keyboardDidShow()
ccui.EditBox:getScriptEditBoxHandler()
ccui.EditBox:getText()
ccui.EditBox:getInputMode()
ccui.EditBox:getPlaceholderFontName()
ccui.EditBox:keyboardDidHide()
ccui.EditBox:setPlaceholderFontName()
ccui.EditBox:getPlaceholderFontSize()
ccui.EditBox:getPlaceHolder()
ccui.EditBox:setFontName()
ccui.EditBox:registerScriptEditBoxHandler()
ccui.EditBox:setPlaceholderFontSize()
ccui.EditBox:setInputMode()
ccui.EditBox:unregisterScriptEditBoxHandler()
ccui.EditBox:keyboardWillShow()
ccui.EditBox:setPlaceholderFontColor()
ccui.EditBox:getReturnType()
ccui.EditBox:setFontColor()
ccui.EditBox:getFontName()
ccui.EditBox:keyboardWillHide()
ccui.EditBox:touchDownAction()
ccui.EditBox:getFontColor()
ccui.EditBox:getInputFlag()
ccui.EditBox:getTextHorizontalAlignment()
ccui.EditBox:setPlaceholderFont()
ccui.EditBox:setFontSize()
ccui.EditBox:initWithSizeAndBackgroundSprite()
ccui.EditBox:setPlaceHolder()
ccui.EditBox:setReturnType()
ccui.EditBox:setInputFlag()
ccui.EditBox:getMaxLength()
ccui.EditBox:setText()
ccui.EditBox:getPlaceholderFontColor()
ccui.EditBox:setMaxLength()
ccui.EditBox:setFont()
ccui.EditBox:setTextHorizontalAlignment()
ccui.EditBox:create()
ccui.LayoutComponent
ccui.LayoutComponent:setStretchWidthEnabled(bool_isUsed)
ccui.LayoutComponent:setPercentWidth(float_percentWidth)
ccui.LayoutComponent:getAnchorPosition()
ccui.LayoutComponent:setPositionPercentXEnabled(bool_isUsed)
ccui.LayoutComponent:setStretchHeightEnabled(bool_isUsed)
ccui.LayoutComponent:setActiveEnabled(bool_enable)
ccui.LayoutComponent:getRightMargin()
ccui.LayoutComponent:getSize()
ccui.LayoutComponent:setAnchorPosition(const_Point_point)
ccui.LayoutComponent:refreshLayout()
ccui.LayoutComponent:isPercentWidthEnabled()
ccui.LayoutComponent:setVerticalEdge(VerticalEdge_vEage)
ccui.LayoutComponent:getTopMargin()
ccui.LayoutComponent:setSizeWidth(float_width)
ccui.LayoutComponent:getPercentContentSize()
ccui.LayoutComponent:getVerticalEdge()
ccui.LayoutComponent:setPercentWidthEnabled(bool_isUsed)
ccui.LayoutComponent:isStretchWidthEnabled()
ccui.LayoutComponent:setLeftMargin(float_margin)
ccui.LayoutComponent:getSizeWidth()
ccui.LayoutComponent:setPositionPercentYEnabled(bool_isUsed)
ccui.LayoutComponent:getSizeHeight()
ccui.LayoutComponent:getPositionPercentY()
ccui.LayoutComponent:getPositionPercentX()
ccui.LayoutComponent:setTopMargin(float_margin)
ccui.LayoutComponent:getPercentHeight()
ccui.LayoutComponent:getUsingPercentContentSize()
ccui.LayoutComponent:setPositionPercentY(float_percentMargin)
ccui.LayoutComponent:setPositionPercentX(float_percentMargin)
ccui.LayoutComponent:setRightMargin(float_margin)
ccui.LayoutComponent:isPositionPercentYEnabled()
ccui.LayoutComponent:setPercentHeight(float_percentHeight)
ccui.LayoutComponent:setPercentOnlyEnabled(bool_enable)
ccui.LayoutComponent:setHorizontalEdge(HorizontalEdge_hEage)
ccui.LayoutComponent:setPosition(const_Point_position)
ccui.LayoutComponent:setUsingPercentContentSize(bool_isUsed)
ccui.LayoutComponent:getLeftMargin()
ccui.LayoutComponent:getPosition()
ccui.LayoutComponent:setSizeHeight(float_height)
ccui.LayoutComponent:isPositionPercentXEnabled()
ccui.LayoutComponent:getBottomMargin()
ccui.LayoutComponent:setPercentHeightEnabled(bool_isUsed)
ccui.LayoutComponent:setPercentContentSize(const_Vec2_percent)
ccui.LayoutComponent:isPercentHeightEnabled()
ccui.LayoutComponent:getPercentWidth()
ccui.LayoutComponent:getHorizontalEdge()
ccui.LayoutComponent:isStretchHeightEnabled()
ccui.LayoutComponent:setBottomMargin(float_margin)
ccui.LayoutComponent:setSize(const_Size_size)
ccui.LayoutComponent:bindLayoutComponent(Node_node)
ccui.TabHeader
ccui.TabHeader:getIndexInTabControl()
ccui.TabHeader:getTitleText()
ccui.TabHeader:setTitleFontSize(float_size)
ccui.TabHeader:setTitleFontName(const_std_string_fontName)
ccui.TabHeader:getTitleFontSize()
ccui.TabHeader:getTitleFontName()
ccui.TabHeader:getTitleColor()
ccui.TabHeader:getTitleRenderer()
ccui.TabHeader:setTitleText(const_std_string_text)
ccui.TabHeader:setTitleColor(const_Color4B_color)
ccui.TabHeader:create()
ccui.TabControl
ccui.TabControl:setHeaderWidth(float_headerWidth)
ccui.TabControl:removeTab(int_index)
ccui.TabControl:getTabCount()
ccui.TabControl:getHeaderDockPlace()
ccui.TabControl:getSelectedTabIndex()
ccui.TabControl:insertTab(int_index,TabHeader_header,Layout_container)
ccui.TabControl:ignoreHeadersTextureSize(bool_ignore)
ccui.TabControl:getHeaderWidth()
ccui.TabControl:setHeaderDockPlace(TabControl_Dock_dockPlace)
ccui.TabControl:setSelectTab(int_index)
ccui.TabControl:setSelectTab(TabHeader_tabHeader)
ccui.TabControl:getTabHeader(int_index)
ccui.TabControl:isIgnoreHeadersTextureSize()
ccui.TabControl:setTabChangedEventListener(const_ccTabControlCallback_callback)
ccui.TabControl:setHeaderSelectedZoom(float_zoom)
ccui.TabControl:setHeaderHeight(float_headerHeight)
ccui.TabControl:indexOfTabHeader(const_TabHeader_tabCell)
ccui.TabControl:getTabContainer(int_index)
ccui.TabControl:getHeaderSelectedZoom()
ccui.TabControl:getHeaderHeight()
ccui.TabControl:create()
cc.AABB
cc.AABB:reset()
cc.AABB:set(const_Vec3_min,const_Vec3_max)
cc.AABB:transform(const_Mat4_mat)
cc.AABB:getCenter()
cc.AABB:isEmpty()
cc.AABB:getCorners(Vec3_dst)
cc.AABB:updateMinMax(const_Vec3_point,ssize_t_num)
cc.AABB:containPoint(const_Vec3_point)
cc.OBB
cc.OBB:reset()
cc.OBB:set(const_Vec3_center,const_Vec3__xAxis,const_Vec3__yAxis,const_Vec3__zAxis,const_Vec3__extents)
cc.OBB:transform(const_Mat4_mat)
cc.OBB:containPoint(const_Vec3_point)
cc.OBB:intersects(const_OBB_box)
cc.OBB:getCorners(Vec3_verts)
cc.Ray
cc.Ray:set(const_Vec3_origin,const_Vec3_direction)
cc.Ray:transform(const_Mat4_matrix)
cc.Ray:intersects(const_AABB_aabb,float_distance)
cc.Ray:intersects(const_OBB_obb,float_distance)
cc.Ray:intersects(const_Plane_plane)
cc.GLNode
cc.GLNode:create()
cc.GLNode:setShaderProgram()
ScriptHandlerMgr:getInstance()
ScriptHandlerMgr:removeObjectAllHandlers(void_object)
CCPoint:new()
CCPoint:new_local()
CCRect:new()
CCRect:new_local()
CCSize:new()
CCSize:new_local()
CCArray:create()
CCArray:createWithObject()
CCArray:createWithArray()
CCArray:createWithCapacity()
CCArray:createWithContentsOfFile()
CCArray:count()
CCArray:capacity()
CCArray:indexOfObject()
CCArray:objectAtIndex()
CCArray:lastObject()
CCArray:randomObject()
CCArray:isEqualToArray()
CCArray:containsObject()
CCArray:addObject()
CCArray:addObjectsFromArray()
CCArray:insertObject()
CCArray:removeLastObject()
CCArray:removeObject()
CCArray:removeObjectAtIndex()
CCArray:removeObjectsInArray()
CCArray:removeAllObjects()
CCArray:fastRemoveObject()
CCArray:fastRemoveObjectAtIndex()
CCArray:exchangeObject()
CCArray:exchangeObjectAtIndex()
CCArray:reverseObjects()
CCArray:reduceMemoryFootprint()
CCArray:replaceObjectAtIndex()
CCString:intValue()
CCString:uintValue()
CCString:floatValue()
CCString:doubleValue()
CCString:boolValue()
CCString:getCString()
CCString:length()
CCString:compare()
CCString:isEqual()
CCString:create()
CCString:createWithData()
CCString:createWithContentsOfFile()
cc.LabelBMFont
cc.LabelBMFont:setLineBreakWithoutSpace(bool_breakWithoutSpace)
cc.LabelBMFont:isOpacityModifyRGB()
cc.LabelBMFont:getLetter(int_ID)
cc.LabelBMFont:getString()
cc.LabelBMFont:setBlendFunc(const_BlendFunc_blendFunc)
cc.LabelBMFont:setString(const_std_string_newString)
cc.LabelBMFont:initWithString(const_std_string_str,const_std_string_fntFile,float_width,TextHAlignment_alignment,const_Vec2_imageOffset)
cc.LabelBMFont:setOpacityModifyRGB(bool_isOpacityModifyRGB)
cc.LabelBMFont:getFntFile()
cc.LabelBMFont:setFntFile(const_std_string_fntFile,const_Vec2_imageOffset)
cc.LabelBMFont:setAlignment(TextHAlignment_alignment)
cc.LabelBMFont:setWidth(float_width)
cc.LabelBMFont:create(const_std_string_str,const_std_string_fntFile,float_width,TextHAlignment_alignment,const_Vec2_imageOffset)
cc.LabelBMFont:create()
cc.LabelTTF
cc.LabelTTF:enableShadow(const_Size_shadowOffset,float_shadowOpacity,float_shadowBlur,bool_mustUpdateTexture)
cc.LabelTTF:setDimensions(const_Size_dim)
cc.LabelTTF:getFontSize()
cc.LabelTTF:getString()
cc.LabelTTF:setFlippedY(bool_flippedY)
cc.LabelTTF:setFlippedX(bool_flippedX)
cc.LabelTTF:setTextDefinition(const_FontDefinition_theDefinition)
cc.LabelTTF:setFontName(const_std_string_fontName)
cc.LabelTTF:getHorizontalAlignment()
cc.LabelTTF:initWithStringAndTextDefinition(const_std_string_string,FontDefinition_textDefinition)
cc.LabelTTF:setString(const_std_string_label)
cc.LabelTTF:setFontFillColor(const_Color3B_tintColor,bool_mustUpdateTexture)
cc.LabelTTF:enableStroke(const_Color3B_strokeColor,float_strokeSize,bool_mustUpdateTexture)
cc.LabelTTF:getDimensions()
cc.LabelTTF:setVerticalAlignment(TextVAlignment_verticalAlignment)
cc.LabelTTF:setFontSize(float_fontSize)
cc.LabelTTF:getVerticalAlignment()
cc.LabelTTF:getTextDefinition()
cc.LabelTTF:setBlendFunc(const_BlendFunc_blendFunc)
cc.LabelTTF:getFontName()
cc.LabelTTF:setHorizontalAlignment(TextHAlignment_alignment)
cc.LabelTTF:disableShadow(bool_mustUpdateTexture)
cc.LabelTTF:disableStroke(bool_mustUpdateTexture)
cc.LabelTTF:create()
cc.LabelTTF:createWithFontDefinition(const_std_string_string,FontDefinition_textDefinition)
cc.CCBProxy
cc.CCBProxy:createCCBReader()
cc.CCBProxy:readCCBFromFile(const_char_pszFileName,CCBReader_pCCBReader,bool_bSetOwner)
cc.CCBProxy:getNodeTypeName(Node_pNode)
cc.CCBProxy:setCallback(Node_node,int_handle,int_controlEvents)
ccs.CustomGUIReader
ccs.CustomGUIReader:create(std_string_className,int_createFunc,int_setPropsFunc)
cc.WebSocket
cc.WebSocket:getReadyState()
cc.WebSocket:close()
cc.XMLHttpRequest
cc.XMLHttpRequest:new()
cc.XMLHttpRequest:open()
cc.XMLHttpRequest:send()
cc.XMLHttpRequest:abort()
cc.XMLHttpRequest:setRequestHeader()
cc.XMLHttpRequest:getAllResponseHeaders()
cc.XMLHttpRequest:getResponseHeader()
cc.XMLHttpRequest:registerScriptHandler()
cc.XMLHttpRequest:unregisterScriptHandler()
plugin.PluginProtocol
plugin.PluginProtocol:getPluginName()
plugin.PluginProtocol:getPluginVersion()
plugin.PluginProtocol:getSDKVersion()
plugin.PluginProtocol:setDebugMode(bool_bDebug)
plugin.PluginManager
plugin.PluginManager:unloadPlugin(const_char_name)
plugin.PluginManager:loadPlugin(const_char_name)
plugin.PluginManager:getInstance()
plugin.ProtocolAnalytics
plugin.ProtocolAnalytics:logTimedEventBegin(const_char_eventId)
plugin.ProtocolAnalytics:logError(const_char_errorId,const_char_message)
plugin.ProtocolAnalytics:setCaptureUncaughtException(bool_enabled)
plugin.ProtocolAnalytics:setSessionContinueMillis(long_millis)
plugin.ProtocolAnalytics:logEvent(const_char_eventId,LogEventParamMap_paramMap)
plugin.ProtocolAnalytics:startSession(const_char_appKey)
plugin.ProtocolAnalytics:stopSession()
plugin.ProtocolAnalytics:logTimedEventEnd(const_char_eventId)
plugin.ProtocolIAP
plugin.ProtocolIAP:onPayResult(PayResultCode_ret,const_char_msg)
plugin.ProtocolIAP:configDeveloperInfo(TIAPDeveloperInfo_devInfo)
plugin.ProtocolAds
plugin.ProtocolAds:showAds(TAdsInfo_info,AdsPos_pos)
plugin.ProtocolAds:hideAds(TAdsInfo_info)
plugin.ProtocolAds:queryPoints()
plugin.ProtocolAds:spendPoints(int_points)
plugin.ProtocolAds:configDeveloperInfo(TAdsDeveloperInfo_devInfo)
plugin.ProtocolShare
plugin.ProtocolShare:onShareResult(ShareResultCode_ret,const_char_msg)
plugin.ProtocolShare:configDeveloperInfo(TShareDeveloperInfo_devInfo)
plugin.ProtocolSocial
plugin.ProtocolSocial:showLeaderboard(const_char_leaderboardID)
plugin.ProtocolSocial:showAchievements()
plugin.ProtocolSocial:configDeveloperInfo(TSocialDeveloperInfo_devInfo)
plugin.ProtocolUser
plugin.ProtocolUser:configDeveloperInfo(TUserDeveloperInfo_devInfo)
plugin.ProtocolUser:getSessionID()
plugin.ProtocolUser:getAccessToken()
plugin.AgentManager
plugin.AgentManager:getSocialPlugin()
plugin.AgentManager:getAdsPlugin()
plugin.AgentManager:purge()
plugin.AgentManager:getUserPlugin()
plugin.AgentManager:getIAPPlugin()
plugin.AgentManager:getSharePlugin()
plugin.AgentManager:getAnalyticsPlugin()
plugin.AgentManager:destroyInstance()
plugin.AgentManager:getInstance()
plugin.FacebookAgent
plugin.FacebookAgent:activateApp()
plugin.FacebookAgent:getPermissionList()
plugin.FacebookAgent:getUserID()
plugin.FacebookAgent:logout()
plugin.FacebookAgent:getSDKVersion()
plugin.FacebookAgent:isLoggedIn()
plugin.FacebookAgent:getAccessToken()
plugin.FacebookAgent:destroyInstance()
cc.DrawNode3D
cc.DrawNode3D:getBlendFunc()
cc.DrawNode3D:setBlendFunc(const_BlendFunc_blendFunc)
cc.DrawNode3D:drawLine(const_cocos2d_Vec3_from,const_cocos2d_Vec3_to,const_Color4F_color)
cc.DrawNode3D:clear()
cc.DrawNode3D:drawCube(cocos2d_Vec3_vertices,const_Color4F_color)
cc.DrawNode3D:create()
cc.ValueTypeJudgeInTable
cc.ValueTypeJudgeInTable:create()
cc.Vec2
cc.Vec3
cc.Vec4
cc.Rect
cc.Color4b
cc.Color4f
cc.Color3b
cc.Size
cc.PhysicsMaterial
cc.BlendFunc
cc.AffineTransform
cc.FontDefinition
cc.TTFConfig
cc.Uniform
cc.VertexAttrib
cc.MeshVertexAttrib
cc.Quaternion
cc.TexParams
