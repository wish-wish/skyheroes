// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CacheInfo.proto

#ifndef PROTOBUF_CacheInfo_2eproto__INCLUDED
#define PROTOBUF_CacheInfo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif

#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace sunMap {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_CacheInfo_2eproto();
void protobuf_AssignDesc_CacheInfo_2eproto();
void protobuf_ShutdownFile_CacheInfo_2eproto();

class CacheTile;
class LodInfo;
class LodInfos;
class Bounds;
class CacheInfo;

// ===================================================================

class CacheTile : public ::google::protobuf::Message {
 public:
  CacheTile();
  virtual ~CacheTile();

  CacheTile(const CacheTile& from);

  inline CacheTile& operator=(const CacheTile& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CacheTile& default_instance();

  void Swap(CacheTile* other);

  // implements Message ----------------------------------------------

  CacheTile* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CacheTile& from);
  void MergeFrom(const CacheTile& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline ::google::protobuf::uint32 x() const;
  inline void set_x(::google::protobuf::uint32 value);

  // required uint32 y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline ::google::protobuf::uint32 y() const;
  inline void set_y(::google::protobuf::uint32 value);

  // required uint32 z = 3;
  inline bool has_z() const;
  inline void clear_z();
  static const int kZFieldNumber = 3;
  inline ::google::protobuf::uint32 z() const;
  inline void set_z(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:sunMap.CacheTile)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_z();
  inline void clear_has_z();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 x_;
  ::google::protobuf::uint32 y_;
  ::google::protobuf::uint32 z_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_CacheInfo_2eproto();
  friend void protobuf_AssignDesc_CacheInfo_2eproto();
  friend void protobuf_ShutdownFile_CacheInfo_2eproto();

  void InitAsDefaultInstance();
  static CacheTile* default_instance_;
};
// -------------------------------------------------------------------

class LodInfo : public ::google::protobuf::Message {
 public:
  LodInfo();
  virtual ~LodInfo();

  LodInfo(const LodInfo& from);

  inline LodInfo& operator=(const LodInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LodInfo& default_instance();

  void Swap(LodInfo* other);

  // implements Message ----------------------------------------------

  LodInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LodInfo& from);
  void MergeFrom(const LodInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 level = 1;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 1;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional float scale = 2;
  inline bool has_scale() const;
  inline void clear_scale();
  static const int kScaleFieldNumber = 2;
  inline float scale() const;
  inline void set_scale(float value);

  // required int32 numTile2Need = 3;
  inline bool has_numtile2need() const;
  inline void clear_numtile2need();
  static const int kNumTile2NeedFieldNumber = 3;
  inline ::google::protobuf::int32 numtile2need() const;
  inline void set_numtile2need(::google::protobuf::int32 value);

  // repeated .sunMap.CacheTile tileLost = 4;
  inline int tilelost_size() const;
  inline void clear_tilelost();
  static const int kTileLostFieldNumber = 4;
  inline const ::sunMap::CacheTile& tilelost(int index) const;
  inline ::sunMap::CacheTile* mutable_tilelost(int index);
  inline ::sunMap::CacheTile* add_tilelost();
  inline const ::google::protobuf::RepeatedPtrField< ::sunMap::CacheTile >&
      tilelost() const;
  inline ::google::protobuf::RepeatedPtrField< ::sunMap::CacheTile >*
      mutable_tilelost();

  // @@protoc_insertion_point(class_scope:sunMap.LodInfo)
 private:
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_scale();
  inline void clear_has_scale();
  inline void set_has_numtile2need();
  inline void clear_has_numtile2need();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 level_;
  float scale_;
  ::google::protobuf::RepeatedPtrField< ::sunMap::CacheTile > tilelost_;
  ::google::protobuf::int32 numtile2need_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_CacheInfo_2eproto();
  friend void protobuf_AssignDesc_CacheInfo_2eproto();
  friend void protobuf_ShutdownFile_CacheInfo_2eproto();

  void InitAsDefaultInstance();
  static LodInfo* default_instance_;
};
// -------------------------------------------------------------------

class LodInfos : public ::google::protobuf::Message {
 public:
  LodInfos();
  virtual ~LodInfos();

  LodInfos(const LodInfos& from);

  inline LodInfos& operator=(const LodInfos& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LodInfos& default_instance();

  void Swap(LodInfos* other);

  // implements Message ----------------------------------------------

  LodInfos* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LodInfos& from);
  void MergeFrom(const LodInfos& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 numLevel = 1;
  inline bool has_numlevel() const;
  inline void clear_numlevel();
  static const int kNumLevelFieldNumber = 1;
  inline ::google::protobuf::int32 numlevel() const;
  inline void set_numlevel(::google::protobuf::int32 value);

  // required int32 numTile2Need = 2;
  inline bool has_numtile2need() const;
  inline void clear_numtile2need();
  static const int kNumTile2NeedFieldNumber = 2;
  inline ::google::protobuf::int32 numtile2need() const;
  inline void set_numtile2need(::google::protobuf::int32 value);

  // required int32 numTileInDisk = 3;
  inline bool has_numtileindisk() const;
  inline void clear_numtileindisk();
  static const int kNumTileInDiskFieldNumber = 3;
  inline ::google::protobuf::int32 numtileindisk() const;
  inline void set_numtileindisk(::google::protobuf::int32 value);

  // repeated .sunMap.LodInfo lodInfos = 4;
  inline int lodinfos_size() const;
  inline void clear_lodinfos();
  static const int kLodInfosFieldNumber = 4;
  inline const ::sunMap::LodInfo& lodinfos(int index) const;
  inline ::sunMap::LodInfo* mutable_lodinfos(int index);
  inline ::sunMap::LodInfo* add_lodinfos();
  inline const ::google::protobuf::RepeatedPtrField< ::sunMap::LodInfo >&
      lodinfos() const;
  inline ::google::protobuf::RepeatedPtrField< ::sunMap::LodInfo >*
      mutable_lodinfos();

  // @@protoc_insertion_point(class_scope:sunMap.LodInfos)
 private:
  inline void set_has_numlevel();
  inline void clear_has_numlevel();
  inline void set_has_numtile2need();
  inline void clear_has_numtile2need();
  inline void set_has_numtileindisk();
  inline void clear_has_numtileindisk();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 numlevel_;
  ::google::protobuf::int32 numtile2need_;
  ::google::protobuf::RepeatedPtrField< ::sunMap::LodInfo > lodinfos_;
  ::google::protobuf::int32 numtileindisk_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_CacheInfo_2eproto();
  friend void protobuf_AssignDesc_CacheInfo_2eproto();
  friend void protobuf_ShutdownFile_CacheInfo_2eproto();

  void InitAsDefaultInstance();
  static LodInfos* default_instance_;
};
// -------------------------------------------------------------------

class Bounds : public ::google::protobuf::Message {
 public:
  Bounds();
  virtual ~Bounds();

  Bounds(const Bounds& from);

  inline Bounds& operator=(const Bounds& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Bounds& default_instance();

  void Swap(Bounds* other);

  // implements Message ----------------------------------------------

  Bounds* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Bounds& from);
  void MergeFrom(const Bounds& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float left = 1;
  inline bool has_left() const;
  inline void clear_left();
  static const int kLeftFieldNumber = 1;
  inline float left() const;
  inline void set_left(float value);

  // required float top = 2;
  inline bool has_top() const;
  inline void clear_top();
  static const int kTopFieldNumber = 2;
  inline float top() const;
  inline void set_top(float value);

  // required float right = 3;
  inline bool has_right() const;
  inline void clear_right();
  static const int kRightFieldNumber = 3;
  inline float right() const;
  inline void set_right(float value);

  // required float bottom = 4;
  inline bool has_bottom() const;
  inline void clear_bottom();
  static const int kBottomFieldNumber = 4;
  inline float bottom() const;
  inline void set_bottom(float value);

  // @@protoc_insertion_point(class_scope:sunMap.Bounds)
 private:
  inline void set_has_left();
  inline void clear_has_left();
  inline void set_has_top();
  inline void clear_has_top();
  inline void set_has_right();
  inline void clear_has_right();
  inline void set_has_bottom();
  inline void clear_has_bottom();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  float left_;
  float top_;
  float right_;
  float bottom_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_CacheInfo_2eproto();
  friend void protobuf_AssignDesc_CacheInfo_2eproto();
  friend void protobuf_ShutdownFile_CacheInfo_2eproto();

  void InitAsDefaultInstance();
  static Bounds* default_instance_;
};
// -------------------------------------------------------------------

class CacheInfo : public ::google::protobuf::Message {
 public:
  CacheInfo();
  virtual ~CacheInfo();

  CacheInfo(const CacheInfo& from);

  inline CacheInfo& operator=(const CacheInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CacheInfo& default_instance();

  void Swap(CacheInfo* other);

  // implements Message ----------------------------------------------

  CacheInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CacheInfo& from);
  void MergeFrom(const CacheInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required .sunMap.Bounds bound = 2;
  inline bool has_bound() const;
  inline void clear_bound();
  static const int kBoundFieldNumber = 2;
  inline const ::sunMap::Bounds& bound() const;
  inline ::sunMap::Bounds* mutable_bound();
  inline ::sunMap::Bounds* release_bound();
  inline void set_allocated_bound(::sunMap::Bounds* bound);

  // required bytes mapId = 3;
  inline bool has_mapid() const;
  inline void clear_mapid();
  static const int kMapIdFieldNumber = 3;
  inline const ::std::string& mapid() const;
  inline void set_mapid(const ::std::string& value);
  inline void set_mapid(const char* value);
  inline void set_mapid(const void* value, size_t size);
  inline ::std::string* mutable_mapid();
  inline ::std::string* release_mapid();
  inline void set_allocated_mapid(::std::string* mapid);

  // required bytes imageType = 4;
  inline bool has_imagetype() const;
  inline void clear_imagetype();
  static const int kImageTypeFieldNumber = 4;
  inline const ::std::string& imagetype() const;
  inline void set_imagetype(const ::std::string& value);
  inline void set_imagetype(const char* value);
  inline void set_imagetype(const void* value, size_t size);
  inline ::std::string* mutable_imagetype();
  inline ::std::string* release_imagetype();
  inline void set_allocated_imagetype(::std::string* imagetype);

  // required float time = 5;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 5;
  inline float time() const;
  inline void set_time(float value);

  // required .sunMap.LodInfos lods = 6;
  inline bool has_lods() const;
  inline void clear_lods();
  static const int kLodsFieldNumber = 6;
  inline const ::sunMap::LodInfos& lods() const;
  inline ::sunMap::LodInfos* mutable_lods();
  inline ::sunMap::LodInfos* release_lods();
  inline void set_allocated_lods(::sunMap::LodInfos* lods);

  // @@protoc_insertion_point(class_scope:sunMap.CacheInfo)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_bound();
  inline void clear_has_bound();
  inline void set_has_mapid();
  inline void clear_has_mapid();
  inline void set_has_imagetype();
  inline void clear_has_imagetype();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_lods();
  inline void clear_has_lods();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::sunMap::Bounds* bound_;
  ::std::string* mapid_;
  ::std::string* imagetype_;
  ::sunMap::LodInfos* lods_;
  float time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_CacheInfo_2eproto();
  friend void protobuf_AssignDesc_CacheInfo_2eproto();
  friend void protobuf_ShutdownFile_CacheInfo_2eproto();

  void InitAsDefaultInstance();
  static CacheInfo* default_instance_;
};
// ===================================================================


// ===================================================================

// CacheTile

// required uint32 x = 1;
inline bool CacheTile::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CacheTile::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CacheTile::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CacheTile::clear_x() {
  x_ = 0u;
  clear_has_x();
}
inline ::google::protobuf::uint32 CacheTile::x() const {
  return x_;
}
inline void CacheTile::set_x(::google::protobuf::uint32 value) {
  set_has_x();
  x_ = value;
}

// required uint32 y = 2;
inline bool CacheTile::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CacheTile::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CacheTile::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CacheTile::clear_y() {
  y_ = 0u;
  clear_has_y();
}
inline ::google::protobuf::uint32 CacheTile::y() const {
  return y_;
}
inline void CacheTile::set_y(::google::protobuf::uint32 value) {
  set_has_y();
  y_ = value;
}

// required uint32 z = 3;
inline bool CacheTile::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CacheTile::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CacheTile::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CacheTile::clear_z() {
  z_ = 0u;
  clear_has_z();
}
inline ::google::protobuf::uint32 CacheTile::z() const {
  return z_;
}
inline void CacheTile::set_z(::google::protobuf::uint32 value) {
  set_has_z();
  z_ = value;
}

// -------------------------------------------------------------------

// LodInfo

// required int32 level = 1;
inline bool LodInfo::has_level() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LodInfo::set_has_level() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LodInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LodInfo::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 LodInfo::level() const {
  return level_;
}
inline void LodInfo::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional float scale = 2;
inline bool LodInfo::has_scale() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LodInfo::set_has_scale() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LodInfo::clear_has_scale() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LodInfo::clear_scale() {
  scale_ = 0;
  clear_has_scale();
}
inline float LodInfo::scale() const {
  return scale_;
}
inline void LodInfo::set_scale(float value) {
  set_has_scale();
  scale_ = value;
}

// required int32 numTile2Need = 3;
inline bool LodInfo::has_numtile2need() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LodInfo::set_has_numtile2need() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LodInfo::clear_has_numtile2need() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LodInfo::clear_numtile2need() {
  numtile2need_ = 0;
  clear_has_numtile2need();
}
inline ::google::protobuf::int32 LodInfo::numtile2need() const {
  return numtile2need_;
}
inline void LodInfo::set_numtile2need(::google::protobuf::int32 value) {
  set_has_numtile2need();
  numtile2need_ = value;
}

// repeated .sunMap.CacheTile tileLost = 4;
inline int LodInfo::tilelost_size() const {
  return tilelost_.size();
}
inline void LodInfo::clear_tilelost() {
  tilelost_.Clear();
}
inline const ::sunMap::CacheTile& LodInfo::tilelost(int index) const {
  return tilelost_.Get(index);
}
inline ::sunMap::CacheTile* LodInfo::mutable_tilelost(int index) {
  return tilelost_.Mutable(index);
}
inline ::sunMap::CacheTile* LodInfo::add_tilelost() {
  return tilelost_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::sunMap::CacheTile >&
LodInfo::tilelost() const {
  return tilelost_;
}
inline ::google::protobuf::RepeatedPtrField< ::sunMap::CacheTile >*
LodInfo::mutable_tilelost() {
  return &tilelost_;
}

// -------------------------------------------------------------------

// LodInfos

// required int32 numLevel = 1;
inline bool LodInfos::has_numlevel() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LodInfos::set_has_numlevel() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LodInfos::clear_has_numlevel() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LodInfos::clear_numlevel() {
  numlevel_ = 0;
  clear_has_numlevel();
}
inline ::google::protobuf::int32 LodInfos::numlevel() const {
  return numlevel_;
}
inline void LodInfos::set_numlevel(::google::protobuf::int32 value) {
  set_has_numlevel();
  numlevel_ = value;
}

// required int32 numTile2Need = 2;
inline bool LodInfos::has_numtile2need() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LodInfos::set_has_numtile2need() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LodInfos::clear_has_numtile2need() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LodInfos::clear_numtile2need() {
  numtile2need_ = 0;
  clear_has_numtile2need();
}
inline ::google::protobuf::int32 LodInfos::numtile2need() const {
  return numtile2need_;
}
inline void LodInfos::set_numtile2need(::google::protobuf::int32 value) {
  set_has_numtile2need();
  numtile2need_ = value;
}

// required int32 numTileInDisk = 3;
inline bool LodInfos::has_numtileindisk() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LodInfos::set_has_numtileindisk() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LodInfos::clear_has_numtileindisk() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LodInfos::clear_numtileindisk() {
  numtileindisk_ = 0;
  clear_has_numtileindisk();
}
inline ::google::protobuf::int32 LodInfos::numtileindisk() const {
  return numtileindisk_;
}
inline void LodInfos::set_numtileindisk(::google::protobuf::int32 value) {
  set_has_numtileindisk();
  numtileindisk_ = value;
}

// repeated .sunMap.LodInfo lodInfos = 4;
inline int LodInfos::lodinfos_size() const {
  return lodinfos_.size();
}
inline void LodInfos::clear_lodinfos() {
  lodinfos_.Clear();
}
inline const ::sunMap::LodInfo& LodInfos::lodinfos(int index) const {
  return lodinfos_.Get(index);
}
inline ::sunMap::LodInfo* LodInfos::mutable_lodinfos(int index) {
  return lodinfos_.Mutable(index);
}
inline ::sunMap::LodInfo* LodInfos::add_lodinfos() {
  return lodinfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::sunMap::LodInfo >&
LodInfos::lodinfos() const {
  return lodinfos_;
}
inline ::google::protobuf::RepeatedPtrField< ::sunMap::LodInfo >*
LodInfos::mutable_lodinfos() {
  return &lodinfos_;
}

// -------------------------------------------------------------------

// Bounds

// required float left = 1;
inline bool Bounds::has_left() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Bounds::set_has_left() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Bounds::clear_has_left() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Bounds::clear_left() {
  left_ = 0;
  clear_has_left();
}
inline float Bounds::left() const {
  return left_;
}
inline void Bounds::set_left(float value) {
  set_has_left();
  left_ = value;
}

// required float top = 2;
inline bool Bounds::has_top() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Bounds::set_has_top() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Bounds::clear_has_top() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Bounds::clear_top() {
  top_ = 0;
  clear_has_top();
}
inline float Bounds::top() const {
  return top_;
}
inline void Bounds::set_top(float value) {
  set_has_top();
  top_ = value;
}

// required float right = 3;
inline bool Bounds::has_right() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Bounds::set_has_right() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Bounds::clear_has_right() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Bounds::clear_right() {
  right_ = 0;
  clear_has_right();
}
inline float Bounds::right() const {
  return right_;
}
inline void Bounds::set_right(float value) {
  set_has_right();
  right_ = value;
}

// required float bottom = 4;
inline bool Bounds::has_bottom() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Bounds::set_has_bottom() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Bounds::clear_has_bottom() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Bounds::clear_bottom() {
  bottom_ = 0;
  clear_has_bottom();
}
inline float Bounds::bottom() const {
  return bottom_;
}
inline void Bounds::set_bottom(float value) {
  set_has_bottom();
  bottom_ = value;
}

// -------------------------------------------------------------------

// CacheInfo

// required string name = 1;
inline bool CacheInfo::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CacheInfo::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CacheInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CacheInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& CacheInfo::name() const {
  return *name_;
}
inline void CacheInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void CacheInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void CacheInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CacheInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* CacheInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CacheInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required .sunMap.Bounds bound = 2;
inline bool CacheInfo::has_bound() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CacheInfo::set_has_bound() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CacheInfo::clear_has_bound() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CacheInfo::clear_bound() {
  if (bound_ != NULL) bound_->::sunMap::Bounds::Clear();
  clear_has_bound();
}
inline const ::sunMap::Bounds& CacheInfo::bound() const {
  return bound_ != NULL ? *bound_ : *default_instance_->bound_;
}
inline ::sunMap::Bounds* CacheInfo::mutable_bound() {
  set_has_bound();
  if (bound_ == NULL) bound_ = new ::sunMap::Bounds;
  return bound_;
}
inline ::sunMap::Bounds* CacheInfo::release_bound() {
  clear_has_bound();
  ::sunMap::Bounds* temp = bound_;
  bound_ = NULL;
  return temp;
}
inline void CacheInfo::set_allocated_bound(::sunMap::Bounds* bound) {
  delete bound_;
  bound_ = bound;
  if (bound) {
    set_has_bound();
  } else {
    clear_has_bound();
  }
}

// required bytes mapId = 3;
inline bool CacheInfo::has_mapid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CacheInfo::set_has_mapid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CacheInfo::clear_has_mapid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CacheInfo::clear_mapid() {
  if (mapid_ != &::google::protobuf::internal::kEmptyString) {
    mapid_->clear();
  }
  clear_has_mapid();
}
inline const ::std::string& CacheInfo::mapid() const {
  return *mapid_;
}
inline void CacheInfo::set_mapid(const ::std::string& value) {
  set_has_mapid();
  if (mapid_ == &::google::protobuf::internal::kEmptyString) {
    mapid_ = new ::std::string;
  }
  mapid_->assign(value);
}
inline void CacheInfo::set_mapid(const char* value) {
  set_has_mapid();
  if (mapid_ == &::google::protobuf::internal::kEmptyString) {
    mapid_ = new ::std::string;
  }
  mapid_->assign(value);
}
inline void CacheInfo::set_mapid(const void* value, size_t size) {
  set_has_mapid();
  if (mapid_ == &::google::protobuf::internal::kEmptyString) {
    mapid_ = new ::std::string;
  }
  mapid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CacheInfo::mutable_mapid() {
  set_has_mapid();
  if (mapid_ == &::google::protobuf::internal::kEmptyString) {
    mapid_ = new ::std::string;
  }
  return mapid_;
}
inline ::std::string* CacheInfo::release_mapid() {
  clear_has_mapid();
  if (mapid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = mapid_;
    mapid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CacheInfo::set_allocated_mapid(::std::string* mapid) {
  if (mapid_ != &::google::protobuf::internal::kEmptyString) {
    delete mapid_;
  }
  if (mapid) {
    set_has_mapid();
    mapid_ = mapid;
  } else {
    clear_has_mapid();
    mapid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bytes imageType = 4;
inline bool CacheInfo::has_imagetype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CacheInfo::set_has_imagetype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CacheInfo::clear_has_imagetype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CacheInfo::clear_imagetype() {
  if (imagetype_ != &::google::protobuf::internal::kEmptyString) {
    imagetype_->clear();
  }
  clear_has_imagetype();
}
inline const ::std::string& CacheInfo::imagetype() const {
  return *imagetype_;
}
inline void CacheInfo::set_imagetype(const ::std::string& value) {
  set_has_imagetype();
  if (imagetype_ == &::google::protobuf::internal::kEmptyString) {
    imagetype_ = new ::std::string;
  }
  imagetype_->assign(value);
}
inline void CacheInfo::set_imagetype(const char* value) {
  set_has_imagetype();
  if (imagetype_ == &::google::protobuf::internal::kEmptyString) {
    imagetype_ = new ::std::string;
  }
  imagetype_->assign(value);
}
inline void CacheInfo::set_imagetype(const void* value, size_t size) {
  set_has_imagetype();
  if (imagetype_ == &::google::protobuf::internal::kEmptyString) {
    imagetype_ = new ::std::string;
  }
  imagetype_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CacheInfo::mutable_imagetype() {
  set_has_imagetype();
  if (imagetype_ == &::google::protobuf::internal::kEmptyString) {
    imagetype_ = new ::std::string;
  }
  return imagetype_;
}
inline ::std::string* CacheInfo::release_imagetype() {
  clear_has_imagetype();
  if (imagetype_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = imagetype_;
    imagetype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CacheInfo::set_allocated_imagetype(::std::string* imagetype) {
  if (imagetype_ != &::google::protobuf::internal::kEmptyString) {
    delete imagetype_;
  }
  if (imagetype) {
    set_has_imagetype();
    imagetype_ = imagetype;
  } else {
    clear_has_imagetype();
    imagetype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required float time = 5;
inline bool CacheInfo::has_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CacheInfo::set_has_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CacheInfo::clear_has_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CacheInfo::clear_time() {
  time_ = 0;
  clear_has_time();
}
inline float CacheInfo::time() const {
  return time_;
}
inline void CacheInfo::set_time(float value) {
  set_has_time();
  time_ = value;
}

// required .sunMap.LodInfos lods = 6;
inline bool CacheInfo::has_lods() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CacheInfo::set_has_lods() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CacheInfo::clear_has_lods() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CacheInfo::clear_lods() {
  if (lods_ != NULL) lods_->::sunMap::LodInfos::Clear();
  clear_has_lods();
}
inline const ::sunMap::LodInfos& CacheInfo::lods() const {
  return lods_ != NULL ? *lods_ : *default_instance_->lods_;
}
inline ::sunMap::LodInfos* CacheInfo::mutable_lods() {
  set_has_lods();
  if (lods_ == NULL) lods_ = new ::sunMap::LodInfos;
  return lods_;
}
inline ::sunMap::LodInfos* CacheInfo::release_lods() {
  clear_has_lods();
  ::sunMap::LodInfos* temp = lods_;
  lods_ = NULL;
  return temp;
}
inline void CacheInfo::set_allocated_lods(::sunMap::LodInfos* lods) {
  delete lods_;
  lods_ = lods;
  if (lods) {
    set_has_lods();
  } else {
    clear_has_lods();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace sunMap

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_CacheInfo_2eproto__INCLUDED
